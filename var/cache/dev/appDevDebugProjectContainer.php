<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;

/**
 * This class has been auto-generated
 * by the Symfony Dependency Injection Component.
 *
 * @final since Symfony 3.3
 */
class appDevDebugProjectContainer extends Container
{
    private $parameters;
    private $targetDirs = array();

    public function __construct()
    {
        $dir = __DIR__;
        for ($i = 1; $i <= 4; ++$i) {
            $this->targetDirs[$i] = $dir = dirname($dir);
        }
        $this->parameters = $this->getDefaultParameters();

        $this->services = array();
        $this->normalizedIds = array(
            'appbundle\\controller\\api\\securityapicontroller' => 'AppBundle\\Controller\\Api\\SecurityApiController',
            'appbundle\\controller\\contratoagenciacontroller' => 'AppBundle\\Controller\\ContratoAgenciaController',
            'appbundle\\controller\\defaultcontroller' => 'AppBundle\\Controller\\DefaultController',
            'fos\\restbundle\\request\\paramfetcherinterface' => 'FOS\\RestBundle\\Request\\ParamFetcherInterface',
            'fos\\restbundle\\view\\viewhandlerinterface' => 'FOS\\RestBundle\\View\\ViewHandlerInterface',
            'knp\\bundle\\markdownbundle\\markdownparserinterface' => 'Knp\\Bundle\\MarkdownBundle\\MarkdownParserInterface',
            'knp\\component\\pager\\paginatorinterface' => 'Knp\\Component\\Pager\\PaginatorInterface',
            'lexik\\bundle\\jwtauthenticationbundle\\encoder\\jwtencoderinterface' => 'Lexik\\Bundle\\JWTAuthenticationBundle\\Encoder\\JWTEncoderInterface',
            'lexik\\bundle\\jwtauthenticationbundle\\security\\http\\authentication\\authenticationfailurehandler' => 'Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Http\\Authentication\\AuthenticationFailureHandler',
            'lexik\\bundle\\jwtauthenticationbundle\\security\\http\\authentication\\authenticationsuccesshandler' => 'Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Http\\Authentication\\AuthenticationSuccessHandler',
            'lexik\\bundle\\jwtauthenticationbundle\\services\\jwsprovider\\jwsproviderinterface' => 'Lexik\\Bundle\\JWTAuthenticationBundle\\Services\\JWSProvider\\JWSProviderInterface',
            'lexik\\bundle\\jwtauthenticationbundle\\services\\jwttokeninterface' => 'Lexik\\Bundle\\JWTAuthenticationBundle\\Services\\JWTTokenInterface',
            'lexik\\bundle\\jwtauthenticationbundle\\services\\jwttokenmanagerinterface' => 'Lexik\\Bundle\\JWTAuthenticationBundle\\Services\\JWTTokenManagerInterface',
            'lexik\\bundle\\jwtauthenticationbundle\\tokenextractor\\tokenextractorinterface' => 'Lexik\\Bundle\\JWTAuthenticationBundle\\TokenExtractor\\TokenExtractorInterface',
            'michelf\\markdowninterface' => 'Michelf\\MarkdownInterface',
            'sonata\\adminbundle\\admin\\pool' => 'Sonata\\AdminBundle\\Admin\\Pool',
            'sonata\\adminbundle\\command\\createclasscachecommand' => 'Sonata\\AdminBundle\\Command\\CreateClassCacheCommand',
            'sonata\\adminbundle\\command\\explainadmincommand' => 'Sonata\\AdminBundle\\Command\\ExplainAdminCommand',
            'sonata\\adminbundle\\command\\generateadmincommand' => 'Sonata\\AdminBundle\\Command\\GenerateAdminCommand',
            'sonata\\adminbundle\\command\\generateobjectaclcommand' => 'Sonata\\AdminBundle\\Command\\GenerateObjectAclCommand',
            'sonata\\adminbundle\\command\\listadmincommand' => 'Sonata\\AdminBundle\\Command\\ListAdminCommand',
            'sonata\\adminbundle\\command\\setupaclcommand' => 'Sonata\\AdminBundle\\Command\\SetupAclCommand',
            'sonata\\blockbundle\\command\\debugblockscommand' => 'Sonata\\BlockBundle\\Command\\DebugBlocksCommand',
            'sonata\\corebundle\\command\\sonatadumpdoctrinemetacommand' => 'Sonata\\CoreBundle\\Command\\SonataDumpDoctrineMetaCommand',
            'sonata\\corebundle\\command\\sonatalistformmappingcommand' => 'Sonata\\CoreBundle\\Command\\SonataListFormMappingCommand',
            'sonata\\easyextendsbundle\\command\\dumpmappingcommand' => 'Sonata\\EasyExtendsBundle\\Command\\DumpMappingCommand',
            'sonata\\easyextendsbundle\\command\\generatecommand' => 'Sonata\\EasyExtendsBundle\\Command\\GenerateCommand',
            'sonata\\mediabundle\\command\\addmassmediacommand' => 'Sonata\\MediaBundle\\Command\\AddMassMediaCommand',
            'sonata\\mediabundle\\command\\addmediacommand' => 'Sonata\\MediaBundle\\Command\\AddMediaCommand',
            'sonata\\mediabundle\\command\\cleanmediacommand' => 'Sonata\\MediaBundle\\Command\\CleanMediaCommand',
            'sonata\\mediabundle\\command\\fixmediacontextcommand' => 'Sonata\\MediaBundle\\Command\\FixMediaContextCommand',
            'sonata\\mediabundle\\command\\migratetojsontypecommand' => 'Sonata\\MediaBundle\\Command\\MigrateToJsonTypeCommand',
            'sonata\\mediabundle\\command\\refreshmetadatacommand' => 'Sonata\\MediaBundle\\Command\\RefreshMetadataCommand',
            'sonata\\mediabundle\\command\\removethumbscommand' => 'Sonata\\MediaBundle\\Command\\RemoveThumbsCommand',
            'sonata\\mediabundle\\command\\syncthumbscommand' => 'Sonata\\MediaBundle\\Command\\SyncThumbsCommand',
            'sonata\\mediabundle\\command\\updatecdnstatuscommand' => 'Sonata\\MediaBundle\\Command\\UpdateCdnStatusCommand',
        );
        $this->methodMap = array(
            '1_c96ae0422b1c97f376c0bdbe6aae9aae67afb2b1a5eb7f331b0f8109dcf05b7f' => 'get1C96ae0422b1c97f376c0bdbe6aae9aae67afb2b1a5eb7f331b0f8109dcf05b7fService',
            '2_c96ae0422b1c97f376c0bdbe6aae9aae67afb2b1a5eb7f331b0f8109dcf05b7f' => 'get2C96ae0422b1c97f376c0bdbe6aae9aae67afb2b1a5eb7f331b0f8109dcf05b7fService',
            'AppBundle\\Controller\\Api\\SecurityApiController' => 'getAppBundle_Controller_Api_SecurityApiControllerService',
            'AppBundle\\Controller\\ContratoAgenciaController' => 'getAppBundle_Controller_ContratoAgenciaControllerService',
            'AppBundle\\Controller\\DefaultController' => 'getAppBundle_Controller_DefaultControllerService',
            'FOS\\RestBundle\\View\\ViewHandlerInterface' => 'getFOS_RestBundle_View_ViewHandlerInterfaceService',
            'Lexik\\Bundle\\JWTAuthenticationBundle\\Services\\JWSProvider\\JWSProviderInterface' => 'getLexik_Bundle_JWTAuthenticationBundle_Services_JWSProvider_JWSProviderInterfaceService',
            'Lexik\\Bundle\\JWTAuthenticationBundle\\TokenExtractor\\TokenExtractorInterface' => 'getLexik_Bundle_JWTAuthenticationBundle_TokenExtractor_TokenExtractorInterfaceService',
            'Sonata\\AdminBundle\\Command\\CreateClassCacheCommand' => 'getSonata_AdminBundle_Command_CreateClassCacheCommandService',
            'Sonata\\AdminBundle\\Command\\ExplainAdminCommand' => 'getSonata_AdminBundle_Command_ExplainAdminCommandService',
            'Sonata\\AdminBundle\\Command\\GenerateAdminCommand' => 'getSonata_AdminBundle_Command_GenerateAdminCommandService',
            'Sonata\\AdminBundle\\Command\\GenerateObjectAclCommand' => 'getSonata_AdminBundle_Command_GenerateObjectAclCommandService',
            'Sonata\\AdminBundle\\Command\\ListAdminCommand' => 'getSonata_AdminBundle_Command_ListAdminCommandService',
            'Sonata\\AdminBundle\\Command\\SetupAclCommand' => 'getSonata_AdminBundle_Command_SetupAclCommandService',
            'Sonata\\BlockBundle\\Command\\DebugBlocksCommand' => 'getSonata_BlockBundle_Command_DebugBlocksCommandService',
            'Sonata\\CoreBundle\\Command\\SonataDumpDoctrineMetaCommand' => 'getSonata_CoreBundle_Command_SonataDumpDoctrineMetaCommandService',
            'Sonata\\CoreBundle\\Command\\SonataListFormMappingCommand' => 'getSonata_CoreBundle_Command_SonataListFormMappingCommandService',
            'Sonata\\EasyExtendsBundle\\Command\\DumpMappingCommand' => 'getSonata_EasyExtendsBundle_Command_DumpMappingCommandService',
            'Sonata\\EasyExtendsBundle\\Command\\GenerateCommand' => 'getSonata_EasyExtendsBundle_Command_GenerateCommandService',
            'Sonata\\MediaBundle\\Command\\AddMassMediaCommand' => 'getSonata_MediaBundle_Command_AddMassMediaCommandService',
            'Sonata\\MediaBundle\\Command\\AddMediaCommand' => 'getSonata_MediaBundle_Command_AddMediaCommandService',
            'Sonata\\MediaBundle\\Command\\CleanMediaCommand' => 'getSonata_MediaBundle_Command_CleanMediaCommandService',
            'Sonata\\MediaBundle\\Command\\FixMediaContextCommand' => 'getSonata_MediaBundle_Command_FixMediaContextCommandService',
            'Sonata\\MediaBundle\\Command\\MigrateToJsonTypeCommand' => 'getSonata_MediaBundle_Command_MigrateToJsonTypeCommandService',
            'Sonata\\MediaBundle\\Command\\RefreshMetadataCommand' => 'getSonata_MediaBundle_Command_RefreshMetadataCommandService',
            'Sonata\\MediaBundle\\Command\\RemoveThumbsCommand' => 'getSonata_MediaBundle_Command_RemoveThumbsCommandService',
            'Sonata\\MediaBundle\\Command\\SyncThumbsCommand' => 'getSonata_MediaBundle_Command_SyncThumbsCommandService',
            'Sonata\\MediaBundle\\Command\\UpdateCdnStatusCommand' => 'getSonata_MediaBundle_Command_UpdateCdnStatusCommandService',
            'annotation_reader' => 'getAnnotationReaderService',
            'annotations.cache' => 'getAnnotations_CacheService',
            'annotations.reader' => 'getAnnotations_ReaderService',
            'app.admin.anexo1.contrato.areas.internet' => 'getApp_Admin_Anexo1_Contrato_Areas_InternetService',
            'app.admin.anexo1.contrato.areas.internet.template_registry' => 'getApp_Admin_Anexo1_Contrato_Areas_Internet_TemplateRegistryService',
            'app.admin.anexo1.contrato.arrendamiento.espacios' => 'getApp_Admin_Anexo1_Contrato_Arrendamiento_EspaciosService',
            'app.admin.anexo1.contrato.arrendamiento.espacios.template_registry' => 'getApp_Admin_Anexo1_Contrato_Arrendamiento_Espacios_TemplateRegistryService',
            'app.admin.anexo1.contrato.arrendamiento.pizarras.privadas.pbx' => 'getApp_Admin_Anexo1_Contrato_Arrendamiento_Pizarras_Privadas_PbxService',
            'app.admin.anexo1.contrato.arrendamiento.pizarras.privadas.pbx.template_registry' => 'getApp_Admin_Anexo1_Contrato_Arrendamiento_Pizarras_Privadas_Pbx_TemplateRegistryService',
            'app.admin.anexo1.contrato.arrendamiento.redes' => 'getApp_Admin_Anexo1_Contrato_Arrendamiento_RedesService',
            'app.admin.anexo1.contrato.arrendamiento.redes.template_registry' => 'getApp_Admin_Anexo1_Contrato_Arrendamiento_Redes_TemplateRegistryService',
            'app.admin.anexo1.contrato.compra.venta' => 'getApp_Admin_Anexo1_Contrato_Compra_VentaService',
            'app.admin.anexo1.contrato.compra.venta.pizarra' => 'getApp_Admin_Anexo1_Contrato_Compra_Venta_PizarraService',
            'app.admin.anexo1.contrato.compra.venta.pizarra.template_registry' => 'getApp_Admin_Anexo1_Contrato_Compra_Venta_Pizarra_TemplateRegistryService',
            'app.admin.anexo1.contrato.compra.venta.template_registry' => 'getApp_Admin_Anexo1_Contrato_Compra_Venta_TemplateRegistryService',
            'app.admin.anexo1.contrato.contactos.telefonicos' => 'getApp_Admin_Anexo1_Contrato_Contactos_TelefonicosService',
            'app.admin.anexo1.contrato.contactos.telefonicos.template_registry' => 'getApp_Admin_Anexo1_Contrato_Contactos_Telefonicos_TemplateRegistryService',
            'app.admin.anexo1.contrato.mantenimiento.pizarra.pbx' => 'getApp_Admin_Anexo1_Contrato_Mantenimiento_Pizarra_PbxService',
            'app.admin.anexo1.contrato.mantenimiento.pizarra.pbx.template_registry' => 'getApp_Admin_Anexo1_Contrato_Mantenimiento_Pizarra_Pbx_TemplateRegistryService',
            'app.admin.anexo2.contrato.areas.internet' => 'getApp_Admin_Anexo2_Contrato_Areas_InternetService',
            'app.admin.anexo2.contrato.areas.internet.template_registry' => 'getApp_Admin_Anexo2_Contrato_Areas_Internet_TemplateRegistryService',
            'app.admin.anexo2.contrato.arrendamiento.redes' => 'getApp_Admin_Anexo2_Contrato_Arrendamiento_RedesService',
            'app.admin.anexo2.contrato.arrendamiento.redes.template_registry' => 'getApp_Admin_Anexo2_Contrato_Arrendamiento_Redes_TemplateRegistryService',
            'app.admin.anexo2.contrato.instalacion.pizarra.pbx' => 'getApp_Admin_Anexo2_Contrato_Instalacion_Pizarra_PbxService',
            'app.admin.anexo2.contrato.instalacion.pizarra.pbx.template_registry' => 'getApp_Admin_Anexo2_Contrato_Instalacion_Pizarra_Pbx_TemplateRegistryService',
            'app.admin.anexo2.contrato.recarga.por.pos' => 'getApp_Admin_Anexo2_Contrato_Recarga_Por_PosService',
            'app.admin.anexo2.contrato.recarga.por.pos.template_registry' => 'getApp_Admin_Anexo2_Contrato_Recarga_Por_Pos_TemplateRegistryService',
            'app.admin.anexo4.arrendamiento.espacios' => 'getApp_Admin_Anexo4_Arrendamiento_EspaciosService',
            'app.admin.anexo4.arrendamiento.espacios.template_registry' => 'getApp_Admin_Anexo4_Arrendamiento_Espacios_TemplateRegistryService',
            'app.admin.anexo4.contrato.agencia' => 'getApp_Admin_Anexo4_Contrato_AgenciaService',
            'app.admin.anexo4.contrato.agencia.template_registry' => 'getApp_Admin_Anexo4_Contrato_Agencia_TemplateRegistryService',
            'app.admin.anexo4.contrato.compra.venta' => 'getApp_Admin_Anexo4_Contrato_Compra_VentaService',
            'app.admin.anexo4.contrato.compra.venta.template_registry' => 'getApp_Admin_Anexo4_Contrato_Compra_Venta_TemplateRegistryService',
            'app.admin.anexo4.contrato.recarga.por.pos' => 'getApp_Admin_Anexo4_Contrato_Recarga_Por_PosService',
            'app.admin.anexo4.contrato.recarga.por.pos.template_registry' => 'getApp_Admin_Anexo4_Contrato_Recarga_Por_Pos_TemplateRegistryService',
            'app.admin.anexo5.arrendaminto.espacios' => 'getApp_Admin_Anexo5_Arrendaminto_EspaciosService',
            'app.admin.anexo5.arrendaminto.espacios.template_registry' => 'getApp_Admin_Anexo5_Arrendaminto_Espacios_TemplateRegistryService',
            'app.admin.anexo5.contrato.agencia' => 'getApp_Admin_Anexo5_Contrato_AgenciaService',
            'app.admin.anexo5.contrato.agencia.template_registry' => 'getApp_Admin_Anexo5_Contrato_Agencia_TemplateRegistryService',
            'app.admin.anexo5.contrato.areas.internet' => 'getApp_Admin_Anexo5_Contrato_Areas_InternetService',
            'app.admin.anexo5.contrato.areas.internet.template_registry' => 'getApp_Admin_Anexo5_Contrato_Areas_Internet_TemplateRegistryService',
            'app.admin.anexocps.conexion.centrales.telefonicas' => 'getApp_Admin_Anexocps_Conexion_Centrales_TelefonicasService',
            'app.admin.anexocps.conexion.centrales.telefonicas.template_registry' => 'getApp_Admin_Anexocps_Conexion_Centrales_Telefonicas_TemplateRegistryService',
            'app.admin.anexocps.levantamiento.redes.tecnicas' => 'getApp_Admin_Anexocps_Levantamiento_Redes_TecnicasService',
            'app.admin.anexocps.levantamiento.redes.tecnicas.template_registry' => 'getApp_Admin_Anexocps_Levantamiento_Redes_Tecnicas_TemplateRegistryService',
            'app.admin.anexocps.servicios.terceros' => 'getApp_Admin_Anexocps_Servicios_TercerosService',
            'app.admin.anexocps.servicios.terceros.template_registry' => 'getApp_Admin_Anexocps_Servicios_Terceros_TemplateRegistryService',
            'app.admin.contrato.agencia.persona.juridica' => 'getApp_Admin_Contrato_Agencia_Persona_JuridicaService',
            'app.admin.contrato.agencia.persona.juridica.template_registry' => 'getApp_Admin_Contrato_Agencia_Persona_Juridica_TemplateRegistryService',
            'app.admin.contrato.areas.internet' => 'getApp_Admin_Contrato_Areas_InternetService',
            'app.admin.contrato.areas.internet.template_registry' => 'getApp_Admin_Contrato_Areas_Internet_TemplateRegistryService',
            'app.admin.contrato.arrendamiento.espacios' => 'getApp_Admin_Contrato_Arrendamiento_EspaciosService',
            'app.admin.contrato.arrendamiento.espacios.template_registry' => 'getApp_Admin_Contrato_Arrendamiento_Espacios_TemplateRegistryService',
            'app.admin.contrato.arrendamiento.pizarra.privada.pbx' => 'getApp_Admin_Contrato_Arrendamiento_Pizarra_Privada_PbxService',
            'app.admin.contrato.arrendamiento.pizarra.privada.pbx.template_registry' => 'getApp_Admin_Contrato_Arrendamiento_Pizarra_Privada_Pbx_TemplateRegistryService',
            'app.admin.contrato.arrendamiento.redes' => 'getApp_Admin_Contrato_Arrendamiento_RedesService',
            'app.admin.contrato.arrendamiento.redes.template_registry' => 'getApp_Admin_Contrato_Arrendamiento_Redes_TemplateRegistryService',
            'app.admin.contrato.comp.vent.pizarra' => 'getApp_Admin_Contrato_Comp_Vent_PizarraService',
            'app.admin.contrato.comp.vent.pizarra.template_registry' => 'getApp_Admin_Contrato_Comp_Vent_Pizarra_TemplateRegistryService',
            'app.admin.contrato.compra.venta' => 'getApp_Admin_Contrato_Compra_VentaService',
            'app.admin.contrato.compra.venta.template_registry' => 'getApp_Admin_Contrato_Compra_Venta_TemplateRegistryService',
            'app.admin.contrato.contactos.telefonicos' => 'getApp_Admin_Contrato_Contactos_TelefonicosService',
            'app.admin.contrato.contactos.telefonicos.template_registry' => 'getApp_Admin_Contrato_Contactos_Telefonicos_TemplateRegistryService',
            'app.admin.contrato.instalacion.pizarra.pbx' => 'getApp_Admin_Contrato_Instalacion_Pizarra_PbxService',
            'app.admin.contrato.instalacion.pizarra.pbx.template_registry' => 'getApp_Admin_Contrato_Instalacion_Pizarra_Pbx_TemplateRegistryService',
            'app.admin.contrato.mantenimiento.pizarra.pbx' => 'getApp_Admin_Contrato_Mantenimiento_Pizarra_PbxService',
            'app.admin.contrato.mantenimiento.pizarra.pbx.template_registry' => 'getApp_Admin_Contrato_Mantenimiento_Pizarra_Pbx_TemplateRegistryService',
            'app.admin.contrato.prestacion.servicios' => 'getApp_Admin_Contrato_Prestacion_ServiciosService',
            'app.admin.contrato.prestacion.servicios.template_registry' => 'getApp_Admin_Contrato_Prestacion_Servicios_TemplateRegistryService',
            'app.admin.contrato.recarga.por.pos' => 'getApp_Admin_Contrato_Recarga_Por_PosService',
            'app.admin.contrato.recarga.por.pos.template_registry' => 'getApp_Admin_Contrato_Recarga_Por_Pos_TemplateRegistryService',
            'app.admin.datos.cuentas.bancarias.etecsa' => 'getApp_Admin_Datos_Cuentas_Bancarias_EtecsaService',
            'app.admin.datos.cuentas.bancarias.etecsa.template_registry' => 'getApp_Admin_Datos_Cuentas_Bancarias_Etecsa_TemplateRegistryService',
            'app.admin.descripcion.productos.contratados' => 'getApp_Admin_Descripcion_Productos_ContratadosService',
            'app.admin.descripcion.productos.contratados.template_registry' => 'getApp_Admin_Descripcion_Productos_Contratados_TemplateRegistryService',
            'app.admin.descripcion.productos.servicios' => 'getApp_Admin_Descripcion_Productos_ServiciosService',
            'app.admin.descripcion.productos.servicios.template_registry' => 'getApp_Admin_Descripcion_Productos_Servicios_TemplateRegistryService',
            'app.admin.empresa' => 'getApp_Admin_EmpresaService',
            'app.admin.empresa.template_registry' => 'getApp_Admin_Empresa_TemplateRegistryService',
            'app.admin.equipamiento.gsm.pos' => 'getApp_Admin_Equipamiento_Gsm_PosService',
            'app.admin.equipamiento.gsm.pos.template_registry' => 'getApp_Admin_Equipamiento_Gsm_Pos_TemplateRegistryService',
            'app.admin.facilidades.del.equipo' => 'getApp_Admin_Facilidades_Del_EquipoService',
            'app.admin.facilidades.del.equipo.template_registry' => 'getApp_Admin_Facilidades_Del_Equipo_TemplateRegistryService',
            'app.admin.grupos.electrogenos' => 'getApp_Admin_Grupos_ElectrogenosService',
            'app.admin.grupos.electrogenos.template_registry' => 'getApp_Admin_Grupos_Electrogenos_TemplateRegistryService',
            'app.admin.locales' => 'getApp_Admin_LocalesService',
            'app.admin.locales.template_registry' => 'getApp_Admin_Locales_TemplateRegistryService',
            'app.admin.mantenimiento.correctivo' => 'getApp_Admin_Mantenimiento_CorrectivoService',
            'app.admin.mantenimiento.correctivo.template_registry' => 'getApp_Admin_Mantenimiento_Correctivo_TemplateRegistryService',
            'app.admin.mantenimiento.preventivo' => 'getApp_Admin_Mantenimiento_PreventivoService',
            'app.admin.mantenimiento.preventivo.template_registry' => 'getApp_Admin_Mantenimiento_Preventivo_TemplateRegistryService',
            'app.admin.organismos' => 'getApp_Admin_OrganismosService',
            'app.admin.organismos.template_registry' => 'getApp_Admin_Organismos_TemplateRegistryService',
            'app.admin.personas' => 'getApp_Admin_PersonasService',
            'app.admin.personas.template_registry' => 'getApp_Admin_Personas_TemplateRegistryService',
            'app.admin.pizarra.pbx' => 'getApp_Admin_Pizarra_PbxService',
            'app.admin.pizarra.pbx.template_registry' => 'getApp_Admin_Pizarra_Pbx_TemplateRegistryService',
            'app.admin.protecciones.tierra' => 'getApp_Admin_Protecciones_TierraService',
            'app.admin.protecciones.tierra.template_registry' => 'getApp_Admin_Protecciones_Tierra_TemplateRegistryService',
            'app.admin.relacion.antenas.a4' => 'getApp_Admin_Relacion_Antenas_A4Service',
            'app.admin.relacion.antenas.a4.template_registry' => 'getApp_Admin_Relacion_Antenas_A4_TemplateRegistryService',
            'app.admin.relacion.bastidores' => 'getApp_Admin_Relacion_BastidoresService',
            'app.admin.relacion.bastidores.template_registry' => 'getApp_Admin_Relacion_Bastidores_TemplateRegistryService',
            'app.admin.relacion.equipos' => 'getApp_Admin_Relacion_EquiposService',
            'app.admin.relacion.equipos.template_registry' => 'getApp_Admin_Relacion_Equipos_TemplateRegistryService',
            'app.admin.relacion.iluminacion.tomacorriente' => 'getApp_Admin_Relacion_Iluminacion_TomacorrienteService',
            'app.admin.relacion.iluminacion.tomacorriente.template_registry' => 'getApp_Admin_Relacion_Iluminacion_Tomacorriente_TemplateRegistryService',
            'app.admin.relacion.mastiles.a4' => 'getApp_Admin_Relacion_Mastiles_A4Service',
            'app.admin.relacion.mastiles.a4.template_registry' => 'getApp_Admin_Relacion_Mastiles_A4_TemplateRegistryService',
            'app.admin.relacion.terminaciones.bastidor' => 'getApp_Admin_Relacion_Terminaciones_BastidorService',
            'app.admin.relacion.terminaciones.bastidor.template_registry' => 'getApp_Admin_Relacion_Terminaciones_Bastidor_TemplateRegistryService',
            'app.admin.relacion.torres.a4' => 'getApp_Admin_Relacion_Torres_A4Service',
            'app.admin.relacion.torres.a4.template_registry' => 'getApp_Admin_Relacion_Torres_A4_TemplateRegistryService',
            'app.admin.relacion.vias' => 'getApp_Admin_Relacion_ViasService',
            'app.admin.relacion.vias.template_registry' => 'getApp_Admin_Relacion_Vias_TemplateRegistryService',
            'app.admin.sistema.corriente.directa' => 'getApp_Admin_Sistema_Corriente_DirectaService',
            'app.admin.sistema.corriente.directa.template_registry' => 'getApp_Admin_Sistema_Corriente_Directa_TemplateRegistryService',
            'app.admin.sistema.iluminacion.a5' => 'getApp_Admin_Sistema_Iluminacion_A5Service',
            'app.admin.sistema.iluminacion.a5.template_registry' => 'getApp_Admin_Sistema_Iluminacion_A5_TemplateRegistryService',
            'app.admin.sistemas.corriente.alterna' => 'getApp_Admin_Sistemas_Corriente_AlternaService',
            'app.admin.sistemas.corriente.alterna.template_registry' => 'getApp_Admin_Sistemas_Corriente_Alterna_TemplateRegistryService',
            'app.admin.tarifas.conexion.pizarras' => 'getApp_Admin_Tarifas_Conexion_PizarrasService',
            'app.admin.tarifas.conexion.pizarras.template_registry' => 'getApp_Admin_Tarifas_Conexion_Pizarras_TemplateRegistryService',
            'app.admin.tarifas.espacios.arrendados' => 'getApp_Admin_Tarifas_Espacios_ArrendadosService',
            'app.admin.tarifas.espacios.arrendados.template_registry' => 'getApp_Admin_Tarifas_Espacios_Arrendados_TemplateRegistryService',
            'app.admin.tarjetas.sim' => 'getApp_Admin_Tarjetas_SimService',
            'app.admin.tarjetas.sim.template_registry' => 'getApp_Admin_Tarjetas_Sim_TemplateRegistryService',
            'app.admin.terminaciones' => 'getApp_Admin_TerminacionesService',
            'app.admin.terminaciones.template_registry' => 'getApp_Admin_Terminaciones_TemplateRegistryService',
            'app.admin.tipos.de.mantenimientos' => 'getApp_Admin_Tipos_De_MantenimientosService',
            'app.admin.tipos.de.mantenimientos.template_registry' => 'getApp_Admin_Tipos_De_Mantenimientos_TemplateRegistryService',
            'app.admin.tipos.distancias.arrendadas' => 'getApp_Admin_Tipos_Distancias_ArrendadasService',
            'app.admin.tipos.distancias.arrendadas.template_registry' => 'getApp_Admin_Tipos_Distancias_Arrendadas_TemplateRegistryService',
            'app.admin.tipos.mantenimientos.correctivos' => 'getApp_Admin_Tipos_Mantenimientos_CorrectivosService',
            'app.admin.tipos.mantenimientos.correctivos.template_registry' => 'getApp_Admin_Tipos_Mantenimientos_Correctivos_TemplateRegistryService',
            'app.admin.tomacorrientes' => 'getApp_Admin_TomacorrientesService',
            'app.admin.tomacorrientes.template_registry' => 'getApp_Admin_Tomacorrientes_TemplateRegistryService',
            'application_sonata_user.profile.authentication.form.type' => 'getApplicationSonataUser_Profile_Authentication_Form_TypeService',
            'application_user.locale_listener' => 'getApplicationUser_LocaleListenerService',
            'application_user.profile.form.type' => 'getApplicationUser_Profile_Form_TypeService',
            'application_user.registration.form.type' => 'getApplicationUser_Registration_Form_TypeService',
            'application_user.user_locale_listener' => 'getApplicationUser_UserLocaleListenerService',
            'argument_resolver.default' => 'getArgumentResolver_DefaultService',
            'argument_resolver.request' => 'getArgumentResolver_RequestService',
            'argument_resolver.request_attribute' => 'getArgumentResolver_RequestAttributeService',
            'argument_resolver.service' => 'getArgumentResolver_ServiceService',
            'argument_resolver.session' => 'getArgumentResolver_SessionService',
            'argument_resolver.variadic' => 'getArgumentResolver_VariadicService',
            'assets.context' => 'getAssets_ContextService',
            'assets.packages' => 'getAssets_PackagesService',
            'bazinga_hateoas.expression_language' => 'getBazingaHateoas_ExpressionLanguageService',
            'cache.annotations' => 'getCache_AnnotationsService',
            'cache.annotations.recorder_inner' => 'getCache_Annotations_RecorderInnerService',
            'cache.app' => 'getCache_AppService',
            'cache.app.recorder_inner' => 'getCache_App_RecorderInnerService',
            'cache.default_clearer' => 'getCache_DefaultClearerService',
            'cache.global_clearer' => 'getCache_GlobalClearerService',
            'cache.serializer.recorder_inner' => 'getCache_Serializer_RecorderInnerService',
            'cache.system' => 'getCache_SystemService',
            'cache.system.recorder_inner' => 'getCache_System_RecorderInnerService',
            'cache.validator' => 'getCache_ValidatorService',
            'cache.validator.recorder_inner' => 'getCache_Validator_RecorderInnerService',
            'cache_clearer' => 'getCacheClearerService',
            'cache_warmer' => 'getCacheWarmerService',
            'captcha.type' => 'getCaptcha_TypeService',
            'config_cache_factory' => 'getConfigCacheFactoryService',
            'console.command.symfony_bundle_securitybundle_command_userpasswordencodercommand' => 'getConsole_Command_SymfonyBundleSecuritybundleCommandUserpasswordencodercommandService',
            'console.command.symfony_bundle_webserverbundle_command_serverruncommand' => 'getConsole_Command_SymfonyBundleWebserverbundleCommandServerruncommandService',
            'console.command.symfony_bundle_webserverbundle_command_serverstartcommand' => 'getConsole_Command_SymfonyBundleWebserverbundleCommandServerstartcommandService',
            'console.command.symfony_bundle_webserverbundle_command_serverstatuscommand' => 'getConsole_Command_SymfonyBundleWebserverbundleCommandServerstatuscommandService',
            'console.command.symfony_bundle_webserverbundle_command_serverstopcommand' => 'getConsole_Command_SymfonyBundleWebserverbundleCommandServerstopcommandService',
            'console.error_listener' => 'getConsole_ErrorListenerService',
            'controller_name_converter' => 'getControllerNameConverterService',
            'data_collector.dump' => 'getDataCollector_DumpService',
            'data_collector.form' => 'getDataCollector_FormService',
            'data_collector.form.extractor' => 'getDataCollector_Form_ExtractorService',
            'data_collector.request' => 'getDataCollector_RequestService',
            'data_collector.router' => 'getDataCollector_RouterService',
            'data_collector.translation' => 'getDataCollector_TranslationService',
            'data_dog_audit.admin.audit_log' => 'getDataDogAudit_Admin_AuditLogService',
            'data_dog_audit.admin.audit_log.template_registry' => 'getDataDogAudit_Admin_AuditLog_TemplateRegistryService',
            'datadog.event_subscriber.audit' => 'getDatadog_EventSubscriber_AuditService',
            'debug.argument_resolver' => 'getDebug_ArgumentResolverService',
            'debug.controller_resolver' => 'getDebug_ControllerResolverService',
            'debug.debug_handlers_listener' => 'getDebug_DebugHandlersListenerService',
            'debug.dump_listener' => 'getDebug_DumpListenerService',
            'debug.event_dispatcher' => 'getDebug_EventDispatcherService',
            'debug.file_link_formatter' => 'getDebug_FileLinkFormatterService',
            'debug.log_processor' => 'getDebug_LogProcessorService',
            'debug.stopwatch' => 'getDebug_StopwatchService',
            'deprecated.form.registry' => 'getDeprecated_Form_RegistryService',
            'deprecated.form.registry.csrf' => 'getDeprecated_Form_Registry_CsrfService',
            'doctrine' => 'getDoctrineService',
            'doctrine.cache_clear_metadata_command' => 'getDoctrine_CacheClearMetadataCommandService',
            'doctrine.cache_clear_query_cache_command' => 'getDoctrine_CacheClearQueryCacheCommandService',
            'doctrine.cache_clear_result_command' => 'getDoctrine_CacheClearResultCommandService',
            'doctrine.cache_collection_region_command' => 'getDoctrine_CacheCollectionRegionCommandService',
            'doctrine.clear_entity_region_command' => 'getDoctrine_ClearEntityRegionCommandService',
            'doctrine.clear_query_region_command' => 'getDoctrine_ClearQueryRegionCommandService',
            'doctrine.database_create_command' => 'getDoctrine_DatabaseCreateCommandService',
            'doctrine.database_drop_command' => 'getDoctrine_DatabaseDropCommandService',
            'doctrine.database_import_command' => 'getDoctrine_DatabaseImportCommandService',
            'doctrine.dbal.connection_factory' => 'getDoctrine_Dbal_ConnectionFactoryService',
            'doctrine.dbal.default_connection' => 'getDoctrine_Dbal_DefaultConnectionService',
            'doctrine.dbal.logger.profiling.default' => 'getDoctrine_Dbal_Logger_Profiling_DefaultService',
            'doctrine.ensure_production_settings_command' => 'getDoctrine_EnsureProductionSettingsCommandService',
            'doctrine.generate_entities_command' => 'getDoctrine_GenerateEntitiesCommandService',
            'doctrine.mapping_convert_command' => 'getDoctrine_MappingConvertCommandService',
            'doctrine.mapping_import_command' => 'getDoctrine_MappingImportCommandService',
            'doctrine.mapping_info_command' => 'getDoctrine_MappingInfoCommandService',
            'doctrine.orm.default_entity_listener_resolver' => 'getDoctrine_Orm_DefaultEntityListenerResolverService',
            'doctrine.orm.default_entity_manager' => 'getDoctrine_Orm_DefaultEntityManagerService',
            'doctrine.orm.default_entity_manager.property_info_extractor' => 'getDoctrine_Orm_DefaultEntityManager_PropertyInfoExtractorService',
            'doctrine.orm.default_listeners.attach_entity_listeners' => 'getDoctrine_Orm_DefaultListeners_AttachEntityListenersService',
            'doctrine.orm.default_manager_configurator' => 'getDoctrine_Orm_DefaultManagerConfiguratorService',
            'doctrine.orm.validator.unique' => 'getDoctrine_Orm_Validator_UniqueService',
            'doctrine.orm.validator_initializer' => 'getDoctrine_Orm_ValidatorInitializerService',
            'doctrine.query_dql_command' => 'getDoctrine_QueryDqlCommandService',
            'doctrine.query_sql_command' => 'getDoctrine_QuerySqlCommandService',
            'doctrine.schema_create_command' => 'getDoctrine_SchemaCreateCommandService',
            'doctrine.schema_drop_command' => 'getDoctrine_SchemaDropCommandService',
            'doctrine.schema_update_command' => 'getDoctrine_SchemaUpdateCommandService',
            'doctrine.schema_validate_command' => 'getDoctrine_SchemaValidateCommandService',
            'doctrine_cache.contains_command' => 'getDoctrineCache_ContainsCommandService',
            'doctrine_cache.delete_command' => 'getDoctrineCache_DeleteCommandService',
            'doctrine_cache.flush_command' => 'getDoctrineCache_FlushCommandService',
            'doctrine_cache.providers.doctrine.orm.default_metadata_cache' => 'getDoctrineCache_Providers_Doctrine_Orm_DefaultMetadataCacheService',
            'doctrine_cache.providers.doctrine.orm.default_query_cache' => 'getDoctrineCache_Providers_Doctrine_Orm_DefaultQueryCacheService',
            'doctrine_cache.providers.doctrine.orm.default_result_cache' => 'getDoctrineCache_Providers_Doctrine_Orm_DefaultResultCacheService',
            'doctrine_cache.stats_command' => 'getDoctrineCache_StatsCommandService',
            'doctrine_migrations.diff_command' => 'getDoctrineMigrations_DiffCommandService',
            'doctrine_migrations.execute_command' => 'getDoctrineMigrations_ExecuteCommandService',
            'doctrine_migrations.generate_command' => 'getDoctrineMigrations_GenerateCommandService',
            'doctrine_migrations.latest_command' => 'getDoctrineMigrations_LatestCommandService',
            'doctrine_migrations.migrate_command' => 'getDoctrineMigrations_MigrateCommandService',
            'doctrine_migrations.status_command' => 'getDoctrineMigrations_StatusCommandService',
            'doctrine_migrations.version_command' => 'getDoctrineMigrations_VersionCommandService',
            'file_locator' => 'getFileLocatorService',
            'filesystem' => 'getFilesystemService',
            'form.extension' => 'getForm_ExtensionService',
            'form.factory' => 'getForm_FactoryService',
            'form.registry' => 'getForm_RegistryService',
            'form.resolved_type_factory' => 'getForm_ResolvedTypeFactoryService',
            'form.server_params' => 'getForm_ServerParamsService',
            'form.type.birthday' => 'getForm_Type_BirthdayService',
            'form.type.button' => 'getForm_Type_ButtonService',
            'form.type.checkbox' => 'getForm_Type_CheckboxService',
            'form.type.choice' => 'getForm_Type_ChoiceService',
            'form.type.collection' => 'getForm_Type_CollectionService',
            'form.type.country' => 'getForm_Type_CountryService',
            'form.type.currency' => 'getForm_Type_CurrencyService',
            'form.type.date' => 'getForm_Type_DateService',
            'form.type.datetime' => 'getForm_Type_DatetimeService',
            'form.type.email' => 'getForm_Type_EmailService',
            'form.type.entity' => 'getForm_Type_EntityService',
            'form.type.file' => 'getForm_Type_FileService',
            'form.type.form' => 'getForm_Type_FormService',
            'form.type.hidden' => 'getForm_Type_HiddenService',
            'form.type.integer' => 'getForm_Type_IntegerService',
            'form.type.language' => 'getForm_Type_LanguageService',
            'form.type.locale' => 'getForm_Type_LocaleService',
            'form.type.money' => 'getForm_Type_MoneyService',
            'form.type.number' => 'getForm_Type_NumberService',
            'form.type.password' => 'getForm_Type_PasswordService',
            'form.type.percent' => 'getForm_Type_PercentService',
            'form.type.radio' => 'getForm_Type_RadioService',
            'form.type.range' => 'getForm_Type_RangeService',
            'form.type.repeated' => 'getForm_Type_RepeatedService',
            'form.type.reset' => 'getForm_Type_ResetService',
            'form.type.search' => 'getForm_Type_SearchService',
            'form.type.submit' => 'getForm_Type_SubmitService',
            'form.type.text' => 'getForm_Type_TextService',
            'form.type.textarea' => 'getForm_Type_TextareaService',
            'form.type.time' => 'getForm_Type_TimeService',
            'form.type.timezone' => 'getForm_Type_TimezoneService',
            'form.type.url' => 'getForm_Type_UrlService',
            'form.type_extension.csrf' => 'getForm_TypeExtension_CsrfService',
            'form.type_extension.form.data_collector' => 'getForm_TypeExtension_Form_DataCollectorService',
            'form.type_extension.form.http_foundation' => 'getForm_TypeExtension_Form_HttpFoundationService',
            'form.type_extension.form.validator' => 'getForm_TypeExtension_Form_ValidatorService',
            'form.type_extension.repeated.validator' => 'getForm_TypeExtension_Repeated_ValidatorService',
            'form.type_extension.submit.validator' => 'getForm_TypeExtension_Submit_ValidatorService',
            'form.type_extension.upload.validator' => 'getForm_TypeExtension_Upload_ValidatorService',
            'form.type_guesser.doctrine' => 'getForm_TypeGuesser_DoctrineService',
            'form.type_guesser.validator' => 'getForm_TypeGuesser_ValidatorService',
            'fos_js_routing.controller' => 'getFosJsRouting_ControllerService',
            'fos_js_routing.extractor' => 'getFosJsRouting_ExtractorService',
            'fos_js_routing.serializer' => 'getFosJsRouting_SerializerService',
            'fos_rest.body_listener' => 'getFosRest_BodyListenerService',
            'fos_rest.decoder.json' => 'getFosRest_Decoder_JsonService',
            'fos_rest.decoder.jsontoform' => 'getFosRest_Decoder_JsontoformService',
            'fos_rest.decoder.xml' => 'getFosRest_Decoder_XmlService',
            'fos_rest.decoder_provider' => 'getFosRest_DecoderProviderService',
            'fos_rest.exception.codes_map' => 'getFosRest_Exception_CodesMapService',
            'fos_rest.exception.controller' => 'getFosRest_Exception_ControllerService',
            'fos_rest.exception.twig_controller' => 'getFosRest_Exception_TwigControllerService',
            'fos_rest.exception_listener' => 'getFosRest_ExceptionListenerService',
            'fos_rest.form.extension.csrf_disable' => 'getFosRest_Form_Extension_CsrfDisableService',
            'fos_rest.format_listener' => 'getFosRest_FormatListenerService',
            'fos_rest.format_negotiator' => 'getFosRest_FormatNegotiatorService',
            'fos_rest.inflector' => 'getFosRest_InflectorService',
            'fos_rest.mime_type_listener' => 'getFosRest_MimeTypeListenerService',
            'fos_rest.normalizer.camel_keys' => 'getFosRest_Normalizer_CamelKeysService',
            'fos_rest.normalizer.camel_keys_with_leading_underscore' => 'getFosRest_Normalizer_CamelKeysWithLeadingUnderscoreService',
            'fos_rest.param_fetcher_listener' => 'getFosRest_ParamFetcherListenerService',
            'fos_rest.request.param_fetcher' => 'getFosRest_Request_ParamFetcherService',
            'fos_rest.request.param_fetcher.reader' => 'getFosRest_Request_ParamFetcher_ReaderService',
            'fos_rest.serializer' => 'getFosRest_SerializerService',
            'fos_rest.serializer.exception_normalizer.jms' => 'getFosRest_Serializer_ExceptionNormalizer_JmsService',
            'fos_rest.serializer.jms_handler_registry.inner' => 'getFosRest_Serializer_JmsHandlerRegistry_InnerService',
            'fos_rest.view_handler' => 'getFosRest_ViewHandlerService',
            'fos_rest.view_response_listener' => 'getFosRest_ViewResponseListenerService',
            'fos_user.change_password.controller' => 'getFosUser_ChangePassword_ControllerService',
            'fos_user.change_password.form.factory' => 'getFosUser_ChangePassword_Form_FactoryService',
            'fos_user.change_password.form.type' => 'getFosUser_ChangePassword_Form_TypeService',
            'fos_user.command.activate_user' => 'getFosUser_Command_ActivateUserService',
            'fos_user.command.change_password' => 'getFosUser_Command_ChangePasswordService',
            'fos_user.command.create_user' => 'getFosUser_Command_CreateUserService',
            'fos_user.command.deactivate_user' => 'getFosUser_Command_DeactivateUserService',
            'fos_user.command.demote_user' => 'getFosUser_Command_DemoteUserService',
            'fos_user.command.promote_user' => 'getFosUser_Command_PromoteUserService',
            'fos_user.group.controller' => 'getFosUser_Group_ControllerService',
            'fos_user.group.form.factory' => 'getFosUser_Group_Form_FactoryService',
            'fos_user.group.form.type' => 'getFosUser_Group_Form_TypeService',
            'fos_user.group_manager' => 'getFosUser_GroupManagerService',
            'fos_user.listener.authentication' => 'getFosUser_Listener_AuthenticationService',
            'fos_user.listener.email_confirmation' => 'getFosUser_Listener_EmailConfirmationService',
            'fos_user.listener.flash' => 'getFosUser_Listener_FlashService',
            'fos_user.listener.resetting' => 'getFosUser_Listener_ResettingService',
            'fos_user.mailer' => 'getFosUser_MailerService',
            'fos_user.object_manager' => 'getFosUser_ObjectManagerService',
            'fos_user.profile.controller' => 'getFosUser_Profile_ControllerService',
            'fos_user.profile.form.factory' => 'getFosUser_Profile_Form_FactoryService',
            'fos_user.profile.form.type' => 'getFosUser_Profile_Form_TypeService',
            'fos_user.registration.controller' => 'getFosUser_Registration_ControllerService',
            'fos_user.registration.form.factory' => 'getFosUser_Registration_Form_FactoryService',
            'fos_user.registration.form.type' => 'getFosUser_Registration_Form_TypeService',
            'fos_user.resetting.controller' => 'getFosUser_Resetting_ControllerService',
            'fos_user.resetting.form.factory' => 'getFosUser_Resetting_Form_FactoryService',
            'fos_user.resetting.form.type' => 'getFosUser_Resetting_Form_TypeService',
            'fos_user.security.controller' => 'getFosUser_Security_ControllerService',
            'fos_user.security.interactive_login_listener' => 'getFosUser_Security_InteractiveLoginListenerService',
            'fos_user.security.login_manager' => 'getFosUser_Security_LoginManagerService',
            'fos_user.user_manager' => 'getFosUser_UserManagerService',
            'fos_user.user_provider.username' => 'getFosUser_UserProvider_UsernameService',
            'fos_user.username_form_type' => 'getFosUser_UsernameFormTypeService',
            'fos_user.util.canonical_fields_updater' => 'getFosUser_Util_CanonicalFieldsUpdaterService',
            'fos_user.util.email_canonicalizer' => 'getFosUser_Util_EmailCanonicalizerService',
            'fos_user.util.password_updater' => 'getFosUser_Util_PasswordUpdaterService',
            'fos_user.util.token_generator' => 'getFosUser_Util_TokenGeneratorService',
            'fos_user.util.user_manipulator' => 'getFosUser_Util_UserManipulatorService',
            'fragment.handler' => 'getFragment_HandlerService',
            'fragment.listener' => 'getFragment_ListenerService',
            'fragment.renderer.hinclude' => 'getFragment_Renderer_HincludeService',
            'fragment.renderer.inline' => 'getFragment_Renderer_InlineService',
            'gesdinet.jwtrefreshtoken' => 'getGesdinet_JwtrefreshtokenService',
            'gesdinet.jwtrefreshtoken.authenticator' => 'getGesdinet_Jwtrefreshtoken_AuthenticatorService',
            'gesdinet.jwtrefreshtoken.refresh_token_manager' => 'getGesdinet_Jwtrefreshtoken_RefreshTokenManagerService',
            'gesdinet.jwtrefreshtoken.send_token' => 'getGesdinet_Jwtrefreshtoken_SendTokenService',
            'gesdinet.jwtrefreshtoken.user_provider' => 'getGesdinet_Jwtrefreshtoken_UserProviderService',
            'gregwar_captcha.captcha_builder' => 'getGregwarCaptcha_CaptchaBuilderService',
            'gregwar_captcha.generator' => 'getGregwarCaptcha_GeneratorService',
            'gregwar_captcha.image_file_handler' => 'getGregwarCaptcha_ImageFileHandlerService',
            'gregwar_captcha.phrase_builder' => 'getGregwarCaptcha_PhraseBuilderService',
            'hateoas.configuration.provider.resolver' => 'getHateoas_Configuration_Provider_ResolverService',
            'hateoas.configuration.relations_repository' => 'getHateoas_Configuration_RelationsRepositoryService',
            'hateoas.embeds_factory' => 'getHateoas_EmbedsFactoryService',
            'hateoas.event_subscriber.json' => 'getHateoas_EventSubscriber_JsonService',
            'hateoas.event_subscriber.xml' => 'getHateoas_EventSubscriber_XmlService',
            'hateoas.expression.evaluator' => 'getHateoas_Expression_EvaluatorService',
            'hateoas.expression.link' => 'getHateoas_Expression_LinkService',
            'hateoas.generator.registry' => 'getHateoas_Generator_RegistryService',
            'hateoas.generator.symfony' => 'getHateoas_Generator_SymfonyService',
            'hateoas.helper.link' => 'getHateoas_Helper_LinkService',
            'hateoas.link_factory' => 'getHateoas_LinkFactoryService',
            'hateoas.links_factory' => 'getHateoas_LinksFactoryService',
            'hateoas.serializer.exclusion_manager' => 'getHateoas_Serializer_ExclusionManagerService',
            'hateoas.twig.link' => 'getHateoas_Twig_LinkService',
            'http_kernel' => 'getHttpKernelService',
            'ivory_ck_editor.config_manager' => 'getIvoryCkEditor_ConfigManagerService',
            'ivory_ck_editor.form.type' => 'getIvoryCkEditor_Form_TypeService',
            'ivory_ck_editor.plugin_manager' => 'getIvoryCkEditor_PluginManagerService',
            'ivory_ck_editor.renderer' => 'getIvoryCkEditor_RendererService',
            'ivory_ck_editor.renderer.json_builder' => 'getIvoryCkEditor_Renderer_JsonBuilderService',
            'ivory_ck_editor.styles_set_manager' => 'getIvoryCkEditor_StylesSetManagerService',
            'ivory_ck_editor.template_manager' => 'getIvoryCkEditor_TemplateManagerService',
            'ivory_ck_editor.toolbar_manager' => 'getIvoryCkEditor_ToolbarManagerService',
            'ivory_ck_editor.twig_extension' => 'getIvoryCkEditor_TwigExtensionService',
            'jms_aop.interceptor_loader' => 'getJmsAop_InterceptorLoaderService',
            'jms_aop.pointcut_container' => 'getJmsAop_PointcutContainerService',
            'jms_serializer' => 'getJmsSerializerService',
            'jms_serializer.accessor_strategy' => 'getJmsSerializer_AccessorStrategyService',
            'jms_serializer.array_collection_handler' => 'getJmsSerializer_ArrayCollectionHandlerService',
            'jms_serializer.constraint_violation_handler' => 'getJmsSerializer_ConstraintViolationHandlerService',
            'jms_serializer.datetime_handler' => 'getJmsSerializer_DatetimeHandlerService',
            'jms_serializer.deserialization_context_factory' => 'getJmsSerializer_DeserializationContextFactoryService',
            'jms_serializer.doctrine_proxy_subscriber' => 'getJmsSerializer_DoctrineProxySubscriberService',
            'jms_serializer.expression_evaluator' => 'getJmsSerializer_ExpressionEvaluatorService',
            'jms_serializer.form_error_handler' => 'getJmsSerializer_FormErrorHandlerService',
            'jms_serializer.handler_registry' => 'getJmsSerializer_HandlerRegistryService',
            'jms_serializer.json_deserialization_visitor' => 'getJmsSerializer_JsonDeserializationVisitorService',
            'jms_serializer.json_serialization_visitor' => 'getJmsSerializer_JsonSerializationVisitorService',
            'jms_serializer.metadata.file_locator' => 'getJmsSerializer_Metadata_FileLocatorService',
            'jms_serializer.metadata_driver' => 'getJmsSerializer_MetadataDriverService',
            'jms_serializer.metadata_factory' => 'getJmsSerializer_MetadataFactoryService',
            'jms_serializer.naming_strategy' => 'getJmsSerializer_NamingStrategyService',
            'jms_serializer.object_constructor' => 'getJmsSerializer_ObjectConstructorService',
            'jms_serializer.php_collection_handler' => 'getJmsSerializer_PhpCollectionHandlerService',
            'jms_serializer.serialization_context_factory' => 'getJmsSerializer_SerializationContextFactoryService',
            'jms_serializer.stopwatch_subscriber' => 'getJmsSerializer_StopwatchSubscriberService',
            'jms_serializer.templating.helper.serializer' => 'getJmsSerializer_Templating_Helper_SerializerService',
            'jms_serializer.twig_extension.serializer_runtime_helper' => 'getJmsSerializer_TwigExtension_SerializerRuntimeHelperService',
            'jms_serializer.unserialize_object_constructor' => 'getJmsSerializer_UnserializeObjectConstructorService',
            'jms_serializer.xml_deserialization_visitor' => 'getJmsSerializer_XmlDeserializationVisitorService',
            'jms_serializer.xml_serialization_visitor' => 'getJmsSerializer_XmlSerializationVisitorService',
            'jms_serializer.yaml_serialization_visitor' => 'getJmsSerializer_YamlSerializationVisitorService',
            'kernel.class_cache.cache_warmer' => 'getKernel_ClassCache_CacheWarmerService',
            'knp_gaufrette.filesystem_map' => 'getKnpGaufrette_FilesystemMapService',
            'knp_menu.factory' => 'getKnpMenu_FactoryService',
            'knp_menu.matcher' => 'getKnpMenu_MatcherService',
            'knp_menu.menu_provider' => 'getKnpMenu_MenuProviderService',
            'knp_menu.menu_provider.builder_alias' => 'getKnpMenu_MenuProvider_BuilderAliasService',
            'knp_menu.menu_provider.lazy' => 'getKnpMenu_MenuProvider_LazyService',
            'knp_menu.renderer.list' => 'getKnpMenu_Renderer_ListService',
            'knp_menu.renderer.twig' => 'getKnpMenu_Renderer_TwigService',
            'knp_menu.renderer_provider' => 'getKnpMenu_RendererProviderService',
            'knp_menu.voter.router' => 'getKnpMenu_Voter_RouterService',
            'knp_paginator' => 'getKnpPaginatorService',
            'knp_paginator.helper.processor' => 'getKnpPaginator_Helper_ProcessorService',
            'knp_paginator.subscriber.filtration' => 'getKnpPaginator_Subscriber_FiltrationService',
            'knp_paginator.subscriber.paginate' => 'getKnpPaginator_Subscriber_PaginateService',
            'knp_paginator.subscriber.sliding_pagination' => 'getKnpPaginator_Subscriber_SlidingPaginationService',
            'knp_paginator.subscriber.sortable' => 'getKnpPaginator_Subscriber_SortableService',
            'knp_paginator.twig.extension.pagination' => 'getKnpPaginator_Twig_Extension_PaginationService',
            'lexik_form_filter.apply_filter.doctrine_orm' => 'getLexikFormFilter_ApplyFilter_DoctrineOrmService',
            'lexik_form_filter.data_extraction_method.default' => 'getLexikFormFilter_DataExtractionMethod_DefaultService',
            'lexik_form_filter.data_extraction_method.key_values' => 'getLexikFormFilter_DataExtractionMethod_KeyValuesService',
            'lexik_form_filter.data_extraction_method.text' => 'getLexikFormFilter_DataExtractionMethod_TextService',
            'lexik_form_filter.filter_prepare' => 'getLexikFormFilter_FilterPrepareService',
            'lexik_form_filter.form_data_extractor' => 'getLexikFormFilter_FormDataExtractorService',
            'lexik_form_filter.get_filter.doctrine_orm' => 'getLexikFormFilter_GetFilter_DoctrineOrmService',
            'lexik_form_filter.query_builder_updater' => 'getLexikFormFilter_QueryBuilderUpdaterService',
            'lexik_form_filter.type.filter_boolean' => 'getLexikFormFilter_Type_FilterBooleanService',
            'lexik_form_filter.type.filter_checkbox' => 'getLexikFormFilter_Type_FilterCheckboxService',
            'lexik_form_filter.type.filter_choice' => 'getLexikFormFilter_Type_FilterChoiceService',
            'lexik_form_filter.type.filter_collection_adapter' => 'getLexikFormFilter_Type_FilterCollectionAdapterService',
            'lexik_form_filter.type.filter_date' => 'getLexikFormFilter_Type_FilterDateService',
            'lexik_form_filter.type.filter_date_range' => 'getLexikFormFilter_Type_FilterDateRangeService',
            'lexik_form_filter.type.filter_datetime' => 'getLexikFormFilter_Type_FilterDatetimeService',
            'lexik_form_filter.type.filter_datetime_range' => 'getLexikFormFilter_Type_FilterDatetimeRangeService',
            'lexik_form_filter.type.filter_entity' => 'getLexikFormFilter_Type_FilterEntityService',
            'lexik_form_filter.type.filter_number' => 'getLexikFormFilter_Type_FilterNumberService',
            'lexik_form_filter.type.filter_number_range' => 'getLexikFormFilter_Type_FilterNumberRangeService',
            'lexik_form_filter.type.filter_sharedable' => 'getLexikFormFilter_Type_FilterSharedableService',
            'lexik_form_filter.type.filter_text' => 'getLexikFormFilter_Type_FilterTextService',
            'lexik_form_filter.type_extension.filter_extension' => 'getLexikFormFilter_TypeExtension_FilterExtensionService',
            'lexik_jwt_authentication.check_config_command' => 'getLexikJwtAuthentication_CheckConfigCommandService',
            'lexik_jwt_authentication.encoder.default' => 'getLexikJwtAuthentication_Encoder_DefaultService',
            'lexik_jwt_authentication.extractor.authorization_header_extractor' => 'getLexikJwtAuthentication_Extractor_AuthorizationHeaderExtractorService',
            'lexik_jwt_authentication.extractor.authorization_header_extractor.api' => 'getLexikJwtAuthentication_Extractor_AuthorizationHeaderExtractor_ApiService',
            'lexik_jwt_authentication.extractor.cookie_extractor' => 'getLexikJwtAuthentication_Extractor_CookieExtractorService',
            'lexik_jwt_authentication.extractor.query_parameter_extractor' => 'getLexikJwtAuthentication_Extractor_QueryParameterExtractorService',
            'lexik_jwt_authentication.handler.authentication_failure' => 'getLexikJwtAuthentication_Handler_AuthenticationFailureService',
            'lexik_jwt_authentication.handler.authentication_success' => 'getLexikJwtAuthentication_Handler_AuthenticationSuccessService',
            'lexik_jwt_authentication.jwt_manager' => 'getLexikJwtAuthentication_JwtManagerService',
            'lexik_jwt_authentication.key_loader' => 'getLexikJwtAuthentication_KeyLoaderService',
            'lexik_jwt_authentication.security.authentication.entry_point.api' => 'getLexikJwtAuthentication_Security_Authentication_EntryPoint_ApiService',
            'lexik_jwt_authentication.security.guard.jwt_token_authenticator' => 'getLexikJwtAuthentication_Security_Guard_JwtTokenAuthenticatorService',
            'liip_imagine' => 'getLiipImagineService',
            'liip_imagine.binary.loader.default' => 'getLiipImagine_Binary_Loader_DefaultService',
            'liip_imagine.binary.loader.prototype.filesystem' => 'getLiipImagine_Binary_Loader_Prototype_FilesystemService',
            'liip_imagine.binary.loader.prototype.stream' => 'getLiipImagine_Binary_Loader_Prototype_StreamService',
            'liip_imagine.binary.mime_type_guesser' => 'getLiipImagine_Binary_MimeTypeGuesserService',
            'liip_imagine.cache.manager' => 'getLiipImagine_Cache_ManagerService',
            'liip_imagine.cache.resolver.default' => 'getLiipImagine_Cache_Resolver_DefaultService',
            'liip_imagine.cache.resolver.no_cache_web_path' => 'getLiipImagine_Cache_Resolver_NoCacheWebPathService',
            'liip_imagine.cache.signer' => 'getLiipImagine_Cache_SignerService',
            'liip_imagine.controller' => 'getLiipImagine_ControllerService',
            'liip_imagine.data.manager' => 'getLiipImagine_Data_ManagerService',
            'liip_imagine.extension_guesser' => 'getLiipImagine_ExtensionGuesserService',
            'liip_imagine.filter.configuration' => 'getLiipImagine_Filter_ConfigurationService',
            'liip_imagine.filter.loader.auto_rotate' => 'getLiipImagine_Filter_Loader_AutoRotateService',
            'liip_imagine.filter.loader.background' => 'getLiipImagine_Filter_Loader_BackgroundService',
            'liip_imagine.filter.loader.crop' => 'getLiipImagine_Filter_Loader_CropService',
            'liip_imagine.filter.loader.downscale' => 'getLiipImagine_Filter_Loader_DownscaleService',
            'liip_imagine.filter.loader.flip' => 'getLiipImagine_Filter_Loader_FlipService',
            'liip_imagine.filter.loader.grayscale' => 'getLiipImagine_Filter_Loader_GrayscaleService',
            'liip_imagine.filter.loader.interlace' => 'getLiipImagine_Filter_Loader_InterlaceService',
            'liip_imagine.filter.loader.paste' => 'getLiipImagine_Filter_Loader_PasteService',
            'liip_imagine.filter.loader.relative_resize' => 'getLiipImagine_Filter_Loader_RelativeResizeService',
            'liip_imagine.filter.loader.resample' => 'getLiipImagine_Filter_Loader_ResampleService',
            'liip_imagine.filter.loader.resize' => 'getLiipImagine_Filter_Loader_ResizeService',
            'liip_imagine.filter.loader.rotate' => 'getLiipImagine_Filter_Loader_RotateService',
            'liip_imagine.filter.loader.scale' => 'getLiipImagine_Filter_Loader_ScaleService',
            'liip_imagine.filter.loader.strip' => 'getLiipImagine_Filter_Loader_StripService',
            'liip_imagine.filter.loader.thumbnail' => 'getLiipImagine_Filter_Loader_ThumbnailService',
            'liip_imagine.filter.loader.upscale' => 'getLiipImagine_Filter_Loader_UpscaleService',
            'liip_imagine.filter.loader.watermark' => 'getLiipImagine_Filter_Loader_WatermarkService',
            'liip_imagine.filter.manager' => 'getLiipImagine_Filter_ManagerService',
            'liip_imagine.filter.post_processor.jpegoptim' => 'getLiipImagine_Filter_PostProcessor_JpegoptimService',
            'liip_imagine.filter.post_processor.mozjpeg' => 'getLiipImagine_Filter_PostProcessor_MozjpegService',
            'liip_imagine.filter.post_processor.optipng' => 'getLiipImagine_Filter_PostProcessor_OptipngService',
            'liip_imagine.filter.post_processor.pngquant' => 'getLiipImagine_Filter_PostProcessor_PngquantService',
            'liip_imagine.form.type.image' => 'getLiipImagine_Form_Type_ImageService',
            'liip_imagine.mime_type_guesser' => 'getLiipImagine_MimeTypeGuesserService',
            'liip_imagine.templating.helper' => 'getLiipImagine_Templating_HelperService',
            'locale_listener' => 'getLocaleListenerService',
            'logger' => 'getLoggerService',
            'markdown.parser' => 'getMarkdown_ParserService',
            'markdown.parser.parser_manager' => 'getMarkdown_Parser_ParserManagerService',
            'monolog.handler.console' => 'getMonolog_Handler_ConsoleService',
            'monolog.handler.main' => 'getMonolog_Handler_MainService',
            'monolog.handler.null_internal' => 'getMonolog_Handler_NullInternalService',
            'monolog.handler.server_log' => 'getMonolog_Handler_ServerLogService',
            'monolog.logger.cache' => 'getMonolog_Logger_CacheService',
            'monolog.logger.console' => 'getMonolog_Logger_ConsoleService',
            'monolog.logger.doctrine' => 'getMonolog_Logger_DoctrineService',
            'monolog.logger.event' => 'getMonolog_Logger_EventService',
            'monolog.logger.php' => 'getMonolog_Logger_PhpService',
            'monolog.logger.profiler' => 'getMonolog_Logger_ProfilerService',
            'monolog.logger.request' => 'getMonolog_Logger_RequestService',
            'monolog.logger.security' => 'getMonolog_Logger_SecurityService',
            'monolog.logger.templating' => 'getMonolog_Logger_TemplatingService',
            'monolog.logger.translation' => 'getMonolog_Logger_TranslationService',
            'mopa_bootstrap.form.type.form_actions' => 'getMopaBootstrap_Form_Type_FormActionsService',
            'mopa_bootstrap.form.type.tab' => 'getMopaBootstrap_Form_Type_TabService',
            'mopa_bootstrap.form.type_extension.button' => 'getMopaBootstrap_Form_TypeExtension_ButtonService',
            'mopa_bootstrap.form.type_extension.date' => 'getMopaBootstrap_Form_TypeExtension_DateService',
            'mopa_bootstrap.form.type_extension.datetime' => 'getMopaBootstrap_Form_TypeExtension_DatetimeService',
            'mopa_bootstrap.form.type_extension.embed_form' => 'getMopaBootstrap_Form_TypeExtension_EmbedFormService',
            'mopa_bootstrap.form.type_extension.error' => 'getMopaBootstrap_Form_TypeExtension_ErrorService',
            'mopa_bootstrap.form.type_extension.help' => 'getMopaBootstrap_Form_TypeExtension_HelpService',
            'mopa_bootstrap.form.type_extension.horizontal' => 'getMopaBootstrap_Form_TypeExtension_HorizontalService',
            'mopa_bootstrap.form.type_extension.legend' => 'getMopaBootstrap_Form_TypeExtension_LegendService',
            'mopa_bootstrap.form.type_extension.offset_button' => 'getMopaBootstrap_Form_TypeExtension_OffsetButtonService',
            'mopa_bootstrap.form.type_extension.static_text' => 'getMopaBootstrap_Form_TypeExtension_StaticTextService',
            'mopa_bootstrap.form.type_extension.tabbed' => 'getMopaBootstrap_Form_TypeExtension_TabbedService',
            'mopa_bootstrap.form.type_extension.time' => 'getMopaBootstrap_Form_TypeExtension_TimeService',
            'mopa_bootstrap.form.type_extension.widget' => 'getMopaBootstrap_Form_TypeExtension_WidgetService',
            'mopa_bootstrap.form.type_extension.widget_collection' => 'getMopaBootstrap_Form_TypeExtension_WidgetCollectionService',
            'mopa_bootstrap.twig.extension.bootstrap_flash' => 'getMopaBootstrap_Twig_Extension_BootstrapFlashService',
            'mopa_bootstrap.twig.extension.bootstrap_form' => 'getMopaBootstrap_Twig_Extension_BootstrapFormService',
            'mopa_bootstrap.twig.extension.bootstrap_icon' => 'getMopaBootstrap_Twig_Extension_BootstrapIconService',
            'nelmio_api_doc.doc_comment_extractor' => 'getNelmioApiDoc_DocCommentExtractorService',
            'nelmio_api_doc.event_listener.request' => 'getNelmioApiDoc_EventListener_RequestService',
            'nelmio_api_doc.extractor.api_doc_extractor' => 'getNelmioApiDoc_Extractor_ApiDocExtractorService',
            'nelmio_api_doc.form.extension.description_form_type_extension' => 'getNelmioApiDoc_Form_Extension_DescriptionFormTypeExtensionService',
            'nelmio_api_doc.formatter.html_formatter' => 'getNelmioApiDoc_Formatter_HtmlFormatterService',
            'nelmio_api_doc.formatter.markdown_formatter' => 'getNelmioApiDoc_Formatter_MarkdownFormatterService',
            'nelmio_api_doc.formatter.simple_formatter' => 'getNelmioApiDoc_Formatter_SimpleFormatterService',
            'nelmio_api_doc.formatter.swagger_formatter' => 'getNelmioApiDoc_Formatter_SwaggerFormatterService',
            'nelmio_api_doc.parser.collection_parser' => 'getNelmioApiDoc_Parser_CollectionParserService',
            'nelmio_api_doc.parser.form_errors_parser' => 'getNelmioApiDoc_Parser_FormErrorsParserService',
            'nelmio_api_doc.parser.form_type_parser' => 'getNelmioApiDoc_Parser_FormTypeParserService',
            'nelmio_api_doc.parser.jms_metadata_parser' => 'getNelmioApiDoc_Parser_JmsMetadataParserService',
            'nelmio_api_doc.parser.json_serializable_parser' => 'getNelmioApiDoc_Parser_JsonSerializableParserService',
            'nelmio_api_doc.parser.validation_parser' => 'getNelmioApiDoc_Parser_ValidationParserService',
            'nelmio_api_doc.twig.extension.extra_markdown' => 'getNelmioApiDoc_Twig_Extension_ExtraMarkdownService',
            'nelmio_cors.cors_listener' => 'getNelmioCors_CorsListenerService',
            'nelmio_cors.options_provider.config' => 'getNelmioCors_OptionsProvider_ConfigService',
            'pagerfanta.convert_not_valid_current_page_to_not_found_listener' => 'getPagerfanta_ConvertNotValidCurrentPageToNotFoundListenerService',
            'pagerfanta.convert_not_valid_max_per_page_to_not_found_listener' => 'getPagerfanta_ConvertNotValidMaxPerPageToNotFoundListenerService',
            'profiler' => 'getProfilerService',
            'profiler_listener' => 'getProfilerListenerService',
            'property_accessor' => 'getPropertyAccessorService',
            'request_stack' => 'getRequestStackService',
            'resolve_controller_name_subscriber' => 'getResolveControllerNameSubscriberService',
            'response_listener' => 'getResponseListenerService',
            'router' => 'getRouterService',
            'router.request_context' => 'getRouter_RequestContextService',
            'router_listener' => 'getRouterListenerService',
            'routing.loader' => 'getRouting_LoaderService',
            'security.access.authenticated_voter' => 'getSecurity_Access_AuthenticatedVoterService',
            'security.access.decision_manager' => 'getSecurity_Access_DecisionManagerService',
            'security.access.expression_voter' => 'getSecurity_Access_ExpressionVoterService',
            'security.access.method_interceptor' => 'getSecurity_Access_MethodInterceptorService',
            'security.access.pointcut' => 'getSecurity_Access_PointcutService',
            'security.access.role_hierarchy_voter' => 'getSecurity_Access_RoleHierarchyVoterService',
            'security.access_listener' => 'getSecurity_AccessListenerService',
            'security.access_map' => 'getSecurity_AccessMapService',
            'security.authentication.guard_handler' => 'getSecurity_Authentication_GuardHandlerService',
            'security.authentication.listener.jwt.api' => 'getSecurity_Authentication_Listener_Jwt_ApiService',
            'security.authentication.manager' => 'getSecurity_Authentication_ManagerService',
            'security.authentication.provider.anonymous.admin' => 'getSecurity_Authentication_Provider_Anonymous_AdminService',
            'security.authentication.provider.anonymous.api_docs' => 'getSecurity_Authentication_Provider_Anonymous_ApiDocsService',
            'security.authentication.provider.anonymous.api_login' => 'getSecurity_Authentication_Provider_Anonymous_ApiLoginService',
            'security.authentication.provider.anonymous.api_token_refresh' => 'getSecurity_Authentication_Provider_Anonymous_ApiTokenRefreshService',
            'security.authentication.provider.anonymous.main' => 'getSecurity_Authentication_Provider_Anonymous_MainService',
            'security.authentication.provider.dao.admin' => 'getSecurity_Authentication_Provider_Dao_AdminService',
            'security.authentication.provider.dao.api_login' => 'getSecurity_Authentication_Provider_Dao_ApiLoginService',
            'security.authentication.provider.dao.main' => 'getSecurity_Authentication_Provider_Dao_MainService',
            'security.authentication.provider.jwt.api' => 'getSecurity_Authentication_Provider_Jwt_ApiService',
            'security.authentication.provider.rememberme.main' => 'getSecurity_Authentication_Provider_Rememberme_MainService',
            'security.authentication.rememberme.services.simplehash.main' => 'getSecurity_Authentication_Rememberme_Services_Simplehash_MainService',
            'security.authentication.session_strategy' => 'getSecurity_Authentication_SessionStrategyService',
            'security.authentication.trust_resolver' => 'getSecurity_Authentication_TrustResolverService',
            'security.authentication_utils' => 'getSecurity_AuthenticationUtilsService',
            'security.authorization_checker' => 'getSecurity_AuthorizationCheckerService',
            'security.channel_listener' => 'getSecurity_ChannelListenerService',
            'security.context_listener.0' => 'getSecurity_ContextListener_0Service',
            'security.csrf.token_manager' => 'getSecurity_Csrf_TokenManagerService',
            'security.encoder_factory' => 'getSecurity_EncoderFactoryService',
            'security.extra.metadata_driver' => 'getSecurity_Extra_MetadataDriverService',
            'security.extra.metadata_factory' => 'getSecurity_Extra_MetadataFactoryService',
            'security.firewall' => 'getSecurity_FirewallService',
            'security.firewall.map' => 'getSecurity_Firewall_MapService',
            'security.firewall.map.context.admin' => 'getSecurity_Firewall_Map_Context_AdminService',
            'security.firewall.map.context.api' => 'getSecurity_Firewall_Map_Context_ApiService',
            'security.firewall.map.context.api_docs' => 'getSecurity_Firewall_Map_Context_ApiDocsService',
            'security.firewall.map.context.api_login' => 'getSecurity_Firewall_Map_Context_ApiLoginService',
            'security.firewall.map.context.api_token_refresh' => 'getSecurity_Firewall_Map_Context_ApiTokenRefreshService',
            'security.firewall.map.context.dev' => 'getSecurity_Firewall_Map_Context_DevService',
            'security.firewall.map.context.main' => 'getSecurity_Firewall_Map_Context_MainService',
            'security.http_utils' => 'getSecurity_HttpUtilsService',
            'security.logout.handler.session' => 'getSecurity_Logout_Handler_SessionService',
            'security.logout_url_generator' => 'getSecurity_LogoutUrlGeneratorService',
            'security.password_encoder' => 'getSecurity_PasswordEncoderService',
            'security.rememberme.response_listener' => 'getSecurity_Rememberme_ResponseListenerService',
            'security.request_matcher.6192eb66f667b945c5faa9068fbc96bd7724861bdcab98d92c6625b683ff302aff6d14d1' => 'getSecurity_RequestMatcher_6192eb66f667b945c5faa9068fbc96bd7724861bdcab98d92c6625b683ff302aff6d14d1Service',
            'security.request_matcher.696d471d5730f1bcec02c3783880cea90d37764b964a7f52f71cf02d6f8bacb4f24ccd69' => 'getSecurity_RequestMatcher_696d471d5730f1bcec02c3783880cea90d37764b964a7f52f71cf02d6f8bacb4f24ccd69Service',
            'security.request_matcher.7ac43c2928bafe5e56041919eb68135d15908028f87b29ff662dd62c7dfc4828c2b84310' => 'getSecurity_RequestMatcher_7ac43c2928bafe5e56041919eb68135d15908028f87b29ff662dd62c7dfc4828c2b84310Service',
            'security.request_matcher.7cfa9b08003afaadb4ea3bcbe010a26276dbfcad3be257643ceb6b25a29b80166d7d63fd' => 'getSecurity_RequestMatcher_7cfa9b08003afaadb4ea3bcbe010a26276dbfcad3be257643ceb6b25a29b80166d7d63fdService',
            'security.request_matcher.83414b4f59ab53f8865b08d5074e037efbb06e57ccba58ede5e1ed417a9ddcd1b645c11b' => 'getSecurity_RequestMatcher_83414b4f59ab53f8865b08d5074e037efbb06e57ccba58ede5e1ed417a9ddcd1b645c11bService',
            'security.request_matcher.bc5225be894e901e543ffcf3380500276da6125173096f94adf786461ce2e0f193452c7f' => 'getSecurity_RequestMatcher_Bc5225be894e901e543ffcf3380500276da6125173096f94adf786461ce2e0f193452c7fService',
            'security.request_matcher.f3ac44e1614cf5ff5908eb685aac69fdb2e0fb89eced77a37757f1a693fb469818019bc6' => 'getSecurity_RequestMatcher_F3ac44e1614cf5ff5908eb685aac69fdb2e0fb89eced77a37757f1a693fb469818019bc6Service',
            'security.role_hierarchy' => 'getSecurity_RoleHierarchyService',
            'security.token_storage' => 'getSecurity_TokenStorageService',
            'security.user_checker' => 'getSecurity_UserCheckerService',
            'security.user_value_resolver' => 'getSecurity_UserValueResolverService',
            'security.validator.user_password' => 'getSecurity_Validator_UserPasswordService',
            'sensio_distribution.security_checker' => 'getSensioDistribution_SecurityCheckerService',
            'sensio_distribution.security_checker.command' => 'getSensioDistribution_SecurityChecker_CommandService',
            'sensio_framework_extra.cache.listener' => 'getSensioFrameworkExtra_Cache_ListenerService',
            'sensio_framework_extra.controller.listener' => 'getSensioFrameworkExtra_Controller_ListenerService',
            'sensio_framework_extra.converter.datetime' => 'getSensioFrameworkExtra_Converter_DatetimeService',
            'sensio_framework_extra.converter.doctrine.orm' => 'getSensioFrameworkExtra_Converter_Doctrine_OrmService',
            'sensio_framework_extra.converter.listener' => 'getSensioFrameworkExtra_Converter_ListenerService',
            'sensio_framework_extra.converter.manager' => 'getSensioFrameworkExtra_Converter_ManagerService',
            'sensio_framework_extra.security.listener' => 'getSensioFrameworkExtra_Security_ListenerService',
            'sensio_framework_extra.view.guesser' => 'getSensioFrameworkExtra_View_GuesserService',
            'sensio_framework_extra.view.listener' => 'getSensioFrameworkExtra_View_ListenerService',
            'service_locator.182f5c5b079727c046caf1a16a7b23a8' => 'getServiceLocator_182f5c5b079727c046caf1a16a7b23a8Service',
            'service_locator.cc2b70dfe28c491d5d4736dc8913e9ae' => 'getServiceLocator_Cc2b70dfe28c491d5d4736dc8913e9aeService',
            'session' => 'getSessionService',
            'session.handler' => 'getSession_HandlerService',
            'session.save_listener' => 'getSession_SaveListenerService',
            'session.storage.filesystem' => 'getSession_Storage_FilesystemService',
            'session.storage.metadata_bag' => 'getSession_Storage_MetadataBagService',
            'session.storage.native' => 'getSession_Storage_NativeService',
            'session.storage.php_bridge' => 'getSession_Storage_PhpBridgeService',
            'session_listener' => 'getSessionListenerService',
            'sonata.admin.audit.manager' => 'getSonata_Admin_Audit_ManagerService',
            'sonata.admin.block.admin_list' => 'getSonata_Admin_Block_AdminListService',
            'sonata.admin.block.search_result' => 'getSonata_Admin_Block_SearchResultService',
            'sonata.admin.block.stats' => 'getSonata_Admin_Block_StatsService',
            'sonata.admin.breadcrumbs_builder' => 'getSonata_Admin_BreadcrumbsBuilderService',
            'sonata.admin.builder.filter.factory' => 'getSonata_Admin_Builder_Filter_FactoryService',
            'sonata.admin.builder.orm_datagrid' => 'getSonata_Admin_Builder_OrmDatagridService',
            'sonata.admin.builder.orm_form' => 'getSonata_Admin_Builder_OrmFormService',
            'sonata.admin.builder.orm_list' => 'getSonata_Admin_Builder_OrmListService',
            'sonata.admin.builder.orm_show' => 'getSonata_Admin_Builder_OrmShowService',
            'sonata.admin.controller.admin' => 'getSonata_Admin_Controller_AdminService',
            'sonata.admin.doctrine_orm.form.type.choice_field_mask' => 'getSonata_Admin_DoctrineOrm_Form_Type_ChoiceFieldMaskService',
            'sonata.admin.event.extension' => 'getSonata_Admin_Event_ExtensionService',
            'sonata.admin.exporter' => 'getSonata_Admin_ExporterService',
            'sonata.admin.filter_persister.session' => 'getSonata_Admin_FilterPersister_SessionService',
            'sonata.admin.form.extension.choice' => 'getSonata_Admin_Form_Extension_ChoiceService',
            'sonata.admin.form.extension.field' => 'getSonata_Admin_Form_Extension_FieldService',
            'sonata.admin.form.filter.type.choice' => 'getSonata_Admin_Form_Filter_Type_ChoiceService',
            'sonata.admin.form.filter.type.date' => 'getSonata_Admin_Form_Filter_Type_DateService',
            'sonata.admin.form.filter.type.daterange' => 'getSonata_Admin_Form_Filter_Type_DaterangeService',
            'sonata.admin.form.filter.type.datetime' => 'getSonata_Admin_Form_Filter_Type_DatetimeService',
            'sonata.admin.form.filter.type.datetime_range' => 'getSonata_Admin_Form_Filter_Type_DatetimeRangeService',
            'sonata.admin.form.filter.type.default' => 'getSonata_Admin_Form_Filter_Type_DefaultService',
            'sonata.admin.form.filter.type.number' => 'getSonata_Admin_Form_Filter_Type_NumberService',
            'sonata.admin.form.type.admin' => 'getSonata_Admin_Form_Type_AdminService',
            'sonata.admin.form.type.collection' => 'getSonata_Admin_Form_Type_CollectionService',
            'sonata.admin.form.type.model_autocomplete' => 'getSonata_Admin_Form_Type_ModelAutocompleteService',
            'sonata.admin.form.type.model_choice' => 'getSonata_Admin_Form_Type_ModelChoiceService',
            'sonata.admin.form.type.model_hidden' => 'getSonata_Admin_Form_Type_ModelHiddenService',
            'sonata.admin.form.type.model_list' => 'getSonata_Admin_Form_Type_ModelListService',
            'sonata.admin.form.type.model_reference' => 'getSonata_Admin_Form_Type_ModelReferenceService',
            'sonata.admin.global_template_registry' => 'getSonata_Admin_GlobalTemplateRegistryService',
            'sonata.admin.guesser.orm_datagrid' => 'getSonata_Admin_Guesser_OrmDatagridService',
            'sonata.admin.guesser.orm_datagrid_chain' => 'getSonata_Admin_Guesser_OrmDatagridChainService',
            'sonata.admin.guesser.orm_list' => 'getSonata_Admin_Guesser_OrmListService',
            'sonata.admin.guesser.orm_list_chain' => 'getSonata_Admin_Guesser_OrmListChainService',
            'sonata.admin.guesser.orm_show' => 'getSonata_Admin_Guesser_OrmShowService',
            'sonata.admin.guesser.orm_show_chain' => 'getSonata_Admin_Guesser_OrmShowChainService',
            'sonata.admin.helper' => 'getSonata_Admin_HelperService',
            'sonata.admin.label.strategy.bc' => 'getSonata_Admin_Label_Strategy_BcService',
            'sonata.admin.label.strategy.form_component' => 'getSonata_Admin_Label_Strategy_FormComponentService',
            'sonata.admin.label.strategy.native' => 'getSonata_Admin_Label_Strategy_NativeService',
            'sonata.admin.label.strategy.noop' => 'getSonata_Admin_Label_Strategy_NoopService',
            'sonata.admin.label.strategy.underscore' => 'getSonata_Admin_Label_Strategy_UnderscoreService',
            'sonata.admin.lock.extension' => 'getSonata_Admin_Lock_ExtensionService',
            'sonata.admin.manager.orm' => 'getSonata_Admin_Manager_OrmService',
            'sonata.admin.manipulator.acl.admin' => 'getSonata_Admin_Manipulator_Acl_AdminService',
            'sonata.admin.manipulator.acl.object.orm' => 'getSonata_Admin_Manipulator_Acl_Object_OrmService',
            'sonata.admin.menu.group_provider' => 'getSonata_Admin_Menu_GroupProviderService',
            'sonata.admin.menu.matcher.voter.active' => 'getSonata_Admin_Menu_Matcher_Voter_ActiveService',
            'sonata.admin.menu.matcher.voter.admin' => 'getSonata_Admin_Menu_Matcher_Voter_AdminService',
            'sonata.admin.menu.matcher.voter.children' => 'getSonata_Admin_Menu_Matcher_Voter_ChildrenService',
            'sonata.admin.menu_builder' => 'getSonata_Admin_MenuBuilderService',
            'sonata.admin.object.manipulator.acl.admin' => 'getSonata_Admin_Object_Manipulator_Acl_AdminService',
            'sonata.admin.orm.filter.type.boolean' => 'getSonata_Admin_Orm_Filter_Type_BooleanService',
            'sonata.admin.orm.filter.type.callback' => 'getSonata_Admin_Orm_Filter_Type_CallbackService',
            'sonata.admin.orm.filter.type.choice' => 'getSonata_Admin_Orm_Filter_Type_ChoiceService',
            'sonata.admin.orm.filter.type.class' => 'getSonata_Admin_Orm_Filter_Type_ClassService',
            'sonata.admin.orm.filter.type.date' => 'getSonata_Admin_Orm_Filter_Type_DateService',
            'sonata.admin.orm.filter.type.date_range' => 'getSonata_Admin_Orm_Filter_Type_DateRangeService',
            'sonata.admin.orm.filter.type.datetime' => 'getSonata_Admin_Orm_Filter_Type_DatetimeService',
            'sonata.admin.orm.filter.type.datetime_range' => 'getSonata_Admin_Orm_Filter_Type_DatetimeRangeService',
            'sonata.admin.orm.filter.type.model' => 'getSonata_Admin_Orm_Filter_Type_ModelService',
            'sonata.admin.orm.filter.type.model_autocomplete' => 'getSonata_Admin_Orm_Filter_Type_ModelAutocompleteService',
            'sonata.admin.orm.filter.type.number' => 'getSonata_Admin_Orm_Filter_Type_NumberService',
            'sonata.admin.orm.filter.type.string' => 'getSonata_Admin_Orm_Filter_Type_StringService',
            'sonata.admin.orm.filter.type.time' => 'getSonata_Admin_Orm_Filter_Type_TimeService',
            'sonata.admin.pool' => 'getSonata_Admin_PoolService',
            'sonata.admin.route.cache' => 'getSonata_Admin_Route_CacheService',
            'sonata.admin.route.cache_warmup' => 'getSonata_Admin_Route_CacheWarmupService',
            'sonata.admin.route.default_generator' => 'getSonata_Admin_Route_DefaultGeneratorService',
            'sonata.admin.route.path_info' => 'getSonata_Admin_Route_PathInfoService',
            'sonata.admin.route.query_string' => 'getSonata_Admin_Route_QueryStringService',
            'sonata.admin.route_loader' => 'getSonata_Admin_RouteLoaderService',
            'sonata.admin.search.handler' => 'getSonata_Admin_Search_HandlerService',
            'sonata.admin.security.handler' => 'getSonata_Admin_Security_HandlerService',
            'sonata.admin.sidebar_menu' => 'getSonata_Admin_SidebarMenuService',
            'sonata.admin.twig.extension' => 'getSonata_Admin_Twig_ExtensionService',
            'sonata.admin.twig.global' => 'getSonata_Admin_Twig_GlobalService',
            'sonata.admin.validator.inline' => 'getSonata_Admin_Validator_InlineService',
            'sonata.block.cache.handler.default' => 'getSonata_Block_Cache_Handler_DefaultService',
            'sonata.block.cache.handler.noop' => 'getSonata_Block_Cache_Handler_NoopService',
            'sonata.block.context_manager.default' => 'getSonata_Block_ContextManager_DefaultService',
            'sonata.block.exception.filter.debug_only' => 'getSonata_Block_Exception_Filter_DebugOnlyService',
            'sonata.block.exception.filter.ignore_block_exception' => 'getSonata_Block_Exception_Filter_IgnoreBlockExceptionService',
            'sonata.block.exception.filter.keep_all' => 'getSonata_Block_Exception_Filter_KeepAllService',
            'sonata.block.exception.filter.keep_none' => 'getSonata_Block_Exception_Filter_KeepNoneService',
            'sonata.block.exception.renderer.inline' => 'getSonata_Block_Exception_Renderer_InlineService',
            'sonata.block.exception.renderer.inline_debug' => 'getSonata_Block_Exception_Renderer_InlineDebugService',
            'sonata.block.exception.renderer.throw' => 'getSonata_Block_Exception_Renderer_ThrowService',
            'sonata.block.exception.strategy.manager' => 'getSonata_Block_Exception_Strategy_ManagerService',
            'sonata.block.form.type.block' => 'getSonata_Block_Form_Type_BlockService',
            'sonata.block.form.type.container_template' => 'getSonata_Block_Form_Type_ContainerTemplateService',
            'sonata.block.loader.chain' => 'getSonata_Block_Loader_ChainService',
            'sonata.block.loader.service' => 'getSonata_Block_Loader_ServiceService',
            'sonata.block.manager' => 'getSonata_Block_ManagerService',
            'sonata.block.menu.registry' => 'getSonata_Block_Menu_RegistryService',
            'sonata.block.renderer.default' => 'getSonata_Block_Renderer_DefaultService',
            'sonata.block.service.container' => 'getSonata_Block_Service_ContainerService',
            'sonata.block.service.empty' => 'getSonata_Block_Service_EmptyService',
            'sonata.block.service.menu' => 'getSonata_Block_Service_MenuService',
            'sonata.block.service.rss' => 'getSonata_Block_Service_RssService',
            'sonata.block.service.template' => 'getSonata_Block_Service_TemplateService',
            'sonata.block.service.text' => 'getSonata_Block_Service_TextService',
            'sonata.block.templating.helper' => 'getSonata_Block_Templating_HelperService',
            'sonata.block.twig.global' => 'getSonata_Block_Twig_GlobalService',
            'sonata.classification.admin.category' => 'getSonata_Classification_Admin_CategoryService',
            'sonata.classification.admin.category.template_registry' => 'getSonata_Classification_Admin_Category_TemplateRegistryService',
            'sonata.classification.admin.collection' => 'getSonata_Classification_Admin_CollectionService',
            'sonata.classification.admin.collection.template_registry' => 'getSonata_Classification_Admin_Collection_TemplateRegistryService',
            'sonata.classification.admin.context' => 'getSonata_Classification_Admin_ContextService',
            'sonata.classification.admin.context.template_registry' => 'getSonata_Classification_Admin_Context_TemplateRegistryService',
            'sonata.classification.admin.tag' => 'getSonata_Classification_Admin_TagService',
            'sonata.classification.admin.tag.template_registry' => 'getSonata_Classification_Admin_Tag_TemplateRegistryService',
            'sonata.classification.api.form.type.category' => 'getSonata_Classification_Api_Form_Type_CategoryService',
            'sonata.classification.api.form.type.collection' => 'getSonata_Classification_Api_Form_Type_CollectionService',
            'sonata.classification.api.form.type.context' => 'getSonata_Classification_Api_Form_Type_ContextService',
            'sonata.classification.api.form.type.tag' => 'getSonata_Classification_Api_Form_Type_TagService',
            'sonata.classification.controller.api.category' => 'getSonata_Classification_Controller_Api_CategoryService',
            'sonata.classification.controller.api.collection' => 'getSonata_Classification_Controller_Api_CollectionService',
            'sonata.classification.controller.api.context' => 'getSonata_Classification_Controller_Api_ContextService',
            'sonata.classification.controller.api.tag' => 'getSonata_Classification_Controller_Api_TagService',
            'sonata.classification.form.type.category_selector' => 'getSonata_Classification_Form_Type_CategorySelectorService',
            'sonata.classification.manager.category' => 'getSonata_Classification_Manager_CategoryService',
            'sonata.classification.manager.collection' => 'getSonata_Classification_Manager_CollectionService',
            'sonata.classification.manager.context' => 'getSonata_Classification_Manager_ContextService',
            'sonata.classification.manager.tag' => 'getSonata_Classification_Manager_TagService',
            'sonata.classification.serializer.handler.category' => 'getSonata_Classification_Serializer_Handler_CategoryService',
            'sonata.classification.serializer.handler.collection' => 'getSonata_Classification_Serializer_Handler_CollectionService',
            'sonata.classification.serializer.handler.context' => 'getSonata_Classification_Serializer_Handler_ContextService',
            'sonata.classification.serializer.handler.tag' => 'getSonata_Classification_Serializer_Handler_TagService',
            'sonata.core.date.moment_format_converter' => 'getSonata_Core_Date_MomentFormatConverterService',
            'sonata.core.flashmessage.manager' => 'getSonata_Core_Flashmessage_ManagerService',
            'sonata.core.flashmessage.twig.extension' => 'getSonata_Core_Flashmessage_Twig_ExtensionService',
            'sonata.core.form.type.array' => 'getSonata_Core_Form_Type_ArrayService',
            'sonata.core.form.type.boolean' => 'getSonata_Core_Form_Type_BooleanService',
            'sonata.core.form.type.collection' => 'getSonata_Core_Form_Type_CollectionService',
            'sonata.core.form.type.color' => 'getSonata_Core_Form_Type_ColorService',
            'sonata.core.form.type.color_selector' => 'getSonata_Core_Form_Type_ColorSelectorService',
            'sonata.core.form.type.date_picker' => 'getSonata_Core_Form_Type_DatePickerService',
            'sonata.core.form.type.date_range' => 'getSonata_Core_Form_Type_DateRangeService',
            'sonata.core.form.type.date_range_picker' => 'getSonata_Core_Form_Type_DateRangePickerService',
            'sonata.core.form.type.datetime_picker' => 'getSonata_Core_Form_Type_DatetimePickerService',
            'sonata.core.form.type.datetime_range' => 'getSonata_Core_Form_Type_DatetimeRangeService',
            'sonata.core.form.type.datetime_range_picker' => 'getSonata_Core_Form_Type_DatetimeRangePickerService',
            'sonata.core.form.type.equal' => 'getSonata_Core_Form_Type_EqualService',
            'sonata.core.form.type.translatable_choice' => 'getSonata_Core_Form_Type_TranslatableChoiceService',
            'sonata.core.model.adapter.chain' => 'getSonata_Core_Model_Adapter_ChainService',
            'sonata.core.slugify.cocur' => 'getSonata_Core_Slugify_CocurService',
            'sonata.core.slugify.native' => 'getSonata_Core_Slugify_NativeService',
            'sonata.core.twig.deprecated_template_extension' => 'getSonata_Core_Twig_DeprecatedTemplateExtensionService',
            'sonata.core.twig.extension.text' => 'getSonata_Core_Twig_Extension_TextService',
            'sonata.core.twig.extension.wrapping' => 'getSonata_Core_Twig_Extension_WrappingService',
            'sonata.core.twig.status_extension' => 'getSonata_Core_Twig_StatusExtensionService',
            'sonata.core.twig.template_extension' => 'getSonata_Core_Twig_TemplateExtensionService',
            'sonata.core.validator.inline' => 'getSonata_Core_Validator_InlineService',
            'sonata.easy_extends.doctrine.mapper' => 'getSonata_EasyExtends_Doctrine_MapperService',
            'sonata.easy_extends.generator.bundle' => 'getSonata_EasyExtends_Generator_BundleService',
            'sonata.easy_extends.generator.odm' => 'getSonata_EasyExtends_Generator_OdmService',
            'sonata.easy_extends.generator.orm' => 'getSonata_EasyExtends_Generator_OrmService',
            'sonata.easy_extends.generator.phpcr' => 'getSonata_EasyExtends_Generator_PhpcrService',
            'sonata.easy_extends.generator.serializer' => 'getSonata_EasyExtends_Generator_SerializerService',
            'sonata.formatter.block.formatter' => 'getSonata_Formatter_Block_FormatterService',
            'sonata.formatter.ckeditor.extension' => 'getSonata_Formatter_Ckeditor_ExtensionService',
            'sonata.formatter.form.type.selector' => 'getSonata_Formatter_Form_Type_SelectorService',
            'sonata.formatter.form.type.simple' => 'getSonata_Formatter_Form_Type_SimpleService',
            'sonata.formatter.pool' => 'getSonata_Formatter_PoolService',
            'sonata.formatter.text.markdown' => 'getSonata_Formatter_Text_MarkdownService',
            'sonata.formatter.text.raw' => 'getSonata_Formatter_Text_RawService',
            'sonata.formatter.text.text' => 'getSonata_Formatter_Text_TextService',
            'sonata.formatter.text.twigengine' => 'getSonata_Formatter_Text_TwigengineService',
            'sonata.formatter.twig.control_flow' => 'getSonata_Formatter_Twig_ControlFlowService',
            'sonata.formatter.twig.env.markdown' => 'getSonata_Formatter_Twig_Env_MarkdownService',
            'sonata.formatter.twig.env.rawhtml' => 'getSonata_Formatter_Twig_Env_RawhtmlService',
            'sonata.formatter.twig.env.richhtml' => 'getSonata_Formatter_Twig_Env_RichhtmlService',
            'sonata.formatter.twig.env.text' => 'getSonata_Formatter_Twig_Env_TextService',
            'sonata.formatter.twig.gist' => 'getSonata_Formatter_Twig_GistService',
            'sonata.formatter.validator.formatter' => 'getSonata_Formatter_Validator_FormatterService',
            'sonata.intl.locale_detector.request_stack' => 'getSonata_Intl_LocaleDetector_RequestStackService',
            'sonata.intl.templating.helper.datetime' => 'getSonata_Intl_Templating_Helper_DatetimeService',
            'sonata.intl.templating.helper.locale' => 'getSonata_Intl_Templating_Helper_LocaleService',
            'sonata.intl.templating.helper.number' => 'getSonata_Intl_Templating_Helper_NumberService',
            'sonata.intl.timezone_detector.chain' => 'getSonata_Intl_TimezoneDetector_ChainService',
            'sonata.intl.timezone_detector.locale' => 'getSonata_Intl_TimezoneDetector_LocaleService',
            'sonata.intl.timezone_detector.user' => 'getSonata_Intl_TimezoneDetector_UserService',
            'sonata.media.adapter.filesystem.local' => 'getSonata_Media_Adapter_Filesystem_LocalService',
            'sonata.media.adapter.image.gd' => 'getSonata_Media_Adapter_Image_GdService',
            'sonata.media.adapter.image.gmagick' => 'getSonata_Media_Adapter_Image_GmagickService',
            'sonata.media.adapter.image.imagick' => 'getSonata_Media_Adapter_Image_ImagickService',
            'sonata.media.adapter.service.s3' => 'getSonata_Media_Adapter_Service_S3Service',
            'sonata.media.admin.gallery' => 'getSonata_Media_Admin_GalleryService',
            'sonata.media.admin.gallery.template_registry' => 'getSonata_Media_Admin_Gallery_TemplateRegistryService',
            'sonata.media.admin.gallery_has_media' => 'getSonata_Media_Admin_GalleryHasMediaService',
            'sonata.media.admin.gallery_has_media.template_registry' => 'getSonata_Media_Admin_GalleryHasMedia_TemplateRegistryService',
            'sonata.media.admin.media' => 'getSonata_Media_Admin_MediaService',
            'sonata.media.admin.media.manager' => 'getSonata_Media_Admin_Media_ManagerService',
            'sonata.media.admin.media.template_registry' => 'getSonata_Media_Admin_Media_TemplateRegistryService',
            'sonata.media.api.form.type.doctrine.media' => 'getSonata_Media_Api_Form_Type_Doctrine_MediaService',
            'sonata.media.api.form.type.gallery' => 'getSonata_Media_Api_Form_Type_GalleryService',
            'sonata.media.api.form.type.gallery_has_media' => 'getSonata_Media_Api_Form_Type_GalleryHasMediaService',
            'sonata.media.api.form.type.media' => 'getSonata_Media_Api_Form_Type_MediaService',
            'sonata.media.block.feature_media' => 'getSonata_Media_Block_FeatureMediaService',
            'sonata.media.block.gallery' => 'getSonata_Media_Block_GalleryService',
            'sonata.media.block.gallery_list' => 'getSonata_Media_Block_GalleryListService',
            'sonata.media.block.media' => 'getSonata_Media_Block_MediaService',
            'sonata.media.buzz.browser' => 'getSonata_Media_Buzz_BrowserService',
            'sonata.media.buzz.connector.curl' => 'getSonata_Media_Buzz_Connector_CurlService',
            'sonata.media.buzz.connector.file_get_contents' => 'getSonata_Media_Buzz_Connector_FileGetContentsService',
            'sonata.media.cdn.server' => 'getSonata_Media_Cdn_ServerService',
            'sonata.media.controller.api.gallery' => 'getSonata_Media_Controller_Api_GalleryService',
            'sonata.media.controller.api.media' => 'getSonata_Media_Controller_Api_MediaService',
            'sonata.media.doctrine.event_subscriber' => 'getSonata_Media_Doctrine_EventSubscriberService',
            'sonata.media.extra.pixlr' => 'getSonata_Media_Extra_PixlrService',
            'sonata.media.filesystem.local' => 'getSonata_Media_Filesystem_LocalService',
            'sonata.media.form.type.media' => 'getSonata_Media_Form_Type_MediaService',
            'sonata.media.formatter.twig' => 'getSonata_Media_Formatter_TwigService',
            'sonata.media.generator.default' => 'getSonata_Media_Generator_DefaultService',
            'sonata.media.manager.category.default' => 'getSonata_Media_Manager_Category_DefaultService',
            'sonata.media.manager.gallery' => 'getSonata_Media_Manager_GalleryService',
            'sonata.media.manager.media' => 'getSonata_Media_Manager_MediaService',
            'sonata.media.metadata.amazon' => 'getSonata_Media_Metadata_AmazonService',
            'sonata.media.metadata.noop' => 'getSonata_Media_Metadata_NoopService',
            'sonata.media.metadata.proxy' => 'getSonata_Media_Metadata_ProxyService',
            'sonata.media.pool' => 'getSonata_Media_PoolService',
            'sonata.media.provider.dailymotion' => 'getSonata_Media_Provider_DailymotionService',
            'sonata.media.provider.file' => 'getSonata_Media_Provider_FileService',
            'sonata.media.provider.image' => 'getSonata_Media_Provider_ImageService',
            'sonata.media.provider.vimeo' => 'getSonata_Media_Provider_VimeoService',
            'sonata.media.provider.youtube' => 'getSonata_Media_Provider_YoutubeService',
            'sonata.media.resizer.simple' => 'getSonata_Media_Resizer_SimpleService',
            'sonata.media.resizer.square' => 'getSonata_Media_Resizer_SquareService',
            'sonata.media.security.connected_strategy' => 'getSonata_Media_Security_ConnectedStrategyService',
            'sonata.media.security.forbidden_strategy' => 'getSonata_Media_Security_ForbiddenStrategyService',
            'sonata.media.security.public_strategy' => 'getSonata_Media_Security_PublicStrategyService',
            'sonata.media.security.session_strategy' => 'getSonata_Media_Security_SessionStrategyService',
            'sonata.media.security.superadmin_strategy' => 'getSonata_Media_Security_SuperadminStrategyService',
            'sonata.media.serializer.handler.gallery' => 'getSonata_Media_Serializer_Handler_GalleryService',
            'sonata.media.serializer.handler.media' => 'getSonata_Media_Serializer_Handler_MediaService',
            'sonata.media.thumbnail.format' => 'getSonata_Media_Thumbnail_FormatService',
            'sonata.media.thumbnail.liip_imagine' => 'getSonata_Media_Thumbnail_LiipImagineService',
            'sonata.media.twig.extension' => 'getSonata_Media_Twig_ExtensionService',
            'sonata.media.twig.global' => 'getSonata_Media_Twig_GlobalService',
            'sonata.media.validator.format' => 'getSonata_Media_Validator_FormatService',
            'sonata.templating' => 'getSonata_TemplatingService',
            'sonata.templating.locator' => 'getSonata_Templating_LocatorService',
            'sonata.templating.name_parser' => 'getSonata_Templating_NameParserService',
            'sonata.user.admin.group' => 'getSonata_User_Admin_GroupService',
            'sonata.user.admin.group.template_registry' => 'getSonata_User_Admin_Group_TemplateRegistryService',
            'sonata.user.admin.user' => 'getSonata_User_Admin_UserService',
            'sonata.user.admin.user.template_registry' => 'getSonata_User_Admin_User_TemplateRegistryService',
            'sonata.user.api.form.type.group' => 'getSonata_User_Api_Form_Type_GroupService',
            'sonata.user.api.form.type.user' => 'getSonata_User_Api_Form_Type_UserService',
            'sonata.user.block.account' => 'getSonata_User_Block_AccountService',
            'sonata.user.block.menu' => 'getSonata_User_Block_MenuService',
            'sonata.user.controller.api.group' => 'getSonata_User_Controller_Api_GroupService',
            'sonata.user.controller.api.user' => 'getSonata_User_Controller_Api_UserService',
            'sonata.user.editable_role_builder' => 'getSonata_User_EditableRoleBuilderService',
            'sonata.user.form.gender_list' => 'getSonata_User_Form_GenderListService',
            'sonata.user.form.type.security_roles' => 'getSonata_User_Form_Type_SecurityRolesService',
            'sonata.user.manager.user' => 'getSonata_User_Manager_UserService',
            'sonata.user.profile.form' => 'getSonata_User_Profile_FormService',
            'sonata.user.profile.form.handler' => 'getSonata_User_Profile_Form_HandlerService',
            'sonata.user.profile.form.type' => 'getSonata_User_Profile_Form_TypeService',
            'sonata.user.profile.menu_builder' => 'getSonata_User_Profile_MenuBuilderService',
            'sonata.user.registration.form' => 'getSonata_User_Registration_FormService',
            'sonata.user.registration.form.type' => 'getSonata_User_Registration_Form_TypeService',
            'sonata.user.serializer.handler.user' => 'getSonata_User_Serializer_Handler_UserService',
            'sonata.user.twig.global' => 'getSonata_User_Twig_GlobalService',
            'streamed_response_listener' => 'getStreamedResponseListenerService',
            'swiftmailer.email_sender.listener' => 'getSwiftmailer_EmailSender_ListenerService',
            'swiftmailer.mailer.default' => 'getSwiftmailer_Mailer_DefaultService',
            'swiftmailer.mailer.default.plugin.messagelogger' => 'getSwiftmailer_Mailer_Default_Plugin_MessageloggerService',
            'swiftmailer.mailer.default.spool' => 'getSwiftmailer_Mailer_Default_SpoolService',
            'swiftmailer.mailer.default.transport' => 'getSwiftmailer_Mailer_Default_TransportService',
            'swiftmailer.mailer.default.transport.eventdispatcher' => 'getSwiftmailer_Mailer_Default_Transport_EventdispatcherService',
            'swiftmailer.mailer.default.transport.real' => 'getSwiftmailer_Mailer_Default_Transport_RealService',
            'templating' => 'getTemplatingService',
            'templating.filename_parser' => 'getTemplating_FilenameParserService',
            'templating.helper.logout_url' => 'getTemplating_Helper_LogoutUrlService',
            'templating.helper.markdown' => 'getTemplating_Helper_MarkdownService',
            'templating.helper.security' => 'getTemplating_Helper_SecurityService',
            'templating.loader' => 'getTemplating_LoaderService',
            'templating.locator' => 'getTemplating_LocatorService',
            'templating.name_parser' => 'getTemplating_NameParserService',
            'translation.dumper.csv' => 'getTranslation_Dumper_CsvService',
            'translation.dumper.ini' => 'getTranslation_Dumper_IniService',
            'translation.dumper.json' => 'getTranslation_Dumper_JsonService',
            'translation.dumper.mo' => 'getTranslation_Dumper_MoService',
            'translation.dumper.php' => 'getTranslation_Dumper_PhpService',
            'translation.dumper.po' => 'getTranslation_Dumper_PoService',
            'translation.dumper.qt' => 'getTranslation_Dumper_QtService',
            'translation.dumper.res' => 'getTranslation_Dumper_ResService',
            'translation.dumper.xliff' => 'getTranslation_Dumper_XliffService',
            'translation.dumper.yml' => 'getTranslation_Dumper_YmlService',
            'translation.extractor' => 'getTranslation_ExtractorService',
            'translation.extractor.php' => 'getTranslation_Extractor_PhpService',
            'translation.loader' => 'getTranslation_LoaderService',
            'translation.loader.csv' => 'getTranslation_Loader_CsvService',
            'translation.loader.dat' => 'getTranslation_Loader_DatService',
            'translation.loader.ini' => 'getTranslation_Loader_IniService',
            'translation.loader.json' => 'getTranslation_Loader_JsonService',
            'translation.loader.mo' => 'getTranslation_Loader_MoService',
            'translation.loader.php' => 'getTranslation_Loader_PhpService',
            'translation.loader.po' => 'getTranslation_Loader_PoService',
            'translation.loader.qt' => 'getTranslation_Loader_QtService',
            'translation.loader.res' => 'getTranslation_Loader_ResService',
            'translation.loader.xliff' => 'getTranslation_Loader_XliffService',
            'translation.loader.yml' => 'getTranslation_Loader_YmlService',
            'translation.writer' => 'getTranslation_WriterService',
            'translator' => 'getTranslatorService',
            'translator.default' => 'getTranslator_DefaultService',
            'translator_listener' => 'getTranslatorListenerService',
            'twig' => 'getTwigService',
            'twig.audit.extension' => 'getTwig_Audit_ExtensionService',
            'twig.controller.exception' => 'getTwig_Controller_ExceptionService',
            'twig.controller.preview_error' => 'getTwig_Controller_PreviewErrorService',
            'twig.exception_listener' => 'getTwig_ExceptionListenerService',
            'twig.form.renderer' => 'getTwig_Form_RendererService',
            'twig.loader' => 'getTwig_LoaderService',
            'twig.profile' => 'getTwig_ProfileService',
            'twig.runtime.httpkernel' => 'getTwig_Runtime_HttpkernelService',
            'twig.translation.extractor' => 'getTwig_Translation_ExtractorService',
            'uri_signer' => 'getUriSignerService',
            'validate_request_listener' => 'getValidateRequestListenerService',
            'validator' => 'getValidatorService',
            'validator.builder' => 'getValidator_BuilderService',
            'validator.email' => 'getValidator_EmailService',
            'validator.expression' => 'getValidator_ExpressionService',
            'validator.validator_factory' => 'getValidator_ValidatorFactoryService',
            'var_dumper.cli_dumper' => 'getVarDumper_CliDumperService',
            'var_dumper.cloner' => 'getVarDumper_ClonerService',
            'web_profiler.controller.exception' => 'getWebProfiler_Controller_ExceptionService',
            'web_profiler.controller.profiler' => 'getWebProfiler_Controller_ProfilerService',
            'web_profiler.controller.router' => 'getWebProfiler_Controller_RouterService',
            'web_profiler.csp.handler' => 'getWebProfiler_Csp_HandlerService',
            'web_profiler.debug_toolbar' => 'getWebProfiler_DebugToolbarService',
            'white_october_pagerfanta.view_factory' => 'getWhiteOctoberPagerfanta_ViewFactoryService',
        );
        $this->privates = array(
            '1_c96ae0422b1c97f376c0bdbe6aae9aae67afb2b1a5eb7f331b0f8109dcf05b7f' => true,
            '2_c96ae0422b1c97f376c0bdbe6aae9aae67afb2b1a5eb7f331b0f8109dcf05b7f' => true,
            'annotations.cache' => true,
            'annotations.reader' => true,
            'argument_resolver.default' => true,
            'argument_resolver.request' => true,
            'argument_resolver.request_attribute' => true,
            'argument_resolver.service' => true,
            'argument_resolver.session' => true,
            'argument_resolver.variadic' => true,
            'cache.annotations' => true,
            'cache.annotations.recorder_inner' => true,
            'cache.app.recorder_inner' => true,
            'cache.serializer.recorder_inner' => true,
            'cache.system.recorder_inner' => true,
            'cache.validator' => true,
            'cache.validator.recorder_inner' => true,
            'console.error_listener' => true,
            'controller_name_converter' => true,
            'debug.file_link_formatter' => true,
            'debug.log_processor' => true,
            'doctrine.dbal.logger.profiling.default' => true,
            'form.server_params' => true,
            'fos_rest.exception.codes_map' => true,
            'fos_rest.request.param_fetcher.reader' => true,
            'fos_rest.serializer.jms_handler_registry.inner' => true,
            'fos_user.object_manager' => true,
            'fos_user.user_provider.username' => true,
            'fos_user.util.canonical_fields_updater' => true,
            'fos_user.util.password_updater' => true,
            'hateoas.configuration.relations_repository' => true,
            'hateoas.embeds_factory' => true,
            'hateoas.link_factory' => true,
            'hateoas.links_factory' => true,
            'jms_serializer.metadata.file_locator' => true,
            'jms_serializer.metadata_factory' => true,
            'jms_serializer.unserialize_object_constructor' => true,
            'knp_menu.menu_provider.builder_alias' => true,
            'knp_menu.menu_provider.lazy' => true,
            'lexik_jwt_authentication.security.authentication.entry_point.api' => true,
            'markdown.parser.parser_manager' => true,
            'resolve_controller_name_subscriber' => true,
            'router.request_context' => true,
            'security.access.authenticated_voter' => true,
            'security.access.expression_voter' => true,
            'security.access.role_hierarchy_voter' => true,
            'security.access_listener' => true,
            'security.access_map' => true,
            'security.authentication.listener.jwt.api' => true,
            'security.authentication.manager' => true,
            'security.authentication.provider.anonymous.admin' => true,
            'security.authentication.provider.anonymous.api_docs' => true,
            'security.authentication.provider.anonymous.api_login' => true,
            'security.authentication.provider.anonymous.api_token_refresh' => true,
            'security.authentication.provider.anonymous.main' => true,
            'security.authentication.provider.dao.admin' => true,
            'security.authentication.provider.dao.api_login' => true,
            'security.authentication.provider.dao.main' => true,
            'security.authentication.provider.jwt.api' => true,
            'security.authentication.provider.rememberme.main' => true,
            'security.authentication.rememberme.services.simplehash.main' => true,
            'security.authentication.session_strategy' => true,
            'security.authentication.trust_resolver' => true,
            'security.channel_listener' => true,
            'security.context_listener.0' => true,
            'security.extra.metadata_factory' => true,
            'security.firewall.map' => true,
            'security.http_utils' => true,
            'security.logout.handler.session' => true,
            'security.logout_url_generator' => true,
            'security.request_matcher.6192eb66f667b945c5faa9068fbc96bd7724861bdcab98d92c6625b683ff302aff6d14d1' => true,
            'security.request_matcher.696d471d5730f1bcec02c3783880cea90d37764b964a7f52f71cf02d6f8bacb4f24ccd69' => true,
            'security.request_matcher.7ac43c2928bafe5e56041919eb68135d15908028f87b29ff662dd62c7dfc4828c2b84310' => true,
            'security.request_matcher.7cfa9b08003afaadb4ea3bcbe010a26276dbfcad3be257643ceb6b25a29b80166d7d63fd' => true,
            'security.request_matcher.83414b4f59ab53f8865b08d5074e037efbb06e57ccba58ede5e1ed417a9ddcd1b645c11b' => true,
            'security.request_matcher.bc5225be894e901e543ffcf3380500276da6125173096f94adf786461ce2e0f193452c7f' => true,
            'security.request_matcher.f3ac44e1614cf5ff5908eb685aac69fdb2e0fb89eced77a37757f1a693fb469818019bc6' => true,
            'security.user_checker' => true,
            'security.user_value_resolver' => true,
            'service_locator.182f5c5b079727c046caf1a16a7b23a8' => true,
            'service_locator.cc2b70dfe28c491d5d4736dc8913e9ae' => true,
            'session.storage.metadata_bag' => true,
            'sonata.admin.menu.group_provider' => true,
            'sonata.formatter.twig.env.markdown' => true,
            'sonata.formatter.twig.env.rawhtml' => true,
            'sonata.formatter.twig.env.richhtml' => true,
            'sonata.formatter.twig.env.text' => true,
            'swiftmailer.mailer.default.transport.eventdispatcher' => true,
            'templating.locator' => true,
            'validator.validator_factory' => true,
            'web_profiler.csp.handler' => true,
        );
        $this->aliases = array(
            'FOS\\RestBundle\\Request\\ParamFetcherInterface' => 'fos_rest.request.param_fetcher',
            'Knp\\Bundle\\MarkdownBundle\\MarkdownParserInterface' => 'markdown.parser',
            'Knp\\Component\\Pager\\PaginatorInterface' => 'knp_paginator',
            'Lexik\\Bundle\\JWTAuthenticationBundle\\Encoder\\JWTEncoderInterface' => 'lexik_jwt_authentication.encoder.default',
            'Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Http\\Authentication\\AuthenticationFailureHandler' => 'lexik_jwt_authentication.handler.authentication_failure',
            'Lexik\\Bundle\\JWTAuthenticationBundle\\Security\\Http\\Authentication\\AuthenticationSuccessHandler' => 'lexik_jwt_authentication.handler.authentication_success',
            'Lexik\\Bundle\\JWTAuthenticationBundle\\Services\\JWTTokenInterface' => 'lexik_jwt_authentication.jwt_manager',
            'Lexik\\Bundle\\JWTAuthenticationBundle\\Services\\JWTTokenManagerInterface' => 'lexik_jwt_authentication.jwt_manager',
            'Michelf\\MarkdownInterface' => 'markdown.parser',
            'Sonata\\AdminBundle\\Admin\\Pool' => 'sonata.admin.pool',
            'cache.app_clearer' => 'cache.default_clearer',
            'database_connection' => 'doctrine.dbal.default_connection',
            'doctrine.orm.default_metadata_cache' => 'doctrine_cache.providers.doctrine.orm.default_metadata_cache',
            'doctrine.orm.default_query_cache' => 'doctrine_cache.providers.doctrine.orm.default_query_cache',
            'doctrine.orm.default_result_cache' => 'doctrine_cache.providers.doctrine.orm.default_result_cache',
            'doctrine.orm.entity_manager' => 'doctrine.orm.default_entity_manager',
            'event_dispatcher' => 'debug.event_dispatcher',
            'fos_rest.router' => 'router',
            'fos_rest.serializer.jms_handler_registry' => 'jms_serializer.handler_registry',
            'fos_rest.templating' => 'templating',
            'fos_rest.validator' => 'validator',
            'fos_user.util.username_canonicalizer' => 'fos_user.util.email_canonicalizer',
            'gesdinet.jwtrefreshtoken.entity_manager' => 'doctrine.orm.default_entity_manager',
            'lexik_jwt_authentication.encoder' => 'lexik_jwt_authentication.encoder.default',
            'lexik_jwt_authentication.jwt_token_authenticator' => 'lexik_jwt_authentication.security.guard.jwt_token_authenticator',
            'mailer' => 'swiftmailer.mailer.default',
            'session.storage' => 'session.storage.native',
            'sonata.block.cache.handler' => 'sonata.block.cache.handler.default',
            'sonata.block.context_manager' => 'sonata.block.context_manager.default',
            'sonata.block.renderer' => 'sonata.block.renderer.default',
            'sonata.intl.locale_detector' => 'sonata.intl.locale_detector.request_stack',
            'sonata.intl.timezone_detector' => 'sonata.intl.timezone_detector.chain',
            'sonata.media.adapter.image.default' => 'sonata.media.adapter.image.gd',
            'sonata.media.manager.category' => 'sonata.media.manager.category.default',
            'sonata.media.resizer.default' => 'sonata.media.resizer.simple',
            'sonata.user.group_manager' => 'fos_user.group_manager',
            'sonata.user.user_manager' => 'fos_user.user_manager',
            'swiftmailer.mailer' => 'swiftmailer.mailer.default',
            'swiftmailer.plugin.messagelogger' => 'swiftmailer.mailer.default.plugin.messagelogger',
            'swiftmailer.spool' => 'swiftmailer.mailer.default.spool',
            'swiftmailer.transport' => 'swiftmailer.mailer.default.transport',
            'swiftmailer.transport.real' => 'swiftmailer.mailer.default.transport.real',
        );
    }

    /**
     * {@inheritdoc}
     */
    public function compile()
    {
        throw new LogicException('You cannot compile a dumped container that was already compiled.');
    }

    /**
     * {@inheritdoc}
     */
    public function isCompiled()
    {
        return true;
    }

    /**
     * {@inheritdoc}
     */
    public function isFrozen()
    {
        @trigger_error(sprintf('The %s() method is deprecated since Symfony 3.3 and will be removed in 4.0. Use the isCompiled() method instead.', __METHOD__), E_USER_DEPRECATED);

        return true;
    }

    /**
     * Gets the public 'AppBundle\Controller\Api\SecurityApiController' shared autowired service.
     *
     * @return \AppBundle\Controller\Api\SecurityApiController
     */
    protected function getAppBundle_Controller_Api_SecurityApiControllerService()
    {
        return $this->services['AppBundle\Controller\Api\SecurityApiController'] = new \AppBundle\Controller\Api\SecurityApiController();
    }

    /**
     * Gets the public 'AppBundle\Controller\ContratoAgenciaController' shared autowired service.
     *
     * @return \AppBundle\Controller\ContratoAgenciaController
     */
    protected function getAppBundle_Controller_ContratoAgenciaControllerService()
    {
        return $this->services['AppBundle\Controller\ContratoAgenciaController'] = new \AppBundle\Controller\ContratoAgenciaController();
    }

    /**
     * Gets the public 'AppBundle\Controller\DefaultController' shared autowired service.
     *
     * @return \AppBundle\Controller\DefaultController
     */
    protected function getAppBundle_Controller_DefaultControllerService()
    {
        return $this->services['AppBundle\Controller\DefaultController'] = new \AppBundle\Controller\DefaultController();
    }

    /**
     * Gets the public 'FOS\RestBundle\View\ViewHandlerInterface' shared service.
     *
     * @return \FOS\RestBundle\View\ViewHandler
     */
    protected function getFOS_RestBundle_View_ViewHandlerInterfaceService()
    {
        $this->services['FOS\RestBundle\View\ViewHandlerInterface'] = $instance = new \FOS\RestBundle\View\ViewHandler(${($_ = isset($this->services['router']) ? $this->services['router'] : $this->get('router')) && false ?: '_'}, ${($_ = isset($this->services['fos_rest.serializer']) ? $this->services['fos_rest.serializer'] : $this->get('fos_rest.serializer')) && false ?: '_'}, ${($_ = isset($this->services['templating']) ? $this->services['templating'] : $this->get('templating', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, ${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'}, array('json' => false, 'html' => true), 400, 204, false, array('html' => 302), 'twig');

        $instance->setSerializeNullStrategy(false);

        return $instance;
    }

    /**
     * Gets the public 'Lexik\Bundle\JWTAuthenticationBundle\Services\JWSProvider\JWSProviderInterface' shared service.
     *
     * @return \Lexik\Bundle\JWTAuthenticationBundle\Services\JWSProvider\DefaultJWSProvider
     */
    protected function getLexik_Bundle_JWTAuthenticationBundle_Services_JWSProvider_JWSProviderInterfaceService()
    {
        return $this->services['Lexik\Bundle\JWTAuthenticationBundle\Services\JWSProvider\JWSProviderInterface'] = new \Lexik\Bundle\JWTAuthenticationBundle\Services\JWSProvider\DefaultJWSProvider(${($_ = isset($this->services['lexik_jwt_authentication.key_loader']) ? $this->services['lexik_jwt_authentication.key_loader'] : $this->get('lexik_jwt_authentication.key_loader')) && false ?: '_'}, 'openssl', 'RS256', 86400);
    }

    /**
     * Gets the public 'Lexik\Bundle\JWTAuthenticationBundle\TokenExtractor\TokenExtractorInterface' shared service.
     *
     * @return \Lexik\Bundle\JWTAuthenticationBundle\TokenExtractor\ChainTokenExtractor
     */
    protected function getLexik_Bundle_JWTAuthenticationBundle_TokenExtractor_TokenExtractorInterfaceService()
    {
        return $this->services['Lexik\Bundle\JWTAuthenticationBundle\TokenExtractor\TokenExtractorInterface'] = new \Lexik\Bundle\JWTAuthenticationBundle\TokenExtractor\ChainTokenExtractor(array(0 => ${($_ = isset($this->services['lexik_jwt_authentication.extractor.authorization_header_extractor']) ? $this->services['lexik_jwt_authentication.extractor.authorization_header_extractor'] : $this->get('lexik_jwt_authentication.extractor.authorization_header_extractor')) && false ?: '_'}));
    }

    /**
     * Gets the public 'Sonata\AdminBundle\Command\CreateClassCacheCommand' shared service.
     *
     * @return \Sonata\AdminBundle\Command\CreateClassCacheCommand
     */
    protected function getSonata_AdminBundle_Command_CreateClassCacheCommandService()
    {
        return $this->services['Sonata\AdminBundle\Command\CreateClassCacheCommand'] = new \Sonata\AdminBundle\Command\CreateClassCacheCommand();
    }

    /**
     * Gets the public 'Sonata\AdminBundle\Command\ExplainAdminCommand' shared service.
     *
     * @return \Sonata\AdminBundle\Command\ExplainAdminCommand
     */
    protected function getSonata_AdminBundle_Command_ExplainAdminCommandService()
    {
        return $this->services['Sonata\AdminBundle\Command\ExplainAdminCommand'] = new \Sonata\AdminBundle\Command\ExplainAdminCommand();
    }

    /**
     * Gets the public 'Sonata\AdminBundle\Command\GenerateAdminCommand' shared service.
     *
     * @return \Sonata\AdminBundle\Command\GenerateAdminCommand
     */
    protected function getSonata_AdminBundle_Command_GenerateAdminCommandService()
    {
        return $this->services['Sonata\AdminBundle\Command\GenerateAdminCommand'] = new \Sonata\AdminBundle\Command\GenerateAdminCommand();
    }

    /**
     * Gets the public 'Sonata\AdminBundle\Command\GenerateObjectAclCommand' shared service.
     *
     * @return \Sonata\AdminBundle\Command\GenerateObjectAclCommand
     */
    protected function getSonata_AdminBundle_Command_GenerateObjectAclCommandService()
    {
        return $this->services['Sonata\AdminBundle\Command\GenerateObjectAclCommand'] = new \Sonata\AdminBundle\Command\GenerateObjectAclCommand();
    }

    /**
     * Gets the public 'Sonata\AdminBundle\Command\ListAdminCommand' shared service.
     *
     * @return \Sonata\AdminBundle\Command\ListAdminCommand
     */
    protected function getSonata_AdminBundle_Command_ListAdminCommandService()
    {
        return $this->services['Sonata\AdminBundle\Command\ListAdminCommand'] = new \Sonata\AdminBundle\Command\ListAdminCommand();
    }

    /**
     * Gets the public 'Sonata\AdminBundle\Command\SetupAclCommand' shared service.
     *
     * @return \Sonata\AdminBundle\Command\SetupAclCommand
     */
    protected function getSonata_AdminBundle_Command_SetupAclCommandService()
    {
        return $this->services['Sonata\AdminBundle\Command\SetupAclCommand'] = new \Sonata\AdminBundle\Command\SetupAclCommand();
    }

    /**
     * Gets the public 'Sonata\BlockBundle\Command\DebugBlocksCommand' shared service.
     *
     * @return \Sonata\BlockBundle\Command\DebugBlocksCommand
     */
    protected function getSonata_BlockBundle_Command_DebugBlocksCommandService()
    {
        return $this->services['Sonata\BlockBundle\Command\DebugBlocksCommand'] = new \Sonata\BlockBundle\Command\DebugBlocksCommand();
    }

    /**
     * Gets the public 'Sonata\CoreBundle\Command\SonataDumpDoctrineMetaCommand' shared service.
     *
     * @return \Sonata\CoreBundle\Command\SonataDumpDoctrineMetaCommand
     */
    protected function getSonata_CoreBundle_Command_SonataDumpDoctrineMetaCommandService()
    {
        return $this->services['Sonata\CoreBundle\Command\SonataDumpDoctrineMetaCommand'] = new \Sonata\CoreBundle\Command\SonataDumpDoctrineMetaCommand();
    }

    /**
     * Gets the public 'Sonata\CoreBundle\Command\SonataListFormMappingCommand' shared service.
     *
     * @return \Sonata\CoreBundle\Command\SonataListFormMappingCommand
     */
    protected function getSonata_CoreBundle_Command_SonataListFormMappingCommandService()
    {
        return $this->services['Sonata\CoreBundle\Command\SonataListFormMappingCommand'] = new \Sonata\CoreBundle\Command\SonataListFormMappingCommand();
    }

    /**
     * Gets the public 'Sonata\EasyExtendsBundle\Command\DumpMappingCommand' shared service.
     *
     * @return \Sonata\EasyExtendsBundle\Command\DumpMappingCommand
     */
    protected function getSonata_EasyExtendsBundle_Command_DumpMappingCommandService()
    {
        return $this->services['Sonata\EasyExtendsBundle\Command\DumpMappingCommand'] = new \Sonata\EasyExtendsBundle\Command\DumpMappingCommand();
    }

    /**
     * Gets the public 'Sonata\EasyExtendsBundle\Command\GenerateCommand' shared service.
     *
     * @return \Sonata\EasyExtendsBundle\Command\GenerateCommand
     */
    protected function getSonata_EasyExtendsBundle_Command_GenerateCommandService()
    {
        return $this->services['Sonata\EasyExtendsBundle\Command\GenerateCommand'] = new \Sonata\EasyExtendsBundle\Command\GenerateCommand();
    }

    /**
     * Gets the public 'Sonata\MediaBundle\Command\AddMassMediaCommand' shared service.
     *
     * @return \Sonata\MediaBundle\Command\AddMassMediaCommand
     */
    protected function getSonata_MediaBundle_Command_AddMassMediaCommandService()
    {
        return $this->services['Sonata\MediaBundle\Command\AddMassMediaCommand'] = new \Sonata\MediaBundle\Command\AddMassMediaCommand();
    }

    /**
     * Gets the public 'Sonata\MediaBundle\Command\AddMediaCommand' shared service.
     *
     * @return \Sonata\MediaBundle\Command\AddMediaCommand
     */
    protected function getSonata_MediaBundle_Command_AddMediaCommandService()
    {
        return $this->services['Sonata\MediaBundle\Command\AddMediaCommand'] = new \Sonata\MediaBundle\Command\AddMediaCommand();
    }

    /**
     * Gets the public 'Sonata\MediaBundle\Command\CleanMediaCommand' shared service.
     *
     * @return \Sonata\MediaBundle\Command\CleanMediaCommand
     */
    protected function getSonata_MediaBundle_Command_CleanMediaCommandService()
    {
        return $this->services['Sonata\MediaBundle\Command\CleanMediaCommand'] = new \Sonata\MediaBundle\Command\CleanMediaCommand();
    }

    /**
     * Gets the public 'Sonata\MediaBundle\Command\FixMediaContextCommand' shared service.
     *
     * @return \Sonata\MediaBundle\Command\FixMediaContextCommand
     */
    protected function getSonata_MediaBundle_Command_FixMediaContextCommandService()
    {
        return $this->services['Sonata\MediaBundle\Command\FixMediaContextCommand'] = new \Sonata\MediaBundle\Command\FixMediaContextCommand();
    }

    /**
     * Gets the public 'Sonata\MediaBundle\Command\MigrateToJsonTypeCommand' shared service.
     *
     * @return \Sonata\MediaBundle\Command\MigrateToJsonTypeCommand
     */
    protected function getSonata_MediaBundle_Command_MigrateToJsonTypeCommandService()
    {
        return $this->services['Sonata\MediaBundle\Command\MigrateToJsonTypeCommand'] = new \Sonata\MediaBundle\Command\MigrateToJsonTypeCommand();
    }

    /**
     * Gets the public 'Sonata\MediaBundle\Command\RefreshMetadataCommand' shared service.
     *
     * @return \Sonata\MediaBundle\Command\RefreshMetadataCommand
     */
    protected function getSonata_MediaBundle_Command_RefreshMetadataCommandService()
    {
        return $this->services['Sonata\MediaBundle\Command\RefreshMetadataCommand'] = new \Sonata\MediaBundle\Command\RefreshMetadataCommand();
    }

    /**
     * Gets the public 'Sonata\MediaBundle\Command\RemoveThumbsCommand' shared service.
     *
     * @return \Sonata\MediaBundle\Command\RemoveThumbsCommand
     */
    protected function getSonata_MediaBundle_Command_RemoveThumbsCommandService()
    {
        return $this->services['Sonata\MediaBundle\Command\RemoveThumbsCommand'] = new \Sonata\MediaBundle\Command\RemoveThumbsCommand();
    }

    /**
     * Gets the public 'Sonata\MediaBundle\Command\SyncThumbsCommand' shared service.
     *
     * @return \Sonata\MediaBundle\Command\SyncThumbsCommand
     */
    protected function getSonata_MediaBundle_Command_SyncThumbsCommandService()
    {
        return $this->services['Sonata\MediaBundle\Command\SyncThumbsCommand'] = new \Sonata\MediaBundle\Command\SyncThumbsCommand();
    }

    /**
     * Gets the public 'Sonata\MediaBundle\Command\UpdateCdnStatusCommand' shared service.
     *
     * @return \Sonata\MediaBundle\Command\UpdateCdnStatusCommand
     */
    protected function getSonata_MediaBundle_Command_UpdateCdnStatusCommandService()
    {
        return $this->services['Sonata\MediaBundle\Command\UpdateCdnStatusCommand'] = new \Sonata\MediaBundle\Command\UpdateCdnStatusCommand();
    }

    /**
     * Gets the public 'annotation_reader' shared service.
     *
     * @return \Doctrine\Common\Annotations\CachedReader
     */
    protected function getAnnotationReaderService()
    {
        $this->services['annotation_reader'] = $instance = new \Doctrine\Common\Annotations\CachedReader(${($_ = isset($this->services['annotations.reader']) ? $this->services['annotations.reader'] : $this->getAnnotations_ReaderService()) && false ?: '_'}, new \Doctrine\Common\Cache\ArrayCache(), true);

        $instance->cacheProviderBackup = function () {
            return ${($_ = isset($this->services['annotations.cache']) ? $this->services['annotations.cache'] : $this->getAnnotations_CacheService()) && false ?: '_'};
        };

        return $instance;
    }

    /**
     * Gets the public 'app.admin.anexo1.contrato.areas.internet' service.
     *
     * @return \AppBundle\Admin\anexo1_contrato_areas_internetAdmin
     */
    protected function getApp_Admin_Anexo1_Contrato_Areas_InternetService()
    {
        $instance = new \AppBundle\Admin\anexo1_contrato_areas_internetAdmin('app.admin.anexo1.contrato.areas.internet', 'AppBundle\\Entity\\anexo1_contrato_areas_internet', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Tarifas y Distribución de Ingresos.');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.anexo1.contrato.areas.internet.template_registry']) ? $this->services['app.admin.anexo1.contrato.areas.internet.template_registry'] : $this->get('app.admin.anexo1.contrato.areas.internet.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.anexo1.contrato.areas.internet.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Anexo1_Contrato_Areas_Internet_TemplateRegistryService()
    {
        return $this->services['app.admin.anexo1.contrato.areas.internet.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.anexo1.contrato.arrendamiento.espacios' service.
     *
     * @return \AppBundle\Admin\anexo1_contrato_arrendamiento_espaciosAdmin
     */
    protected function getApp_Admin_Anexo1_Contrato_Arrendamiento_EspaciosService()
    {
        $instance = new \AppBundle\Admin\anexo1_contrato_arrendamiento_espaciosAdmin('app.admin.anexo1.contrato.arrendamiento.espacios', 'AppBundle\\Entity\\anexo1_contrato_arrendamiento_espacios', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Anexo 1 Contrato Arrendamiento de Espacios');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.anexo1.contrato.arrendamiento.espacios.template_registry']) ? $this->services['app.admin.anexo1.contrato.arrendamiento.espacios.template_registry'] : $this->get('app.admin.anexo1.contrato.arrendamiento.espacios.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.anexo1.contrato.arrendamiento.espacios.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Anexo1_Contrato_Arrendamiento_Espacios_TemplateRegistryService()
    {
        return $this->services['app.admin.anexo1.contrato.arrendamiento.espacios.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.anexo1.contrato.arrendamiento.pizarras.privadas.pbx' service.
     *
     * @return \AppBundle\Admin\anexo1_contrato_arrendamiento_pizarras_privadas_pbxAdmin
     */
    protected function getApp_Admin_Anexo1_Contrato_Arrendamiento_Pizarras_Privadas_PbxService()
    {
        $instance = new \AppBundle\Admin\anexo1_contrato_arrendamiento_pizarras_privadas_pbxAdmin('app.admin.anexo1.contrato.arrendamiento.pizarras.privadas.pbx', 'AppBundle\\Entity\\anexo1_contrato_arrendamiento_pizarras_privadas_pbx', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Anexo 1 Contrato Arrendamiento Pizarras');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.anexo1.contrato.arrendamiento.pizarras.privadas.pbx.template_registry']) ? $this->services['app.admin.anexo1.contrato.arrendamiento.pizarras.privadas.pbx.template_registry'] : $this->get('app.admin.anexo1.contrato.arrendamiento.pizarras.privadas.pbx.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.anexo1.contrato.arrendamiento.pizarras.privadas.pbx.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Anexo1_Contrato_Arrendamiento_Pizarras_Privadas_Pbx_TemplateRegistryService()
    {
        return $this->services['app.admin.anexo1.contrato.arrendamiento.pizarras.privadas.pbx.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.anexo1.contrato.arrendamiento.redes' service.
     *
     * @return \AppBundle\Admin\anexo1_contrato_arrendamiento_redesAdmin
     */
    protected function getApp_Admin_Anexo1_Contrato_Arrendamiento_RedesService()
    {
        $instance = new \AppBundle\Admin\anexo1_contrato_arrendamiento_redesAdmin('app.admin.anexo1.contrato.arrendamiento.redes', 'AppBundle\\Entity\\anexo1_contrato_arrendamiento_redes', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Tarifas para el arrendamiento de Redes');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.anexo1.contrato.arrendamiento.redes.template_registry']) ? $this->services['app.admin.anexo1.contrato.arrendamiento.redes.template_registry'] : $this->get('app.admin.anexo1.contrato.arrendamiento.redes.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.anexo1.contrato.arrendamiento.redes.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Anexo1_Contrato_Arrendamiento_Redes_TemplateRegistryService()
    {
        return $this->services['app.admin.anexo1.contrato.arrendamiento.redes.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.anexo1.contrato.compra.venta' service.
     *
     * @return \AppBundle\Admin\anexo1_contrato_compra_ventaAdmin
     */
    protected function getApp_Admin_Anexo1_Contrato_Compra_VentaService()
    {
        $instance = new \AppBundle\Admin\anexo1_contrato_compra_ventaAdmin('app.admin.anexo1.contrato.compra.venta', 'AppBundle\\Entity\\anexo1_contrato_compra_venta', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Descripción de los productos');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.anexo1.contrato.compra.venta.template_registry']) ? $this->services['app.admin.anexo1.contrato.compra.venta.template_registry'] : $this->get('app.admin.anexo1.contrato.compra.venta.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.anexo1.contrato.compra.venta.pizarra' service.
     *
     * @return \AppBundle\Admin\anexo1_contrato_compra_venta_pizarraAdmin
     */
    protected function getApp_Admin_Anexo1_Contrato_Compra_Venta_PizarraService()
    {
        $instance = new \AppBundle\Admin\anexo1_contrato_compra_venta_pizarraAdmin('app.admin.anexo1.contrato.compra.venta.pizarra', 'AppBundle\\Entity\\anexo1_contrato_compra_venta_pizarra', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Anexo 1 Contrato Compra Venta Pizarra');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.anexo1.contrato.compra.venta.pizarra.template_registry']) ? $this->services['app.admin.anexo1.contrato.compra.venta.pizarra.template_registry'] : $this->get('app.admin.anexo1.contrato.compra.venta.pizarra.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.anexo1.contrato.compra.venta.pizarra.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Anexo1_Contrato_Compra_Venta_Pizarra_TemplateRegistryService()
    {
        return $this->services['app.admin.anexo1.contrato.compra.venta.pizarra.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.anexo1.contrato.compra.venta.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Anexo1_Contrato_Compra_Venta_TemplateRegistryService()
    {
        return $this->services['app.admin.anexo1.contrato.compra.venta.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.anexo1.contrato.contactos.telefonicos' service.
     *
     * @return \AppBundle\Admin\anexo1_contrato_contactos_telefonicosAdmin
     */
    protected function getApp_Admin_Anexo1_Contrato_Contactos_TelefonicosService()
    {
        $instance = new \AppBundle\Admin\anexo1_contrato_contactos_telefonicosAdmin('app.admin.anexo1.contrato.contactos.telefonicos', 'AppBundle\\Entity\\anexo1_contrato_contactos_telefonicos', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Especificaciones del Servicio');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.anexo1.contrato.contactos.telefonicos.template_registry']) ? $this->services['app.admin.anexo1.contrato.contactos.telefonicos.template_registry'] : $this->get('app.admin.anexo1.contrato.contactos.telefonicos.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.anexo1.contrato.contactos.telefonicos.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Anexo1_Contrato_Contactos_Telefonicos_TemplateRegistryService()
    {
        return $this->services['app.admin.anexo1.contrato.contactos.telefonicos.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.anexo1.contrato.mantenimiento.pizarra.pbx' service.
     *
     * @return \AppBundle\Admin\anexo1_contrato_mantenimiento_pizarra_pbxAdmin
     */
    protected function getApp_Admin_Anexo1_Contrato_Mantenimiento_Pizarra_PbxService()
    {
        $instance = new \AppBundle\Admin\anexo1_contrato_mantenimiento_pizarra_pbxAdmin('app.admin.anexo1.contrato.mantenimiento.pizarra.pbx', 'AppBundle\\Entity\\anexo1_contrato_mantenimiento_pizarra_pbx', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Anexo 1 Contrato Mantenimiento Pizarras');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.anexo1.contrato.mantenimiento.pizarra.pbx.template_registry']) ? $this->services['app.admin.anexo1.contrato.mantenimiento.pizarra.pbx.template_registry'] : $this->get('app.admin.anexo1.contrato.mantenimiento.pizarra.pbx.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.anexo1.contrato.mantenimiento.pizarra.pbx.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Anexo1_Contrato_Mantenimiento_Pizarra_Pbx_TemplateRegistryService()
    {
        return $this->services['app.admin.anexo1.contrato.mantenimiento.pizarra.pbx.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.anexo2.contrato.areas.internet' service.
     *
     * @return \AppBundle\Admin\anexo2_contrato_areas_internetAdmin
     */
    protected function getApp_Admin_Anexo2_Contrato_Areas_InternetService()
    {
        $instance = new \AppBundle\Admin\anexo2_contrato_areas_internetAdmin('app.admin.anexo2.contrato.areas.internet', 'AppBundle\\Entity\\anexo2_contrato_areas_internet', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Aportes de las Partes');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.anexo2.contrato.areas.internet.template_registry']) ? $this->services['app.admin.anexo2.contrato.areas.internet.template_registry'] : $this->get('app.admin.anexo2.contrato.areas.internet.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.anexo2.contrato.areas.internet.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Anexo2_Contrato_Areas_Internet_TemplateRegistryService()
    {
        return $this->services['app.admin.anexo2.contrato.areas.internet.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.anexo2.contrato.arrendamiento.redes' service.
     *
     * @return \AppBundle\Admin\anexo2_contrato_arrendamiento_redesAdmin
     */
    protected function getApp_Admin_Anexo2_Contrato_Arrendamiento_RedesService()
    {
        $instance = new \AppBundle\Admin\anexo2_contrato_arrendamiento_redesAdmin('app.admin.anexo2.contrato.arrendamiento.redes', 'AppBundle\\Entity\\anexo2_contrato_arrendamiento_redes', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Relación de tramos de Redes');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.anexo2.contrato.arrendamiento.redes.template_registry']) ? $this->services['app.admin.anexo2.contrato.arrendamiento.redes.template_registry'] : $this->get('app.admin.anexo2.contrato.arrendamiento.redes.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.anexo2.contrato.arrendamiento.redes.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Anexo2_Contrato_Arrendamiento_Redes_TemplateRegistryService()
    {
        return $this->services['app.admin.anexo2.contrato.arrendamiento.redes.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.anexo2.contrato.instalacion.pizarra.pbx' service.
     *
     * @return \AppBundle\Admin\anexo2_contrato_instalacion_pizarra_pbxAdmin
     */
    protected function getApp_Admin_Anexo2_Contrato_Instalacion_Pizarra_PbxService()
    {
        $instance = new \AppBundle\Admin\anexo2_contrato_instalacion_pizarra_pbxAdmin('app.admin.anexo2.contrato.instalacion.pizarra.pbx', 'AppBundle\\Entity\\anexo2_contrato_instalacion_pizarra_pbx', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Equipos Contratados');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.anexo2.contrato.instalacion.pizarra.pbx.template_registry']) ? $this->services['app.admin.anexo2.contrato.instalacion.pizarra.pbx.template_registry'] : $this->get('app.admin.anexo2.contrato.instalacion.pizarra.pbx.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.anexo2.contrato.instalacion.pizarra.pbx.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Anexo2_Contrato_Instalacion_Pizarra_Pbx_TemplateRegistryService()
    {
        return $this->services['app.admin.anexo2.contrato.instalacion.pizarra.pbx.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.anexo2.contrato.recarga.por.pos' service.
     *
     * @return \AppBundle\Admin\anexo2_contrato_recarga_por_posAdmin
     */
    protected function getApp_Admin_Anexo2_Contrato_Recarga_Por_PosService()
    {
        $instance = new \AppBundle\Admin\anexo2_contrato_recarga_por_posAdmin('app.admin.anexo2.contrato.recarga.por.pos', 'AppBundle\\Entity\\anexo2_contrato_recarga_por_pos', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Puntos de Ventas del Cliente');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.anexo2.contrato.recarga.por.pos.template_registry']) ? $this->services['app.admin.anexo2.contrato.recarga.por.pos.template_registry'] : $this->get('app.admin.anexo2.contrato.recarga.por.pos.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.anexo2.contrato.recarga.por.pos.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Anexo2_Contrato_Recarga_Por_Pos_TemplateRegistryService()
    {
        return $this->services['app.admin.anexo2.contrato.recarga.por.pos.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.anexo4.arrendamiento.espacios' service.
     *
     * @return \AppBundle\Admin\anexo4_arrendamiento_espaciosAdmin
     */
    protected function getApp_Admin_Anexo4_Arrendamiento_EspaciosService()
    {
        $instance = new \AppBundle\Admin\anexo4_arrendamiento_espaciosAdmin('app.admin.anexo4.arrendamiento.espacios', 'AppBundle\\Entity\\anexo4_arrendamiento_espacios', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Anexo 4 Arrendamiento Espacios');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.anexo4.arrendamiento.espacios.template_registry']) ? $this->services['app.admin.anexo4.arrendamiento.espacios.template_registry'] : $this->get('app.admin.anexo4.arrendamiento.espacios.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.anexo4.arrendamiento.espacios.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Anexo4_Arrendamiento_Espacios_TemplateRegistryService()
    {
        return $this->services['app.admin.anexo4.arrendamiento.espacios.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.anexo4.contrato.agencia' service.
     *
     * @return \AppBundle\Admin\anexo4_contrato_agenciaAdmin
     */
    protected function getApp_Admin_Anexo4_Contrato_AgenciaService()
    {
        $instance = new \AppBundle\Admin\anexo4_contrato_agenciaAdmin('app.admin.anexo4.contrato.agencia', 'AppBundle\\Entity\\anexo4_contrato_agencia', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Puntos de atencion al agente');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.anexo4.contrato.agencia.template_registry']) ? $this->services['app.admin.anexo4.contrato.agencia.template_registry'] : $this->get('app.admin.anexo4.contrato.agencia.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.anexo4.contrato.agencia.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Anexo4_Contrato_Agencia_TemplateRegistryService()
    {
        return $this->services['app.admin.anexo4.contrato.agencia.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.anexo4.contrato.compra.venta' service.
     *
     * @return \AppBundle\Admin\anexo4_contrato_compra_ventaAdmin
     */
    protected function getApp_Admin_Anexo4_Contrato_Compra_VentaService()
    {
        $instance = new \AppBundle\Admin\anexo4_contrato_compra_ventaAdmin('app.admin.anexo4.contrato.compra.venta', 'AppBundle\\Entity\\anexo4_contrato_compra_venta', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Puntos de Comercialización por ETECSA');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.anexo4.contrato.compra.venta.template_registry']) ? $this->services['app.admin.anexo4.contrato.compra.venta.template_registry'] : $this->get('app.admin.anexo4.contrato.compra.venta.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.anexo4.contrato.compra.venta.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Anexo4_Contrato_Compra_Venta_TemplateRegistryService()
    {
        return $this->services['app.admin.anexo4.contrato.compra.venta.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.anexo4.contrato.recarga.por.pos' service.
     *
     * @return \AppBundle\Admin\anexo4_contrato_recarga_por_posAdmin
     */
    protected function getApp_Admin_Anexo4_Contrato_Recarga_Por_PosService()
    {
        $instance = new \AppBundle\Admin\anexo4_contrato_recarga_por_posAdmin('app.admin.anexo4.contrato.recarga.por.pos', 'AppBundle\\Entity\\anexo4_contrato_recarga_por_pos', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Acta de Entrega');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.anexo4.contrato.recarga.por.pos.template_registry']) ? $this->services['app.admin.anexo4.contrato.recarga.por.pos.template_registry'] : $this->get('app.admin.anexo4.contrato.recarga.por.pos.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.anexo4.contrato.recarga.por.pos.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Anexo4_Contrato_Recarga_Por_Pos_TemplateRegistryService()
    {
        return $this->services['app.admin.anexo4.contrato.recarga.por.pos.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.anexo5.arrendaminto.espacios' service.
     *
     * @return \AppBundle\Admin\anexo5_arrendaminto_espaciosAdmin
     */
    protected function getApp_Admin_Anexo5_Arrendaminto_EspaciosService()
    {
        $instance = new \AppBundle\Admin\anexo5_arrendaminto_espaciosAdmin('app.admin.anexo5.arrendaminto.espacios', 'AppBundle\\Entity\\anexo5_arrendaminto_espacios', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Anexo 5 Arrendamiento Espacios');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.anexo5.arrendaminto.espacios.template_registry']) ? $this->services['app.admin.anexo5.arrendaminto.espacios.template_registry'] : $this->get('app.admin.anexo5.arrendaminto.espacios.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.anexo5.arrendaminto.espacios.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Anexo5_Arrendaminto_Espacios_TemplateRegistryService()
    {
        return $this->services['app.admin.anexo5.arrendaminto.espacios.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.anexo5.contrato.agencia' service.
     *
     * @return \AppBundle\Admin\anexo5_contrato_agenciaAdmin
     */
    protected function getApp_Admin_Anexo5_Contrato_AgenciaService()
    {
        $instance = new \AppBundle\Admin\anexo5_contrato_agenciaAdmin('app.admin.anexo5.contrato.agencia', 'AppBundle\\Entity\\anexo5_contrato_agencia', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Puntos de comercialización del agente');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.anexo5.contrato.agencia.template_registry']) ? $this->services['app.admin.anexo5.contrato.agencia.template_registry'] : $this->get('app.admin.anexo5.contrato.agencia.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.anexo5.contrato.agencia.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Anexo5_Contrato_Agencia_TemplateRegistryService()
    {
        return $this->services['app.admin.anexo5.contrato.agencia.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.anexo5.contrato.areas.internet' service.
     *
     * @return \AppBundle\Admin\anexo5_contrato_areas_internetAdmin
     */
    protected function getApp_Admin_Anexo5_Contrato_Areas_InternetService()
    {
        $instance = new \AppBundle\Admin\anexo5_contrato_areas_internetAdmin('app.admin.anexo5.contrato.areas.internet', 'AppBundle\\Entity\\anexo5_contrato_areas_internet', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Punto de comercialización.');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.anexo5.contrato.areas.internet.template_registry']) ? $this->services['app.admin.anexo5.contrato.areas.internet.template_registry'] : $this->get('app.admin.anexo5.contrato.areas.internet.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.anexo5.contrato.areas.internet.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Anexo5_Contrato_Areas_Internet_TemplateRegistryService()
    {
        return $this->services['app.admin.anexo5.contrato.areas.internet.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.anexocps.conexion.centrales.telefonicas' service.
     *
     * @return \AppBundle\Admin\anexocps_conexion_centrales_telefonicasAdmin
     */
    protected function getApp_Admin_Anexocps_Conexion_Centrales_TelefonicasService()
    {
        $instance = new \AppBundle\Admin\anexocps_conexion_centrales_telefonicasAdmin('app.admin.anexocps.conexion.centrales.telefonicas', 'AppBundle\\Entity\\anexocps_conexion_centrales_telefonicas', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Conexion Centrales Telefonicos');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.anexocps.conexion.centrales.telefonicas.template_registry']) ? $this->services['app.admin.anexocps.conexion.centrales.telefonicas.template_registry'] : $this->get('app.admin.anexocps.conexion.centrales.telefonicas.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.anexocps.conexion.centrales.telefonicas.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Anexocps_Conexion_Centrales_Telefonicas_TemplateRegistryService()
    {
        return $this->services['app.admin.anexocps.conexion.centrales.telefonicas.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.anexocps.levantamiento.redes.tecnicas' service.
     *
     * @return \AppBundle\Admin\anexocps_levantamiento_redes_tecnicasAdmin
     */
    protected function getApp_Admin_Anexocps_Levantamiento_Redes_TecnicasService()
    {
        $instance = new \AppBundle\Admin\anexocps_levantamiento_redes_tecnicasAdmin('app.admin.anexocps.levantamiento.redes.tecnicas', 'AppBundle\\Entity\\anexocps_levantamiento_redes_tecnicas', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Levantamiento Redes Tecnicas');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.anexocps.levantamiento.redes.tecnicas.template_registry']) ? $this->services['app.admin.anexocps.levantamiento.redes.tecnicas.template_registry'] : $this->get('app.admin.anexocps.levantamiento.redes.tecnicas.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.anexocps.levantamiento.redes.tecnicas.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Anexocps_Levantamiento_Redes_Tecnicas_TemplateRegistryService()
    {
        return $this->services['app.admin.anexocps.levantamiento.redes.tecnicas.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.anexocps.servicios.terceros' service.
     *
     * @return \AppBundle\Admin\anexocps_servicios_tercerosAdmin
     */
    protected function getApp_Admin_Anexocps_Servicios_TercerosService()
    {
        $instance = new \AppBundle\Admin\anexocps_servicios_tercerosAdmin('app.admin.anexocps.servicios.terceros', 'AppBundle\\Entity\\anexocps_servicios_terceros', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Servicios a Terceros');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.anexocps.servicios.terceros.template_registry']) ? $this->services['app.admin.anexocps.servicios.terceros.template_registry'] : $this->get('app.admin.anexocps.servicios.terceros.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.anexocps.servicios.terceros.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Anexocps_Servicios_Terceros_TemplateRegistryService()
    {
        return $this->services['app.admin.anexocps.servicios.terceros.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.contrato.agencia.persona.juridica' service.
     *
     * @return \AppBundle\Admin\contrato_agencia_persona_juridicaAdmin
     */
    protected function getApp_Admin_Contrato_Agencia_Persona_JuridicaService()
    {
        $instance = new \AppBundle\Admin\contrato_agencia_persona_juridicaAdmin('app.admin.contrato.agencia.persona.juridica', 'AppBundle\\Entity\\contrato_agencia_persona_juridica', 'AppBundle\\Controller\\ContratoAgenciaController');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Contratos Agencia Persona Juridica');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.contrato.agencia.persona.juridica.template_registry']) ? $this->services['app.admin.contrato.agencia.persona.juridica.template_registry'] : $this->get('app.admin.contrato.agencia.persona.juridica.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.contrato.agencia.persona.juridica.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Contrato_Agencia_Persona_Juridica_TemplateRegistryService()
    {
        return $this->services['app.admin.contrato.agencia.persona.juridica.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.contrato.areas.internet' service.
     *
     * @return \AppBundle\Admin\contrato_areas_internetAdmin
     */
    protected function getApp_Admin_Contrato_Areas_InternetService()
    {
        $instance = new \AppBundle\Admin\contrato_areas_internetAdmin('app.admin.contrato.areas.internet', 'AppBundle\\Entity\\contrato_areas_internet', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Contratos Areas Internet');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.contrato.areas.internet.template_registry']) ? $this->services['app.admin.contrato.areas.internet.template_registry'] : $this->get('app.admin.contrato.areas.internet.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.contrato.areas.internet.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Contrato_Areas_Internet_TemplateRegistryService()
    {
        return $this->services['app.admin.contrato.areas.internet.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.contrato.arrendamiento.espacios' service.
     *
     * @return \AppBundle\Admin\contrato_arrendamiento_espaciosAdmin
     */
    protected function getApp_Admin_Contrato_Arrendamiento_EspaciosService()
    {
        $instance = new \AppBundle\Admin\contrato_arrendamiento_espaciosAdmin('app.admin.contrato.arrendamiento.espacios', 'AppBundle\\Entity\\contrato_arrendamiento_espacios', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Contratos Arrendamiento Espacios');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.contrato.arrendamiento.espacios.template_registry']) ? $this->services['app.admin.contrato.arrendamiento.espacios.template_registry'] : $this->get('app.admin.contrato.arrendamiento.espacios.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.contrato.arrendamiento.espacios.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Contrato_Arrendamiento_Espacios_TemplateRegistryService()
    {
        return $this->services['app.admin.contrato.arrendamiento.espacios.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.contrato.arrendamiento.pizarra.privada.pbx' service.
     *
     * @return \AppBundle\Admin\contrato_arrendamiento_pizarra_privada_pbxAdmin
     */
    protected function getApp_Admin_Contrato_Arrendamiento_Pizarra_Privada_PbxService()
    {
        $instance = new \AppBundle\Admin\contrato_arrendamiento_pizarra_privada_pbxAdmin('app.admin.contrato.arrendamiento.pizarra.privada.pbx', 'AppBundle\\Entity\\contrato_arrendamiento_pizarra_privada_pbx', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Contratos Arrendamiento Pizarras Privadas');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.contrato.arrendamiento.pizarra.privada.pbx.template_registry']) ? $this->services['app.admin.contrato.arrendamiento.pizarra.privada.pbx.template_registry'] : $this->get('app.admin.contrato.arrendamiento.pizarra.privada.pbx.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.contrato.arrendamiento.pizarra.privada.pbx.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Contrato_Arrendamiento_Pizarra_Privada_Pbx_TemplateRegistryService()
    {
        return $this->services['app.admin.contrato.arrendamiento.pizarra.privada.pbx.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.contrato.arrendamiento.redes' service.
     *
     * @return \AppBundle\Admin\contrato_arrendamiento_redesAdmin
     */
    protected function getApp_Admin_Contrato_Arrendamiento_RedesService()
    {
        $instance = new \AppBundle\Admin\contrato_arrendamiento_redesAdmin('app.admin.contrato.arrendamiento.redes', 'AppBundle\\Entity\\contrato_arrendamiento_redes', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Contratos Arrendamiento de Redes');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.contrato.arrendamiento.redes.template_registry']) ? $this->services['app.admin.contrato.arrendamiento.redes.template_registry'] : $this->get('app.admin.contrato.arrendamiento.redes.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.contrato.arrendamiento.redes.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Contrato_Arrendamiento_Redes_TemplateRegistryService()
    {
        return $this->services['app.admin.contrato.arrendamiento.redes.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.contrato.comp.vent.pizarra' service.
     *
     * @return \AppBundle\Admin\contrato_comp_vent_pizarraAdmin
     */
    protected function getApp_Admin_Contrato_Comp_Vent_PizarraService()
    {
        $instance = new \AppBundle\Admin\contrato_comp_vent_pizarraAdmin('app.admin.contrato.comp.vent.pizarra', 'AppBundle\\Entity\\contrato_comp_vent_pizarra', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Contratos Compra Venta de Pizarras');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.contrato.comp.vent.pizarra.template_registry']) ? $this->services['app.admin.contrato.comp.vent.pizarra.template_registry'] : $this->get('app.admin.contrato.comp.vent.pizarra.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.contrato.comp.vent.pizarra.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Contrato_Comp_Vent_Pizarra_TemplateRegistryService()
    {
        return $this->services['app.admin.contrato.comp.vent.pizarra.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.contrato.compra.venta' service.
     *
     * @return \AppBundle\Admin\contrato_compra_ventaAdmin
     */
    protected function getApp_Admin_Contrato_Compra_VentaService()
    {
        $instance = new \AppBundle\Admin\contrato_compra_ventaAdmin('app.admin.contrato.compra.venta', 'AppBundle\\Entity\\contrato_compra_venta', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Contratos Compra Venta');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.contrato.compra.venta.template_registry']) ? $this->services['app.admin.contrato.compra.venta.template_registry'] : $this->get('app.admin.contrato.compra.venta.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.contrato.compra.venta.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Contrato_Compra_Venta_TemplateRegistryService()
    {
        return $this->services['app.admin.contrato.compra.venta.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.contrato.contactos.telefonicos' service.
     *
     * @return \AppBundle\Admin\contrato_contactos_telefonicosAdmin
     */
    protected function getApp_Admin_Contrato_Contactos_TelefonicosService()
    {
        $instance = new \AppBundle\Admin\contrato_contactos_telefonicosAdmin('app.admin.contrato.contactos.telefonicos', 'AppBundle\\Entity\\contrato_contactos_telefonicos', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Contratos Contactos Telefonicos');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.contrato.contactos.telefonicos.template_registry']) ? $this->services['app.admin.contrato.contactos.telefonicos.template_registry'] : $this->get('app.admin.contrato.contactos.telefonicos.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.contrato.contactos.telefonicos.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Contrato_Contactos_Telefonicos_TemplateRegistryService()
    {
        return $this->services['app.admin.contrato.contactos.telefonicos.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.contrato.instalacion.pizarra.pbx' service.
     *
     * @return \AppBundle\Admin\contrato_instalacion_pizarra_pbxAdmin
     */
    protected function getApp_Admin_Contrato_Instalacion_Pizarra_PbxService()
    {
        $instance = new \AppBundle\Admin\contrato_instalacion_pizarra_pbxAdmin('app.admin.contrato.instalacion.pizarra.pbx', 'AppBundle\\Entity\\contrato_instalacion_pizarra_pbx', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Contratos Instalacion Pizarra');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.contrato.instalacion.pizarra.pbx.template_registry']) ? $this->services['app.admin.contrato.instalacion.pizarra.pbx.template_registry'] : $this->get('app.admin.contrato.instalacion.pizarra.pbx.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.contrato.instalacion.pizarra.pbx.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Contrato_Instalacion_Pizarra_Pbx_TemplateRegistryService()
    {
        return $this->services['app.admin.contrato.instalacion.pizarra.pbx.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.contrato.mantenimiento.pizarra.pbx' service.
     *
     * @return \AppBundle\Admin\contrato_mantenimiento_pizarra_pbxAdmin
     */
    protected function getApp_Admin_Contrato_Mantenimiento_Pizarra_PbxService()
    {
        $instance = new \AppBundle\Admin\contrato_mantenimiento_pizarra_pbxAdmin('app.admin.contrato.mantenimiento.pizarra.pbx', 'AppBundle\\Entity\\contrato_mantenimiento_pizarra_pbx', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Contratos Mantenimiento Pizarra');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.contrato.mantenimiento.pizarra.pbx.template_registry']) ? $this->services['app.admin.contrato.mantenimiento.pizarra.pbx.template_registry'] : $this->get('app.admin.contrato.mantenimiento.pizarra.pbx.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.contrato.mantenimiento.pizarra.pbx.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Contrato_Mantenimiento_Pizarra_Pbx_TemplateRegistryService()
    {
        return $this->services['app.admin.contrato.mantenimiento.pizarra.pbx.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.contrato.prestacion.servicios' service.
     *
     * @return \AppBundle\Admin\contrato_prestacion_serviciosAdmin
     */
    protected function getApp_Admin_Contrato_Prestacion_ServiciosService()
    {
        $instance = new \AppBundle\Admin\contrato_prestacion_serviciosAdmin('app.admin.contrato.prestacion.servicios', 'AppBundle\\Entity\\contrato_prestacion_servicios', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Contratos Prestacion Servicios');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.contrato.prestacion.servicios.template_registry']) ? $this->services['app.admin.contrato.prestacion.servicios.template_registry'] : $this->get('app.admin.contrato.prestacion.servicios.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.contrato.prestacion.servicios.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Contrato_Prestacion_Servicios_TemplateRegistryService()
    {
        return $this->services['app.admin.contrato.prestacion.servicios.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.contrato.recarga.por.pos' service.
     *
     * @return \AppBundle\Admin\contrato_recarga_por_posAdmin
     */
    protected function getApp_Admin_Contrato_Recarga_Por_PosService()
    {
        $instance = new \AppBundle\Admin\contrato_recarga_por_posAdmin('app.admin.contrato.recarga.por.pos', 'AppBundle\\Entity\\contrato_recarga_por_pos', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Contratos Recarga por POS');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.contrato.recarga.por.pos.template_registry']) ? $this->services['app.admin.contrato.recarga.por.pos.template_registry'] : $this->get('app.admin.contrato.recarga.por.pos.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.contrato.recarga.por.pos.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Contrato_Recarga_Por_Pos_TemplateRegistryService()
    {
        return $this->services['app.admin.contrato.recarga.por.pos.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.datos.cuentas.bancarias.etecsa' service.
     *
     * @return \AppBundle\Admin\datos_cuentas_bancarias_etecsaAdmin
     */
    protected function getApp_Admin_Datos_Cuentas_Bancarias_EtecsaService()
    {
        $instance = new \AppBundle\Admin\datos_cuentas_bancarias_etecsaAdmin('app.admin.datos.cuentas.bancarias.etecsa', 'AppBundle\\Entity\\datos_cuentas_bancarias_etecsa', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Datos de las Cuentas Bancarias de ETECSA');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.datos.cuentas.bancarias.etecsa.template_registry']) ? $this->services['app.admin.datos.cuentas.bancarias.etecsa.template_registry'] : $this->get('app.admin.datos.cuentas.bancarias.etecsa.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.datos.cuentas.bancarias.etecsa.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Datos_Cuentas_Bancarias_Etecsa_TemplateRegistryService()
    {
        return $this->services['app.admin.datos.cuentas.bancarias.etecsa.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.descripcion.productos.contratados' service.
     *
     * @return \AppBundle\Admin\descripcion_productos_contratadosAdmin
     */
    protected function getApp_Admin_Descripcion_Productos_ContratadosService()
    {
        $instance = new \AppBundle\Admin\descripcion_productos_contratadosAdmin('app.admin.descripcion.productos.contratados', 'AppBundle\\Entity\\descripcion_productos_contratados', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Descripción Productos Contratados');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.descripcion.productos.contratados.template_registry']) ? $this->services['app.admin.descripcion.productos.contratados.template_registry'] : $this->get('app.admin.descripcion.productos.contratados.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.descripcion.productos.contratados.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Descripcion_Productos_Contratados_TemplateRegistryService()
    {
        return $this->services['app.admin.descripcion.productos.contratados.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.descripcion.productos.servicios' service.
     *
     * @return \AppBundle\Admin\descripcion_productos_serviciosAdmin
     */
    protected function getApp_Admin_Descripcion_Productos_ServiciosService()
    {
        $instance = new \AppBundle\Admin\descripcion_productos_serviciosAdmin('app.admin.descripcion.productos.servicios', 'AppBundle\\Entity\\descripcion_productos_servicios', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Descripcion Productos y Servicios');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.descripcion.productos.servicios.template_registry']) ? $this->services['app.admin.descripcion.productos.servicios.template_registry'] : $this->get('app.admin.descripcion.productos.servicios.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.descripcion.productos.servicios.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Descripcion_Productos_Servicios_TemplateRegistryService()
    {
        return $this->services['app.admin.descripcion.productos.servicios.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.empresa' service.
     *
     * @return \AppBundle\Admin\EmpresaAdmin
     */
    protected function getApp_Admin_EmpresaService()
    {
        $instance = new \AppBundle\Admin\EmpresaAdmin('app.admin.empresa', 'AppBundle\\Entity\\Empresa', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Empresa');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.empresa.template_registry']) ? $this->services['app.admin.empresa.template_registry'] : $this->get('app.admin.empresa.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.empresa.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Empresa_TemplateRegistryService()
    {
        return $this->services['app.admin.empresa.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.equipamiento.gsm.pos' service.
     *
     * @return \AppBundle\Admin\equipamiento_gsm_posAdmin
     */
    protected function getApp_Admin_Equipamiento_Gsm_PosService()
    {
        $instance = new \AppBundle\Admin\equipamiento_gsm_posAdmin('app.admin.equipamiento.gsm.pos', 'AppBundle\\Entity\\equipamiento_gsm_pos', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Equipamiento GSM');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.equipamiento.gsm.pos.template_registry']) ? $this->services['app.admin.equipamiento.gsm.pos.template_registry'] : $this->get('app.admin.equipamiento.gsm.pos.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.equipamiento.gsm.pos.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Equipamiento_Gsm_Pos_TemplateRegistryService()
    {
        return $this->services['app.admin.equipamiento.gsm.pos.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.facilidades.del.equipo' service.
     *
     * @return \AppBundle\Admin\facilidades_del_equipoAdmin
     */
    protected function getApp_Admin_Facilidades_Del_EquipoService()
    {
        $instance = new \AppBundle\Admin\facilidades_del_equipoAdmin('app.admin.facilidades.del.equipo', 'AppBundle\\Entity\\facilidades_del_equipo', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Facilidades del Equipo');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.facilidades.del.equipo.template_registry']) ? $this->services['app.admin.facilidades.del.equipo.template_registry'] : $this->get('app.admin.facilidades.del.equipo.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.facilidades.del.equipo.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Facilidades_Del_Equipo_TemplateRegistryService()
    {
        return $this->services['app.admin.facilidades.del.equipo.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.grupos.electrogenos' service.
     *
     * @return \AppBundle\Admin\grupos_electrogenosAdmin
     */
    protected function getApp_Admin_Grupos_ElectrogenosService()
    {
        $instance = new \AppBundle\Admin\grupos_electrogenosAdmin('app.admin.grupos.electrogenos', 'AppBundle\\Entity\\grupos_electrogenos', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Grupos Electrógenos');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.grupos.electrogenos.template_registry']) ? $this->services['app.admin.grupos.electrogenos.template_registry'] : $this->get('app.admin.grupos.electrogenos.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.grupos.electrogenos.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Grupos_Electrogenos_TemplateRegistryService()
    {
        return $this->services['app.admin.grupos.electrogenos.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.locales' service.
     *
     * @return \AppBundle\Admin\localesAdmin
     */
    protected function getApp_Admin_LocalesService()
    {
        $instance = new \AppBundle\Admin\localesAdmin('app.admin.locales', 'AppBundle\\Entity\\locales', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('locales');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.locales.template_registry']) ? $this->services['app.admin.locales.template_registry'] : $this->get('app.admin.locales.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.locales.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Locales_TemplateRegistryService()
    {
        return $this->services['app.admin.locales.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.mantenimiento.correctivo' service.
     *
     * @return \AppBundle\Admin\mantenimiento_correctivoAdmin
     */
    protected function getApp_Admin_Mantenimiento_CorrectivoService()
    {
        $instance = new \AppBundle\Admin\mantenimiento_correctivoAdmin('app.admin.mantenimiento.correctivo', 'AppBundle\\Entity\\mantenimiento_correctivo', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Mantenimiento Correctivo');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.mantenimiento.correctivo.template_registry']) ? $this->services['app.admin.mantenimiento.correctivo.template_registry'] : $this->get('app.admin.mantenimiento.correctivo.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.mantenimiento.correctivo.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Mantenimiento_Correctivo_TemplateRegistryService()
    {
        return $this->services['app.admin.mantenimiento.correctivo.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.mantenimiento.preventivo' service.
     *
     * @return \AppBundle\Admin\mantenimiento_preventivoAdmin
     */
    protected function getApp_Admin_Mantenimiento_PreventivoService()
    {
        $instance = new \AppBundle\Admin\mantenimiento_preventivoAdmin('app.admin.mantenimiento.preventivo', 'AppBundle\\Entity\\mantenimiento_preventivo', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Mantenimiento Preventivo');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.mantenimiento.preventivo.template_registry']) ? $this->services['app.admin.mantenimiento.preventivo.template_registry'] : $this->get('app.admin.mantenimiento.preventivo.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.mantenimiento.preventivo.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Mantenimiento_Preventivo_TemplateRegistryService()
    {
        return $this->services['app.admin.mantenimiento.preventivo.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.organismos' service.
     *
     * @return \AppBundle\Admin\OrganismosAdmin
     */
    protected function getApp_Admin_OrganismosService()
    {
        $instance = new \AppBundle\Admin\OrganismosAdmin('app.admin.organismos', 'AppBundle\\Entity\\Organismos', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Organismos');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.organismos.template_registry']) ? $this->services['app.admin.organismos.template_registry'] : $this->get('app.admin.organismos.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.organismos.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Organismos_TemplateRegistryService()
    {
        return $this->services['app.admin.organismos.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.personas' service.
     *
     * @return \AppBundle\Admin\PersonasAdmin
     */
    protected function getApp_Admin_PersonasService()
    {
        $instance = new \AppBundle\Admin\PersonasAdmin('app.admin.personas', 'AppBundle\\Entity\\Personas', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Personas');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.personas.template_registry']) ? $this->services['app.admin.personas.template_registry'] : $this->get('app.admin.personas.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.personas.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Personas_TemplateRegistryService()
    {
        return $this->services['app.admin.personas.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.pizarra.pbx' service.
     *
     * @return \AppBundle\Admin\pizarra_pbxAdmin
     */
    protected function getApp_Admin_Pizarra_PbxService()
    {
        $instance = new \AppBundle\Admin\pizarra_pbxAdmin('app.admin.pizarra.pbx', 'AppBundle\\Entity\\pizarra_pbx', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Pizarras PBX');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.pizarra.pbx.template_registry']) ? $this->services['app.admin.pizarra.pbx.template_registry'] : $this->get('app.admin.pizarra.pbx.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.pizarra.pbx.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Pizarra_Pbx_TemplateRegistryService()
    {
        return $this->services['app.admin.pizarra.pbx.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.protecciones.tierra' service.
     *
     * @return \AppBundle\Admin\protecciones_tierraAdmin
     */
    protected function getApp_Admin_Protecciones_TierraService()
    {
        $instance = new \AppBundle\Admin\protecciones_tierraAdmin('app.admin.protecciones.tierra', 'AppBundle\\Entity\\protecciones_tierra', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Protecciones_tierra');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.protecciones.tierra.template_registry']) ? $this->services['app.admin.protecciones.tierra.template_registry'] : $this->get('app.admin.protecciones.tierra.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.protecciones.tierra.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Protecciones_Tierra_TemplateRegistryService()
    {
        return $this->services['app.admin.protecciones.tierra.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.relacion.antenas.a4' service.
     *
     * @return \AppBundle\Admin\relacion_antenas_a4Admin
     */
    protected function getApp_Admin_Relacion_Antenas_A4Service()
    {
        $instance = new \AppBundle\Admin\relacion_antenas_a4Admin('app.admin.relacion.antenas.a4', 'AppBundle\\Entity\\relacion_antenas_a4', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Antenas');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.relacion.antenas.a4.template_registry']) ? $this->services['app.admin.relacion.antenas.a4.template_registry'] : $this->get('app.admin.relacion.antenas.a4.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.relacion.antenas.a4.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Relacion_Antenas_A4_TemplateRegistryService()
    {
        return $this->services['app.admin.relacion.antenas.a4.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.relacion.bastidores' service.
     *
     * @return \AppBundle\Admin\relacion_bastidoresAdmin
     */
    protected function getApp_Admin_Relacion_BastidoresService()
    {
        $instance = new \AppBundle\Admin\relacion_bastidoresAdmin('app.admin.relacion.bastidores', 'AppBundle\\Entity\\relacion_bastidores', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Bastidores');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.relacion.bastidores.template_registry']) ? $this->services['app.admin.relacion.bastidores.template_registry'] : $this->get('app.admin.relacion.bastidores.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.relacion.bastidores.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Relacion_Bastidores_TemplateRegistryService()
    {
        return $this->services['app.admin.relacion.bastidores.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.relacion.equipos' service.
     *
     * @return \AppBundle\Admin\relacion_equiposAdmin
     */
    protected function getApp_Admin_Relacion_EquiposService()
    {
        $instance = new \AppBundle\Admin\relacion_equiposAdmin('app.admin.relacion.equipos', 'AppBundle\\Entity\\relacion_equipos', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Equipos');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.relacion.equipos.template_registry']) ? $this->services['app.admin.relacion.equipos.template_registry'] : $this->get('app.admin.relacion.equipos.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.relacion.equipos.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Relacion_Equipos_TemplateRegistryService()
    {
        return $this->services['app.admin.relacion.equipos.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.relacion.iluminacion.tomacorriente' service.
     *
     * @return \AppBundle\Admin\relacion_iluminacion_tomacorrienteAdmin
     */
    protected function getApp_Admin_Relacion_Iluminacion_TomacorrienteService()
    {
        $instance = new \AppBundle\Admin\relacion_iluminacion_tomacorrienteAdmin('app.admin.relacion.iluminacion.tomacorriente', 'AppBundle\\Entity\\relacion_iluminacion_tomacorriente', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('relacion_iluminacion_tomacorriente');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.relacion.iluminacion.tomacorriente.template_registry']) ? $this->services['app.admin.relacion.iluminacion.tomacorriente.template_registry'] : $this->get('app.admin.relacion.iluminacion.tomacorriente.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.relacion.iluminacion.tomacorriente.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Relacion_Iluminacion_Tomacorriente_TemplateRegistryService()
    {
        return $this->services['app.admin.relacion.iluminacion.tomacorriente.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.relacion.mastiles.a4' service.
     *
     * @return \AppBundle\Admin\relacion_mastiles_a4Admin
     */
    protected function getApp_Admin_Relacion_Mastiles_A4Service()
    {
        $instance = new \AppBundle\Admin\relacion_mastiles_a4Admin('app.admin.relacion.mastiles.a4', 'AppBundle\\Entity\\relacion_mastiles_a4', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Mástiles');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.relacion.mastiles.a4.template_registry']) ? $this->services['app.admin.relacion.mastiles.a4.template_registry'] : $this->get('app.admin.relacion.mastiles.a4.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.relacion.mastiles.a4.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Relacion_Mastiles_A4_TemplateRegistryService()
    {
        return $this->services['app.admin.relacion.mastiles.a4.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.relacion.terminaciones.bastidor' service.
     *
     * @return \AppBundle\Admin\relacion_terminaciones_bastidorAdmin
     */
    protected function getApp_Admin_Relacion_Terminaciones_BastidorService()
    {
        $instance = new \AppBundle\Admin\relacion_terminaciones_bastidorAdmin('app.admin.relacion.terminaciones.bastidor', 'AppBundle\\Entity\\relacion_terminaciones_bastidor', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('relacion_terminaciones_bastidor');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.relacion.terminaciones.bastidor.template_registry']) ? $this->services['app.admin.relacion.terminaciones.bastidor.template_registry'] : $this->get('app.admin.relacion.terminaciones.bastidor.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.relacion.terminaciones.bastidor.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Relacion_Terminaciones_Bastidor_TemplateRegistryService()
    {
        return $this->services['app.admin.relacion.terminaciones.bastidor.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.relacion.torres.a4' service.
     *
     * @return \AppBundle\Admin\relacion_torres_a4Admin
     */
    protected function getApp_Admin_Relacion_Torres_A4Service()
    {
        $instance = new \AppBundle\Admin\relacion_torres_a4Admin('app.admin.relacion.torres.a4', 'AppBundle\\Entity\\relacion_torres_a4', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Torres');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.relacion.torres.a4.template_registry']) ? $this->services['app.admin.relacion.torres.a4.template_registry'] : $this->get('app.admin.relacion.torres.a4.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.relacion.torres.a4.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Relacion_Torres_A4_TemplateRegistryService()
    {
        return $this->services['app.admin.relacion.torres.a4.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.relacion.vias' service.
     *
     * @return \AppBundle\Admin\relacion_viasAdmin
     */
    protected function getApp_Admin_Relacion_ViasService()
    {
        $instance = new \AppBundle\Admin\relacion_viasAdmin('app.admin.relacion.vias', 'AppBundle\\Entity\\relacion_vias', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Vías');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.relacion.vias.template_registry']) ? $this->services['app.admin.relacion.vias.template_registry'] : $this->get('app.admin.relacion.vias.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.relacion.vias.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Relacion_Vias_TemplateRegistryService()
    {
        return $this->services['app.admin.relacion.vias.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.sistema.corriente.directa' service.
     *
     * @return \AppBundle\Admin\sistema_corriente_directaAdmin
     */
    protected function getApp_Admin_Sistema_Corriente_DirectaService()
    {
        $instance = new \AppBundle\Admin\sistema_corriente_directaAdmin('app.admin.sistema.corriente.directa', 'AppBundle\\Entity\\sistema_corriente_directa', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Sistemas de Corriente Directa');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.sistema.corriente.directa.template_registry']) ? $this->services['app.admin.sistema.corriente.directa.template_registry'] : $this->get('app.admin.sistema.corriente.directa.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.sistema.corriente.directa.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Sistema_Corriente_Directa_TemplateRegistryService()
    {
        return $this->services['app.admin.sistema.corriente.directa.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.sistema.iluminacion.a5' service.
     *
     * @return \AppBundle\Admin\sistema_iluminacion_a5Admin
     */
    protected function getApp_Admin_Sistema_Iluminacion_A5Service()
    {
        $instance = new \AppBundle\Admin\sistema_iluminacion_a5Admin('app.admin.sistema.iluminacion.a5', 'AppBundle\\Entity\\sistema_iluminacion_a5', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Sistemas de Iluminación');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.sistema.iluminacion.a5.template_registry']) ? $this->services['app.admin.sistema.iluminacion.a5.template_registry'] : $this->get('app.admin.sistema.iluminacion.a5.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.sistema.iluminacion.a5.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Sistema_Iluminacion_A5_TemplateRegistryService()
    {
        return $this->services['app.admin.sistema.iluminacion.a5.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.sistemas.corriente.alterna' service.
     *
     * @return \AppBundle\Admin\sistemas_corriente_alternaAdmin
     */
    protected function getApp_Admin_Sistemas_Corriente_AlternaService()
    {
        $instance = new \AppBundle\Admin\sistemas_corriente_alternaAdmin('app.admin.sistemas.corriente.alterna', 'AppBundle\\Entity\\sistemas_corriente_alterna', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Sistemas de Corriente Alterna');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.sistemas.corriente.alterna.template_registry']) ? $this->services['app.admin.sistemas.corriente.alterna.template_registry'] : $this->get('app.admin.sistemas.corriente.alterna.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.sistemas.corriente.alterna.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Sistemas_Corriente_Alterna_TemplateRegistryService()
    {
        return $this->services['app.admin.sistemas.corriente.alterna.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.tarifas.conexion.pizarras' service.
     *
     * @return \AppBundle\Admin\tarifas_conexion_pizarrasAdmin
     */
    protected function getApp_Admin_Tarifas_Conexion_PizarrasService()
    {
        $instance = new \AppBundle\Admin\tarifas_conexion_pizarrasAdmin('app.admin.tarifas.conexion.pizarras', 'AppBundle\\Entity\\tarifas_conexion_pizarras', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Tarifas Conexion Pizarras');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.tarifas.conexion.pizarras.template_registry']) ? $this->services['app.admin.tarifas.conexion.pizarras.template_registry'] : $this->get('app.admin.tarifas.conexion.pizarras.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.tarifas.conexion.pizarras.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Tarifas_Conexion_Pizarras_TemplateRegistryService()
    {
        return $this->services['app.admin.tarifas.conexion.pizarras.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.tarifas.espacios.arrendados' service.
     *
     * @return \AppBundle\Admin\tarifas_espacios_arrendadosAdmin
     */
    protected function getApp_Admin_Tarifas_Espacios_ArrendadosService()
    {
        $instance = new \AppBundle\Admin\tarifas_espacios_arrendadosAdmin('app.admin.tarifas.espacios.arrendados', 'AppBundle\\Entity\\tarifas_espacios_arrendados', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Tarifas de Espacios Arrendados');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.tarifas.espacios.arrendados.template_registry']) ? $this->services['app.admin.tarifas.espacios.arrendados.template_registry'] : $this->get('app.admin.tarifas.espacios.arrendados.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.tarifas.espacios.arrendados.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Tarifas_Espacios_Arrendados_TemplateRegistryService()
    {
        return $this->services['app.admin.tarifas.espacios.arrendados.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.tarjetas.sim' service.
     *
     * @return \AppBundle\Admin\tarjetas_simAdmin
     */
    protected function getApp_Admin_Tarjetas_SimService()
    {
        $instance = new \AppBundle\Admin\tarjetas_simAdmin('app.admin.tarjetas.sim', 'AppBundle\\Entity\\tarjetas_sim', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Tarjetas SIM');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.tarjetas.sim.template_registry']) ? $this->services['app.admin.tarjetas.sim.template_registry'] : $this->get('app.admin.tarjetas.sim.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.tarjetas.sim.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Tarjetas_Sim_TemplateRegistryService()
    {
        return $this->services['app.admin.tarjetas.sim.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.terminaciones' service.
     *
     * @return \AppBundle\Admin\terminacionesAdmin
     */
    protected function getApp_Admin_TerminacionesService()
    {
        $instance = new \AppBundle\Admin\terminacionesAdmin('app.admin.terminaciones', 'AppBundle\\Entity\\terminaciones', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Terminaciones');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.terminaciones.template_registry']) ? $this->services['app.admin.terminaciones.template_registry'] : $this->get('app.admin.terminaciones.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.terminaciones.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Terminaciones_TemplateRegistryService()
    {
        return $this->services['app.admin.terminaciones.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.tipos.de.mantenimientos' service.
     *
     * @return \AppBundle\Admin\tipos_de_mantenimientosAdmin
     */
    protected function getApp_Admin_Tipos_De_MantenimientosService()
    {
        $instance = new \AppBundle\Admin\tipos_de_mantenimientosAdmin('app.admin.tipos.de.mantenimientos', 'AppBundle\\Entity\\tipos_de_mantenimientos', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Tipos de Mantenimientos');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.tipos.de.mantenimientos.template_registry']) ? $this->services['app.admin.tipos.de.mantenimientos.template_registry'] : $this->get('app.admin.tipos.de.mantenimientos.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.tipos.de.mantenimientos.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Tipos_De_Mantenimientos_TemplateRegistryService()
    {
        return $this->services['app.admin.tipos.de.mantenimientos.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.tipos.distancias.arrendadas' service.
     *
     * @return \AppBundle\Admin\tipos_distancias_arrendadasAdmin
     */
    protected function getApp_Admin_Tipos_Distancias_ArrendadasService()
    {
        $instance = new \AppBundle\Admin\tipos_distancias_arrendadasAdmin('app.admin.tipos.distancias.arrendadas', 'AppBundle\\Entity\\tipos_distancias_arrendadas', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Tipos de distancias arrendadas');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.tipos.distancias.arrendadas.template_registry']) ? $this->services['app.admin.tipos.distancias.arrendadas.template_registry'] : $this->get('app.admin.tipos.distancias.arrendadas.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.tipos.distancias.arrendadas.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Tipos_Distancias_Arrendadas_TemplateRegistryService()
    {
        return $this->services['app.admin.tipos.distancias.arrendadas.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.tipos.mantenimientos.correctivos' service.
     *
     * @return \AppBundle\Admin\tipos_mantenimientos_correctivosAdmin
     */
    protected function getApp_Admin_Tipos_Mantenimientos_CorrectivosService()
    {
        $instance = new \AppBundle\Admin\tipos_mantenimientos_correctivosAdmin('app.admin.tipos.mantenimientos.correctivos', 'AppBundle\\Entity\\tipos_mantenimientos_correctivos', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Tipos Mantenimientos Correctivos');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.tipos.mantenimientos.correctivos.template_registry']) ? $this->services['app.admin.tipos.mantenimientos.correctivos.template_registry'] : $this->get('app.admin.tipos.mantenimientos.correctivos.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.tipos.mantenimientos.correctivos.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Tipos_Mantenimientos_Correctivos_TemplateRegistryService()
    {
        return $this->services['app.admin.tipos.mantenimientos.correctivos.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'app.admin.tomacorrientes' service.
     *
     * @return \AppBundle\Admin\tomacorrientesAdmin
     */
    protected function getApp_Admin_TomacorrientesService()
    {
        $instance = new \AppBundle\Admin\tomacorrientesAdmin('app.admin.tomacorrientes', 'AppBundle\\Entity\\tomacorrientes', 'SonataAdminBundle:CRUD');

        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.native']) ? $this->services['sonata.admin.label.strategy.native'] : $this->get('sonata.admin.label.strategy.native')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('Tomacorrientes');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['app.admin.tomacorrientes.template_registry']) ? $this->services['app.admin.tomacorrientes.template_registry'] : $this->get('app.admin.tomacorrientes.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'app.admin.tomacorrientes.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getApp_Admin_Tomacorrientes_TemplateRegistryService()
    {
        return $this->services['app.admin.tomacorrientes.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'application_sonata_user.profile.authentication.form.type' shared service.
     *
     * @return \AppBundle\Form\User\Type\ProfileAuthenticationFormType
     */
    protected function getApplicationSonataUser_Profile_Authentication_Form_TypeService()
    {
        return $this->services['application_sonata_user.profile.authentication.form.type'] = new \AppBundle\Form\User\Type\ProfileAuthenticationFormType('AppBundle\\Entity\\User\\User');
    }

    /**
     * Gets the public 'application_user.locale_listener' shared service.
     *
     * @return \AppBundle\EventListener\User\LocaleListener
     */
    protected function getApplicationUser_LocaleListenerService()
    {
        return $this->services['application_user.locale_listener'] = new \AppBundle\EventListener\User\LocaleListener('es');
    }

    /**
     * Gets the public 'application_user.profile.form.type' shared service.
     *
     * @return \AppBundle\Form\User\Type\ProfileFormType
     */
    protected function getApplicationUser_Profile_Form_TypeService()
    {
        return $this->services['application_user.profile.form.type'] = new \AppBundle\Form\User\Type\ProfileFormType('AppBundle\\Entity\\User\\User');
    }

    /**
     * Gets the public 'application_user.registration.form.type' shared service.
     *
     * @return \AppBundle\Form\User\Type\RegistrationFormType
     */
    protected function getApplicationUser_Registration_Form_TypeService()
    {
        return $this->services['application_user.registration.form.type'] = new \AppBundle\Form\User\Type\RegistrationFormType('AppBundle\\Entity\\User\\User');
    }

    /**
     * Gets the public 'application_user.user_locale_listener' shared service.
     *
     * @return \AppBundle\EventListener\User\UserLocaleListener
     */
    protected function getApplicationUser_UserLocaleListenerService()
    {
        return $this->services['application_user.user_locale_listener'] = new \AppBundle\EventListener\User\UserLocaleListener(${($_ = isset($this->services['session']) ? $this->services['session'] : $this->get('session')) && false ?: '_'});
    }

    /**
     * Gets the public 'assets.context' shared service.
     *
     * @return \Symfony\Component\Asset\Context\RequestStackContext
     */
    protected function getAssets_ContextService()
    {
        return $this->services['assets.context'] = new \Symfony\Component\Asset\Context\RequestStackContext(${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'});
    }

    /**
     * Gets the public 'assets.packages' shared service.
     *
     * @return \Symfony\Component\Asset\Packages
     */
    protected function getAssets_PackagesService()
    {
        return $this->services['assets.packages'] = new \Symfony\Component\Asset\Packages(new \Symfony\Component\Asset\PathPackage('', new \Symfony\Component\Asset\VersionStrategy\EmptyVersionStrategy(), ${($_ = isset($this->services['assets.context']) ? $this->services['assets.context'] : $this->get('assets.context')) && false ?: '_'}), array());
    }

    /**
     * Gets the public 'bazinga_hateoas.expression_language' shared service.
     *
     * @return \Bazinga\Bundle\HateoasBundle\ExpressionLanguage\ExpressionLanguage
     */
    protected function getBazingaHateoas_ExpressionLanguageService()
    {
        return $this->services['bazinga_hateoas.expression_language'] = new \Bazinga\Bundle\HateoasBundle\ExpressionLanguage\ExpressionLanguage();
    }

    /**
     * Gets the public 'cache.app' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\TraceableAdapter
     */
    protected function getCache_AppService()
    {
        return $this->services['cache.app'] = new \Symfony\Component\Cache\Adapter\TraceableAdapter(${($_ = isset($this->services['cache.app.recorder_inner']) ? $this->services['cache.app.recorder_inner'] : $this->getCache_App_RecorderInnerService()) && false ?: '_'});
    }

    /**
     * Gets the public 'cache.default_clearer' shared service.
     *
     * @return \Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer
     */
    protected function getCache_DefaultClearerService()
    {
        return $this->services['cache.default_clearer'] = new \Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer(array('cache.app' => ${($_ = isset($this->services['cache.app']) ? $this->services['cache.app'] : $this->get('cache.app')) && false ?: '_'}, 'cache.system' => ${($_ = isset($this->services['cache.system']) ? $this->services['cache.system'] : $this->get('cache.system')) && false ?: '_'}, 'cache.validator' => ${($_ = isset($this->services['cache.validator']) ? $this->services['cache.validator'] : $this->getCache_ValidatorService()) && false ?: '_'}, 'cache.annotations' => ${($_ = isset($this->services['cache.annotations']) ? $this->services['cache.annotations'] : $this->getCache_AnnotationsService()) && false ?: '_'}));
    }

    /**
     * Gets the public 'cache.global_clearer' shared service.
     *
     * @return \Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer
     */
    protected function getCache_GlobalClearerService()
    {
        return $this->services['cache.global_clearer'] = new \Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer(array('cache.app' => ${($_ = isset($this->services['cache.app']) ? $this->services['cache.app'] : $this->get('cache.app')) && false ?: '_'}, 'cache.system' => ${($_ = isset($this->services['cache.system']) ? $this->services['cache.system'] : $this->get('cache.system')) && false ?: '_'}, 'cache.validator' => ${($_ = isset($this->services['cache.validator']) ? $this->services['cache.validator'] : $this->getCache_ValidatorService()) && false ?: '_'}, 'cache.annotations' => ${($_ = isset($this->services['cache.annotations']) ? $this->services['cache.annotations'] : $this->getCache_AnnotationsService()) && false ?: '_'}));
    }

    /**
     * Gets the public 'cache.system' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\TraceableAdapter
     */
    protected function getCache_SystemService()
    {
        return $this->services['cache.system'] = new \Symfony\Component\Cache\Adapter\TraceableAdapter(${($_ = isset($this->services['cache.system.recorder_inner']) ? $this->services['cache.system.recorder_inner'] : $this->getCache_System_RecorderInnerService()) && false ?: '_'});
    }

    /**
     * Gets the public 'cache_clearer' shared service.
     *
     * @return \Symfony\Component\HttpKernel\CacheClearer\ChainCacheClearer
     */
    protected function getCacheClearerService()
    {
        return $this->services['cache_clearer'] = new \Symfony\Component\HttpKernel\CacheClearer\ChainCacheClearer(array(0 => ${($_ = isset($this->services['cache.default_clearer']) ? $this->services['cache.default_clearer'] : $this->get('cache.default_clearer')) && false ?: '_'}));
    }

    /**
     * Gets the public 'cache_warmer' shared service.
     *
     * @return \Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerAggregate
     */
    protected function getCacheWarmerService()
    {
        $a = ${($_ = isset($this->services['kernel']) ? $this->services['kernel'] : $this->get('kernel')) && false ?: '_'};
        $b = ${($_ = isset($this->services['templating.filename_parser']) ? $this->services['templating.filename_parser'] : $this->get('templating.filename_parser')) && false ?: '_'};

        $c = new \Symfony\Bundle\FrameworkBundle\CacheWarmer\TemplateFinder($a, $b, ($this->targetDirs[3].'\\app/Resources'));

        return $this->services['cache_warmer'] = new \Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerAggregate(array(0 => new \Symfony\Bundle\FrameworkBundle\CacheWarmer\TemplatePathsCacheWarmer($c, ${($_ = isset($this->services['templating.locator']) ? $this->services['templating.locator'] : $this->getTemplating_LocatorService()) && false ?: '_'}), 1 => new \Symfony\Bundle\FrameworkBundle\CacheWarmer\ValidatorCacheWarmer(${($_ = isset($this->services['validator.builder']) ? $this->services['validator.builder'] : $this->get('validator.builder')) && false ?: '_'}, (__DIR__.'/validation.php'), ${($_ = isset($this->services['cache.validator']) ? $this->services['cache.validator'] : $this->getCache_ValidatorService()) && false ?: '_'}), 2 => new \Symfony\Bundle\FrameworkBundle\CacheWarmer\TranslationsCacheWarmer(${($_ = isset($this->services['translator.default']) ? $this->services['translator.default'] : $this->get('translator.default')) && false ?: '_'}), 3 => new \Symfony\Bundle\FrameworkBundle\CacheWarmer\RouterCacheWarmer(${($_ = isset($this->services['router']) ? $this->services['router'] : $this->get('router')) && false ?: '_'}), 4 => new \Symfony\Bundle\FrameworkBundle\CacheWarmer\AnnotationsCacheWarmer(${($_ = isset($this->services['annotations.reader']) ? $this->services['annotations.reader'] : $this->getAnnotations_ReaderService()) && false ?: '_'}, (__DIR__.'/annotations.php'), ${($_ = isset($this->services['cache.annotations']) ? $this->services['cache.annotations'] : $this->getCache_AnnotationsService()) && false ?: '_'}), 5 => new \Symfony\Bundle\TwigBundle\CacheWarmer\TemplateCacheCacheWarmer(new \Symfony\Component\DependencyInjection\ServiceLocator(array('twig' => function () {
            $f = function (\Twig\Environment $v) { return $v; }; return $f(${($_ = isset($this->services['twig']) ? $this->services['twig'] : $this->get('twig')) && false ?: '_'});
        })), $c, array(($this->targetDirs[3].'\\vendor\\knplabs\\knp-menu\\src\\Knp\\Menu/Resources/views') => NULL, ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Bridge\\Twig/Resources/views/Form') => NULL)), 6 => new \Symfony\Bundle\TwigBundle\CacheWarmer\TemplateCacheWarmer($this, new \Symfony\Bundle\TwigBundle\TemplateIterator($a, ($this->targetDirs[3].'\\app'), array(($this->targetDirs[3].'\\vendor\\knplabs\\knp-menu\\src\\Knp\\Menu/Resources/views') => NULL, ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Bridge\\Twig/Resources/views/Form') => NULL))), 7 => new \Symfony\Bridge\Doctrine\CacheWarmer\ProxyCacheWarmer(${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'}), 8 => ${($_ = isset($this->services['sonata.admin.route.cache_warmup']) ? $this->services['sonata.admin.route.cache_warmup'] : $this->get('sonata.admin.route.cache_warmup')) && false ?: '_'}));
    }

    /**
     * Gets the public 'captcha.type' shared service.
     *
     * @return \Gregwar\CaptchaBundle\Type\CaptchaType
     */
    protected function getCaptcha_TypeService()
    {
        return $this->services['captcha.type'] = new \Gregwar\CaptchaBundle\Type\CaptchaType(${($_ = isset($this->services['session']) ? $this->services['session'] : $this->get('session')) && false ?: '_'}, ${($_ = isset($this->services['gregwar_captcha.generator']) ? $this->services['gregwar_captcha.generator'] : $this->get('gregwar_captcha.generator')) && false ?: '_'}, ${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, array('width' => 200, 'height' => 50, 'length' => 4, 'font' => ($this->targetDirs[3].'\\vendor\\gregwar\\captcha-bundle\\DependencyInjection/../Generator/Font/captcha.ttf'), 'keep_value' => false, 'charset' => 'abcdefhjkmnprstuvwxyz23456789', 'as_file' => false, 'as_url' => false, 'reload' => false, 'image_folder' => 'captcha', 'web_path' => ($this->targetDirs[3].'\\app/../web'), 'gc_freq' => 100, 'expiration' => 60, 'quality' => 50, 'invalid_message' => 'Bad code value', 'bypass_code' => NULL, 'whitelist_key' => 'captcha_whitelist_key', 'humanity' => 0, 'distortion' => true, 'max_front_lines' => NULL, 'max_behind_lines' => NULL, 'interpolation' => true, 'text_color' => array(), 'background_color' => array(), 'background_images' => array(), 'disabled' => false, 'ignore_all_effects' => false));
    }

    /**
     * Gets the public 'config_cache_factory' shared service.
     *
     * @return \Symfony\Component\Config\ResourceCheckerConfigCacheFactory
     */
    protected function getConfigCacheFactoryService()
    {
        return $this->services['config_cache_factory'] = new \Symfony\Component\Config\ResourceCheckerConfigCacheFactory(new RewindableGenerator(function () {
            yield 0 => ${($_ = isset($this->services['1_c96ae0422b1c97f376c0bdbe6aae9aae67afb2b1a5eb7f331b0f8109dcf05b7f']) ? $this->services['1_c96ae0422b1c97f376c0bdbe6aae9aae67afb2b1a5eb7f331b0f8109dcf05b7f'] : $this->get1C96ae0422b1c97f376c0bdbe6aae9aae67afb2b1a5eb7f331b0f8109dcf05b7fService()) && false ?: '_'};
            yield 1 => ${($_ = isset($this->services['2_c96ae0422b1c97f376c0bdbe6aae9aae67afb2b1a5eb7f331b0f8109dcf05b7f']) ? $this->services['2_c96ae0422b1c97f376c0bdbe6aae9aae67afb2b1a5eb7f331b0f8109dcf05b7f'] : $this->get2C96ae0422b1c97f376c0bdbe6aae9aae67afb2b1a5eb7f331b0f8109dcf05b7fService()) && false ?: '_'};
        }, 2));
    }

    /**
     * Gets the public 'console.command.symfony_bundle_securitybundle_command_userpasswordencodercommand' shared service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Command\UserPasswordEncoderCommand
     */
    protected function getConsole_Command_SymfonyBundleSecuritybundleCommandUserpasswordencodercommandService()
    {
        return $this->services['console.command.symfony_bundle_securitybundle_command_userpasswordencodercommand'] = new \Symfony\Bundle\SecurityBundle\Command\UserPasswordEncoderCommand(${($_ = isset($this->services['security.encoder_factory']) ? $this->services['security.encoder_factory'] : $this->get('security.encoder_factory')) && false ?: '_'}, array(0 => 'AppBundle\\Entity\\User\\User'));
    }

    /**
     * Gets the public 'console.command.symfony_bundle_webserverbundle_command_serverruncommand' shared service.
     *
     * @return \Symfony\Bundle\WebServerBundle\Command\ServerRunCommand
     */
    protected function getConsole_Command_SymfonyBundleWebserverbundleCommandServerruncommandService()
    {
        return $this->services['console.command.symfony_bundle_webserverbundle_command_serverruncommand'] = new \Symfony\Bundle\WebServerBundle\Command\ServerRunCommand(($this->targetDirs[3].'/public'), 'dev');
    }

    /**
     * Gets the public 'console.command.symfony_bundle_webserverbundle_command_serverstartcommand' shared service.
     *
     * @return \Symfony\Bundle\WebServerBundle\Command\ServerStartCommand
     */
    protected function getConsole_Command_SymfonyBundleWebserverbundleCommandServerstartcommandService()
    {
        return $this->services['console.command.symfony_bundle_webserverbundle_command_serverstartcommand'] = new \Symfony\Bundle\WebServerBundle\Command\ServerStartCommand(($this->targetDirs[3].'/public'), 'dev');
    }

    /**
     * Gets the public 'console.command.symfony_bundle_webserverbundle_command_serverstatuscommand' shared service.
     *
     * @return \Symfony\Bundle\WebServerBundle\Command\ServerStatusCommand
     */
    protected function getConsole_Command_SymfonyBundleWebserverbundleCommandServerstatuscommandService()
    {
        return $this->services['console.command.symfony_bundle_webserverbundle_command_serverstatuscommand'] = new \Symfony\Bundle\WebServerBundle\Command\ServerStatusCommand();
    }

    /**
     * Gets the public 'console.command.symfony_bundle_webserverbundle_command_serverstopcommand' shared service.
     *
     * @return \Symfony\Bundle\WebServerBundle\Command\ServerStopCommand
     */
    protected function getConsole_Command_SymfonyBundleWebserverbundleCommandServerstopcommandService()
    {
        return $this->services['console.command.symfony_bundle_webserverbundle_command_serverstopcommand'] = new \Symfony\Bundle\WebServerBundle\Command\ServerStopCommand();
    }

    /**
     * Gets the public 'data_collector.dump' shared service.
     *
     * @return \Symfony\Component\HttpKernel\DataCollector\DumpDataCollector
     */
    protected function getDataCollector_DumpService()
    {
        return $this->services['data_collector.dump'] = new \Symfony\Component\HttpKernel\DataCollector\DumpDataCollector(${($_ = isset($this->services['debug.stopwatch']) ? $this->services['debug.stopwatch'] : $this->get('debug.stopwatch', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, ${($_ = isset($this->services['debug.file_link_formatter']) ? $this->services['debug.file_link_formatter'] : $this->getDebug_FileLinkFormatterService()) && false ?: '_'}, 'UTF-8', ${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'}, NULL);
    }

    /**
     * Gets the public 'data_collector.form' shared service.
     *
     * @return \Symfony\Component\Form\Extension\DataCollector\FormDataCollector
     */
    protected function getDataCollector_FormService()
    {
        return $this->services['data_collector.form'] = new \Symfony\Component\Form\Extension\DataCollector\FormDataCollector(${($_ = isset($this->services['data_collector.form.extractor']) ? $this->services['data_collector.form.extractor'] : $this->get('data_collector.form.extractor')) && false ?: '_'});
    }

    /**
     * Gets the public 'data_collector.form.extractor' shared service.
     *
     * @return \Symfony\Component\Form\Extension\DataCollector\FormDataExtractor
     */
    protected function getDataCollector_Form_ExtractorService()
    {
        return $this->services['data_collector.form.extractor'] = new \Symfony\Component\Form\Extension\DataCollector\FormDataExtractor();
    }

    /**
     * Gets the public 'data_collector.request' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\DataCollector\RequestDataCollector
     */
    protected function getDataCollector_RequestService()
    {
        return $this->services['data_collector.request'] = new \Symfony\Bundle\FrameworkBundle\DataCollector\RequestDataCollector();
    }

    /**
     * Gets the public 'data_collector.router' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\DataCollector\RouterDataCollector
     */
    protected function getDataCollector_RouterService()
    {
        return $this->services['data_collector.router'] = new \Symfony\Bundle\FrameworkBundle\DataCollector\RouterDataCollector();
    }

    /**
     * Gets the public 'data_collector.translation' shared service.
     *
     * @return \Symfony\Component\Translation\DataCollector\TranslationDataCollector
     */
    protected function getDataCollector_TranslationService()
    {
        return $this->services['data_collector.translation'] = new \Symfony\Component\Translation\DataCollector\TranslationDataCollector(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'});
    }

    /**
     * Gets the public 'data_dog_audit.admin.audit_log' service.
     *
     * @return \AppBundle\Admin\Audit\AuditLogAdmin
     */
    protected function getDataDogAudit_Admin_AuditLogService()
    {
        $instance = new \AppBundle\Admin\Audit\AuditLogAdmin('data_dog_audit.admin.audit_log', 'DataDog\\AuditBundle\\Entity\\AuditLog', 'SonataAdminBundle:CRUD');

        $instance->setTranslationDomain('AppBundle');
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.underscore']) ? $this->services['sonata.admin.label.strategy.underscore'] : $this->get('sonata.admin.label.strategy.underscore')) && false ?: '_'});
        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('System Logs');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['data_dog_audit.admin.audit_log.template_registry']) ? $this->services['data_dog_audit.admin.audit_log.template_registry'] : $this->get('data_dog_audit.admin.audit_log.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'data_dog_audit.admin.audit_log.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getDataDogAudit_Admin_AuditLog_TemplateRegistryService()
    {
        return $this->services['data_dog_audit.admin.audit_log.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'datadog.event_subscriber.audit' shared service.
     *
     * @return \DataDog\AuditBundle\EventSubscriber\AuditSubscriber
     */
    protected function getDatadog_EventSubscriber_AuditService()
    {
        $this->services['datadog.event_subscriber.audit'] = $instance = new \DataDog\AuditBundle\EventSubscriber\AuditSubscriber(${($_ = isset($this->services['security.token_storage']) ? $this->services['security.token_storage'] : $this->get('security.token_storage')) && false ?: '_'});

        $instance->addUnauditedEntities(array());

        return $instance;
    }

    /**
     * Gets the public 'debug.argument_resolver' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\TraceableArgumentResolver
     */
    protected function getDebug_ArgumentResolverService()
    {
        return $this->services['debug.argument_resolver'] = new \Symfony\Component\HttpKernel\Controller\TraceableArgumentResolver(new \Symfony\Component\HttpKernel\Controller\ArgumentResolver(new \Symfony\Component\HttpKernel\ControllerMetadata\ArgumentMetadataFactory(), new RewindableGenerator(function () {
            yield 0 => ${($_ = isset($this->services['argument_resolver.request_attribute']) ? $this->services['argument_resolver.request_attribute'] : $this->getArgumentResolver_RequestAttributeService()) && false ?: '_'};
            yield 1 => ${($_ = isset($this->services['argument_resolver.request']) ? $this->services['argument_resolver.request'] : $this->getArgumentResolver_RequestService()) && false ?: '_'};
            yield 2 => ${($_ = isset($this->services['argument_resolver.session']) ? $this->services['argument_resolver.session'] : $this->getArgumentResolver_SessionService()) && false ?: '_'};
            yield 3 => ${($_ = isset($this->services['security.user_value_resolver']) ? $this->services['security.user_value_resolver'] : $this->getSecurity_UserValueResolverService()) && false ?: '_'};
            yield 4 => ${($_ = isset($this->services['argument_resolver.service']) ? $this->services['argument_resolver.service'] : $this->getArgumentResolver_ServiceService()) && false ?: '_'};
            yield 5 => ${($_ = isset($this->services['argument_resolver.default']) ? $this->services['argument_resolver.default'] : $this->getArgumentResolver_DefaultService()) && false ?: '_'};
            yield 6 => ${($_ = isset($this->services['argument_resolver.variadic']) ? $this->services['argument_resolver.variadic'] : $this->getArgumentResolver_VariadicService()) && false ?: '_'};
        }, 7)), ${($_ = isset($this->services['debug.stopwatch']) ? $this->services['debug.stopwatch'] : $this->get('debug.stopwatch')) && false ?: '_'});
    }

    /**
     * Gets the public 'debug.controller_resolver' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\TraceableControllerResolver
     */
    protected function getDebug_ControllerResolverService()
    {
        return $this->services['debug.controller_resolver'] = new \Symfony\Component\HttpKernel\Controller\TraceableControllerResolver(new \Symfony\Bundle\FrameworkBundle\Controller\ControllerResolver($this, ${($_ = isset($this->services['controller_name_converter']) ? $this->services['controller_name_converter'] : $this->getControllerNameConverterService()) && false ?: '_'}, ${($_ = isset($this->services['monolog.logger.request']) ? $this->services['monolog.logger.request'] : $this->get('monolog.logger.request', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}), ${($_ = isset($this->services['debug.stopwatch']) ? $this->services['debug.stopwatch'] : $this->get('debug.stopwatch')) && false ?: '_'}, ${($_ = isset($this->services['debug.argument_resolver']) ? $this->services['debug.argument_resolver'] : $this->get('debug.argument_resolver')) && false ?: '_'});
    }

    /**
     * Gets the public 'debug.debug_handlers_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\DebugHandlersListener
     */
    protected function getDebug_DebugHandlersListenerService()
    {
        return $this->services['debug.debug_handlers_listener'] = new \Symfony\Component\HttpKernel\EventListener\DebugHandlersListener(NULL, ${($_ = isset($this->services['monolog.logger.php']) ? $this->services['monolog.logger.php'] : $this->get('monolog.logger.php', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, -1, -1, true, ${($_ = isset($this->services['debug.file_link_formatter']) ? $this->services['debug.file_link_formatter'] : $this->getDebug_FileLinkFormatterService()) && false ?: '_'}, true);
    }

    /**
     * Gets the public 'debug.dump_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\DumpListener
     */
    protected function getDebug_DumpListenerService()
    {
        return $this->services['debug.dump_listener'] = new \Symfony\Component\HttpKernel\EventListener\DumpListener(${($_ = isset($this->services['var_dumper.cloner']) ? $this->services['var_dumper.cloner'] : $this->get('var_dumper.cloner')) && false ?: '_'}, ${($_ = isset($this->services['var_dumper.cli_dumper']) ? $this->services['var_dumper.cli_dumper'] : $this->get('var_dumper.cli_dumper')) && false ?: '_'});
    }

    /**
     * Gets the public 'debug.event_dispatcher' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher
     */
    protected function getDebug_EventDispatcherService()
    {
        $this->services['debug.event_dispatcher'] = $instance = new \Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher(new \Symfony\Component\EventDispatcher\ContainerAwareEventDispatcher($this), ${($_ = isset($this->services['debug.stopwatch']) ? $this->services['debug.stopwatch'] : $this->get('debug.stopwatch')) && false ?: '_'}, ${($_ = isset($this->services['monolog.logger.event']) ? $this->services['monolog.logger.event'] : $this->get('monolog.logger.event', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});

        $instance->addListener('security.interactive_login', array(0 => function () {
            return ${($_ = isset($this->services['application_user.user_locale_listener']) ? $this->services['application_user.user_locale_listener'] : $this->get('application_user.user_locale_listener')) && false ?: '_'};
        }, 1 => 'onInteractiveLogin'), 0);
        $instance->addListener('kernel.controller', array(0 => function () {
            return ${($_ = isset($this->services['data_collector.router']) ? $this->services['data_collector.router'] : $this->get('data_collector.router')) && false ?: '_'};
        }, 1 => 'onKernelController'), 0);
        $instance->addListener('kernel.request', array(0 => function () {
            return ${($_ = isset($this->services['knp_paginator.subscriber.sliding_pagination']) ? $this->services['knp_paginator.subscriber.sliding_pagination'] : $this->get('knp_paginator.subscriber.sliding_pagination')) && false ?: '_'};
        }, 1 => 'onKernelRequest'), 0);
        $instance->addListener('kernel.request', array(0 => function () {
            return ${($_ = isset($this->services['fos_rest.mime_type_listener']) ? $this->services['fos_rest.mime_type_listener'] : $this->get('fos_rest.mime_type_listener')) && false ?: '_'};
        }, 1 => 'onKernelRequest'), 200);
        $instance->addListener('kernel.request', array(0 => function () {
            return ${($_ = isset($this->services['fos_rest.body_listener']) ? $this->services['fos_rest.body_listener'] : $this->get('fos_rest.body_listener')) && false ?: '_'};
        }, 1 => 'onKernelRequest'), 10);
        $instance->addListener('kernel.request', array(0 => function () {
            return ${($_ = isset($this->services['fos_rest.format_listener']) ? $this->services['fos_rest.format_listener'] : $this->get('fos_rest.format_listener')) && false ?: '_'};
        }, 1 => 'onKernelRequest'), 34);
        $instance->addListener('kernel.controller', array(0 => function () {
            return ${($_ = isset($this->services['fos_rest.param_fetcher_listener']) ? $this->services['fos_rest.param_fetcher_listener'] : $this->get('fos_rest.param_fetcher_listener')) && false ?: '_'};
        }, 1 => 'onKernelController'), 5);
        $instance->addListener('kernel.request', array(0 => function () {
            return ${($_ = isset($this->services['nelmio_api_doc.event_listener.request']) ? $this->services['nelmio_api_doc.event_listener.request'] : $this->get('nelmio_api_doc.event_listener.request')) && false ?: '_'};
        }, 1 => 'onKernelRequest'), 0);
        $instance->addListener('kernel.request', array(0 => function () {
            return ${($_ = isset($this->services['nelmio_cors.cors_listener']) ? $this->services['nelmio_cors.cors_listener'] : $this->get('nelmio_cors.cors_listener')) && false ?: '_'};
        }, 1 => 'onKernelRequest'), 250);
        $instance->addListener('kernel.response', array(0 => function () {
            return ${($_ = isset($this->services['sonata.block.cache.handler.default']) ? $this->services['sonata.block.cache.handler.default'] : $this->get('sonata.block.cache.handler.default')) && false ?: '_'};
        }, 1 => 'onKernelResponse'), 0);
        $instance->addListener('lexik_filter.prepare', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.filter_prepare']) ? $this->services['lexik_form_filter.filter_prepare'] : $this->get('lexik_form_filter.filter_prepare')) && false ?: '_'};
        }, 1 => 'onFilterBuilderPrepare'), 0);
        $instance->addListener('lexik_filter.apply_filters.orm', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.apply_filter.doctrine_orm']) ? $this->services['lexik_form_filter.apply_filter.doctrine_orm'] : $this->get('lexik_form_filter.apply_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'onApplyFilterCondition'), 0);
        $instance->addListener('lexik_jwt_authentication.on_authentication_success', array(0 => function () {
            return ${($_ = isset($this->services['gesdinet.jwtrefreshtoken.send_token']) ? $this->services['gesdinet.jwtrefreshtoken.send_token'] : $this->get('gesdinet.jwtrefreshtoken.send_token')) && false ?: '_'};
        }, 1 => 'attachRefreshToken'), 0);
        $instance->addListener('kernel.request', array(0 => function () {
            return ${($_ = isset($this->services['application_user.locale_listener']) ? $this->services['application_user.locale_listener'] : $this->get('application_user.locale_listener')) && false ?: '_'};
        }, 1 => 'onKernelRequest'), 15);
        $instance->addListener('kernel.response', array(0 => function () {
            return ${($_ = isset($this->services['response_listener']) ? $this->services['response_listener'] : $this->get('response_listener')) && false ?: '_'};
        }, 1 => 'onKernelResponse'), 0);
        $instance->addListener('kernel.response', array(0 => function () {
            return ${($_ = isset($this->services['streamed_response_listener']) ? $this->services['streamed_response_listener'] : $this->get('streamed_response_listener')) && false ?: '_'};
        }, 1 => 'onKernelResponse'), -1024);
        $instance->addListener('kernel.request', array(0 => function () {
            return ${($_ = isset($this->services['locale_listener']) ? $this->services['locale_listener'] : $this->get('locale_listener')) && false ?: '_'};
        }, 1 => 'onKernelRequest'), 16);
        $instance->addListener('kernel.finish_request', array(0 => function () {
            return ${($_ = isset($this->services['locale_listener']) ? $this->services['locale_listener'] : $this->get('locale_listener')) && false ?: '_'};
        }, 1 => 'onKernelFinishRequest'), 0);
        $instance->addListener('kernel.request', array(0 => function () {
            return ${($_ = isset($this->services['validate_request_listener']) ? $this->services['validate_request_listener'] : $this->get('validate_request_listener')) && false ?: '_'};
        }, 1 => 'onKernelRequest'), 256);
        $instance->addListener('kernel.request', array(0 => function () {
            return ${($_ = isset($this->services['resolve_controller_name_subscriber']) ? $this->services['resolve_controller_name_subscriber'] : $this->getResolveControllerNameSubscriberService()) && false ?: '_'};
        }, 1 => 'onKernelRequest'), 24);
        $instance->addListener('console.error', array(0 => function () {
            return ${($_ = isset($this->services['console.error_listener']) ? $this->services['console.error_listener'] : $this->getConsole_ErrorListenerService()) && false ?: '_'};
        }, 1 => 'onConsoleError'), -128);
        $instance->addListener('console.terminate', array(0 => function () {
            return ${($_ = isset($this->services['console.error_listener']) ? $this->services['console.error_listener'] : $this->getConsole_ErrorListenerService()) && false ?: '_'};
        }, 1 => 'onConsoleTerminate'), -128);
        $instance->addListener('kernel.request', array(0 => function () {
            return ${($_ = isset($this->services['session_listener']) ? $this->services['session_listener'] : $this->get('session_listener')) && false ?: '_'};
        }, 1 => 'onKernelRequest'), 128);
        $instance->addListener('kernel.response', array(0 => function () {
            return ${($_ = isset($this->services['session.save_listener']) ? $this->services['session.save_listener'] : $this->get('session.save_listener')) && false ?: '_'};
        }, 1 => 'onKernelResponse'), -1000);
        $instance->addListener('kernel.request', array(0 => function () {
            return ${($_ = isset($this->services['fragment.listener']) ? $this->services['fragment.listener'] : $this->get('fragment.listener')) && false ?: '_'};
        }, 1 => 'onKernelRequest'), 48);
        $instance->addListener('kernel.request', array(0 => function () {
            return ${($_ = isset($this->services['translator_listener']) ? $this->services['translator_listener'] : $this->get('translator_listener')) && false ?: '_'};
        }, 1 => 'onKernelRequest'), 10);
        $instance->addListener('kernel.finish_request', array(0 => function () {
            return ${($_ = isset($this->services['translator_listener']) ? $this->services['translator_listener'] : $this->get('translator_listener')) && false ?: '_'};
        }, 1 => 'onKernelFinishRequest'), 0);
        $instance->addListener('kernel.response', array(0 => function () {
            return ${($_ = isset($this->services['profiler_listener']) ? $this->services['profiler_listener'] : $this->get('profiler_listener')) && false ?: '_'};
        }, 1 => 'onKernelResponse'), -100);
        $instance->addListener('kernel.exception', array(0 => function () {
            return ${($_ = isset($this->services['profiler_listener']) ? $this->services['profiler_listener'] : $this->get('profiler_listener')) && false ?: '_'};
        }, 1 => 'onKernelException'), 0);
        $instance->addListener('kernel.terminate', array(0 => function () {
            return ${($_ = isset($this->services['profiler_listener']) ? $this->services['profiler_listener'] : $this->get('profiler_listener')) && false ?: '_'};
        }, 1 => 'onKernelTerminate'), -1024);
        $instance->addListener('kernel.controller', array(0 => function () {
            return ${($_ = isset($this->services['data_collector.request']) ? $this->services['data_collector.request'] : $this->get('data_collector.request')) && false ?: '_'};
        }, 1 => 'onKernelController'), 0);
        $instance->addListener('kernel.response', array(0 => function () {
            return ${($_ = isset($this->services['data_collector.request']) ? $this->services['data_collector.request'] : $this->get('data_collector.request')) && false ?: '_'};
        }, 1 => 'onKernelResponse'), 0);
        $instance->addListener('kernel.request', array(0 => function () {
            return ${($_ = isset($this->services['debug.debug_handlers_listener']) ? $this->services['debug.debug_handlers_listener'] : $this->get('debug.debug_handlers_listener')) && false ?: '_'};
        }, 1 => 'configure'), 2048);
        $instance->addListener('console.command', array(0 => function () {
            return ${($_ = isset($this->services['debug.debug_handlers_listener']) ? $this->services['debug.debug_handlers_listener'] : $this->get('debug.debug_handlers_listener')) && false ?: '_'};
        }, 1 => 'configure'), 2048);
        $instance->addListener('kernel.request', array(0 => function () {
            return ${($_ = isset($this->services['router_listener']) ? $this->services['router_listener'] : $this->get('router_listener')) && false ?: '_'};
        }, 1 => 'onKernelRequest'), 32);
        $instance->addListener('kernel.finish_request', array(0 => function () {
            return ${($_ = isset($this->services['router_listener']) ? $this->services['router_listener'] : $this->get('router_listener')) && false ?: '_'};
        }, 1 => 'onKernelFinishRequest'), 0);
        $instance->addListener('kernel.request', array(0 => function () {
            return ${($_ = isset($this->services['security.firewall']) ? $this->services['security.firewall'] : $this->get('security.firewall')) && false ?: '_'};
        }, 1 => 'onKernelRequest'), 8);
        $instance->addListener('kernel.finish_request', array(0 => function () {
            return ${($_ = isset($this->services['security.firewall']) ? $this->services['security.firewall'] : $this->get('security.firewall')) && false ?: '_'};
        }, 1 => 'onKernelFinishRequest'), 0);
        $instance->addListener('kernel.response', array(0 => function () {
            return ${($_ = isset($this->services['security.rememberme.response_listener']) ? $this->services['security.rememberme.response_listener'] : $this->get('security.rememberme.response_listener')) && false ?: '_'};
        }, 1 => 'onKernelResponse'), 0);
        $instance->addListener('kernel.exception', array(0 => function () {
            return ${($_ = isset($this->services['twig.exception_listener']) ? $this->services['twig.exception_listener'] : $this->get('twig.exception_listener')) && false ?: '_'};
        }, 1 => 'onKernelException'), -128);
        $instance->addListener('console.command', array(0 => function () {
            return ${($_ = isset($this->services['monolog.handler.console']) ? $this->services['monolog.handler.console'] : $this->get('monolog.handler.console')) && false ?: '_'};
        }, 1 => 'onCommand'), 255);
        $instance->addListener('console.terminate', array(0 => function () {
            return ${($_ = isset($this->services['monolog.handler.console']) ? $this->services['monolog.handler.console'] : $this->get('monolog.handler.console')) && false ?: '_'};
        }, 1 => 'onTerminate'), -255);
        $instance->addListener('kernel.exception', array(0 => function () {
            return ${($_ = isset($this->services['swiftmailer.email_sender.listener']) ? $this->services['swiftmailer.email_sender.listener'] : $this->get('swiftmailer.email_sender.listener')) && false ?: '_'};
        }, 1 => 'onException'), 0);
        $instance->addListener('kernel.terminate', array(0 => function () {
            return ${($_ = isset($this->services['swiftmailer.email_sender.listener']) ? $this->services['swiftmailer.email_sender.listener'] : $this->get('swiftmailer.email_sender.listener')) && false ?: '_'};
        }, 1 => 'onTerminate'), 0);
        $instance->addListener('console.error', array(0 => function () {
            return ${($_ = isset($this->services['swiftmailer.email_sender.listener']) ? $this->services['swiftmailer.email_sender.listener'] : $this->get('swiftmailer.email_sender.listener')) && false ?: '_'};
        }, 1 => 'onException'), 0);
        $instance->addListener('console.terminate', array(0 => function () {
            return ${($_ = isset($this->services['swiftmailer.email_sender.listener']) ? $this->services['swiftmailer.email_sender.listener'] : $this->get('swiftmailer.email_sender.listener')) && false ?: '_'};
        }, 1 => 'onTerminate'), 0);
        $instance->addListener('kernel.controller', array(0 => function () {
            return ${($_ = isset($this->services['sensio_framework_extra.controller.listener']) ? $this->services['sensio_framework_extra.controller.listener'] : $this->get('sensio_framework_extra.controller.listener')) && false ?: '_'};
        }, 1 => 'onKernelController'), 0);
        $instance->addListener('kernel.controller', array(0 => function () {
            return ${($_ = isset($this->services['sensio_framework_extra.converter.listener']) ? $this->services['sensio_framework_extra.converter.listener'] : $this->get('sensio_framework_extra.converter.listener')) && false ?: '_'};
        }, 1 => 'onKernelController'), 0);
        $instance->addListener('kernel.controller', array(0 => function () {
            return ${($_ = isset($this->services['sensio_framework_extra.view.listener']) ? $this->services['sensio_framework_extra.view.listener'] : $this->get('sensio_framework_extra.view.listener')) && false ?: '_'};
        }, 1 => 'onKernelController'), -128);
        $instance->addListener('kernel.view', array(0 => function () {
            return ${($_ = isset($this->services['sensio_framework_extra.view.listener']) ? $this->services['sensio_framework_extra.view.listener'] : $this->get('sensio_framework_extra.view.listener')) && false ?: '_'};
        }, 1 => 'onKernelView'), 0);
        $instance->addListener('kernel.controller', array(0 => function () {
            return ${($_ = isset($this->services['sensio_framework_extra.cache.listener']) ? $this->services['sensio_framework_extra.cache.listener'] : $this->get('sensio_framework_extra.cache.listener')) && false ?: '_'};
        }, 1 => 'onKernelController'), 0);
        $instance->addListener('kernel.response', array(0 => function () {
            return ${($_ = isset($this->services['sensio_framework_extra.cache.listener']) ? $this->services['sensio_framework_extra.cache.listener'] : $this->get('sensio_framework_extra.cache.listener')) && false ?: '_'};
        }, 1 => 'onKernelResponse'), 0);
        $instance->addListener('kernel.controller', array(0 => function () {
            return ${($_ = isset($this->services['sensio_framework_extra.security.listener']) ? $this->services['sensio_framework_extra.security.listener'] : $this->get('sensio_framework_extra.security.listener')) && false ?: '_'};
        }, 1 => 'onKernelController'), 0);
        $instance->addListener('fos_user.security.implicit_login', array(0 => function () {
            return ${($_ = isset($this->services['fos_user.security.interactive_login_listener']) ? $this->services['fos_user.security.interactive_login_listener'] : $this->get('fos_user.security.interactive_login_listener')) && false ?: '_'};
        }, 1 => 'onImplicitLogin'), 0);
        $instance->addListener('security.interactive_login', array(0 => function () {
            return ${($_ = isset($this->services['fos_user.security.interactive_login_listener']) ? $this->services['fos_user.security.interactive_login_listener'] : $this->get('fos_user.security.interactive_login_listener')) && false ?: '_'};
        }, 1 => 'onSecurityInteractiveLogin'), 0);
        $instance->addListener('fos_user.registration.completed', array(0 => function () {
            return ${($_ = isset($this->services['fos_user.listener.authentication']) ? $this->services['fos_user.listener.authentication'] : $this->get('fos_user.listener.authentication')) && false ?: '_'};
        }, 1 => 'authenticate'), 0);
        $instance->addListener('fos_user.registration.confirmed', array(0 => function () {
            return ${($_ = isset($this->services['fos_user.listener.authentication']) ? $this->services['fos_user.listener.authentication'] : $this->get('fos_user.listener.authentication')) && false ?: '_'};
        }, 1 => 'authenticate'), 0);
        $instance->addListener('fos_user.resetting.reset.completed', array(0 => function () {
            return ${($_ = isset($this->services['fos_user.listener.authentication']) ? $this->services['fos_user.listener.authentication'] : $this->get('fos_user.listener.authentication')) && false ?: '_'};
        }, 1 => 'authenticate'), 0);
        $instance->addListener('fos_user.change_password.edit.completed', array(0 => function () {
            return ${($_ = isset($this->services['fos_user.listener.flash']) ? $this->services['fos_user.listener.flash'] : $this->get('fos_user.listener.flash')) && false ?: '_'};
        }, 1 => 'addSuccessFlash'), 0);
        $instance->addListener('fos_user.group.create.completed', array(0 => function () {
            return ${($_ = isset($this->services['fos_user.listener.flash']) ? $this->services['fos_user.listener.flash'] : $this->get('fos_user.listener.flash')) && false ?: '_'};
        }, 1 => 'addSuccessFlash'), 0);
        $instance->addListener('fos_user.group.delete.completed', array(0 => function () {
            return ${($_ = isset($this->services['fos_user.listener.flash']) ? $this->services['fos_user.listener.flash'] : $this->get('fos_user.listener.flash')) && false ?: '_'};
        }, 1 => 'addSuccessFlash'), 0);
        $instance->addListener('fos_user.group.edit.completed', array(0 => function () {
            return ${($_ = isset($this->services['fos_user.listener.flash']) ? $this->services['fos_user.listener.flash'] : $this->get('fos_user.listener.flash')) && false ?: '_'};
        }, 1 => 'addSuccessFlash'), 0);
        $instance->addListener('fos_user.profile.edit.completed', array(0 => function () {
            return ${($_ = isset($this->services['fos_user.listener.flash']) ? $this->services['fos_user.listener.flash'] : $this->get('fos_user.listener.flash')) && false ?: '_'};
        }, 1 => 'addSuccessFlash'), 0);
        $instance->addListener('fos_user.registration.completed', array(0 => function () {
            return ${($_ = isset($this->services['fos_user.listener.flash']) ? $this->services['fos_user.listener.flash'] : $this->get('fos_user.listener.flash')) && false ?: '_'};
        }, 1 => 'addSuccessFlash'), 0);
        $instance->addListener('fos_user.resetting.reset.completed', array(0 => function () {
            return ${($_ = isset($this->services['fos_user.listener.flash']) ? $this->services['fos_user.listener.flash'] : $this->get('fos_user.listener.flash')) && false ?: '_'};
        }, 1 => 'addSuccessFlash'), 0);
        $instance->addListener('fos_user.registration.success', array(0 => function () {
            return ${($_ = isset($this->services['fos_user.listener.email_confirmation']) ? $this->services['fos_user.listener.email_confirmation'] : $this->get('fos_user.listener.email_confirmation')) && false ?: '_'};
        }, 1 => 'onRegistrationSuccess'), 0);
        $instance->addListener('fos_user.resetting.reset.initialize', array(0 => function () {
            return ${($_ = isset($this->services['fos_user.listener.resetting']) ? $this->services['fos_user.listener.resetting'] : $this->get('fos_user.listener.resetting')) && false ?: '_'};
        }, 1 => 'onResettingResetInitialize'), 0);
        $instance->addListener('fos_user.resetting.reset.success', array(0 => function () {
            return ${($_ = isset($this->services['fos_user.listener.resetting']) ? $this->services['fos_user.listener.resetting'] : $this->get('fos_user.listener.resetting')) && false ?: '_'};
        }, 1 => 'onResettingResetSuccess'), 0);
        $instance->addListener('fos_user.resetting.reset.request', array(0 => function () {
            return ${($_ = isset($this->services['fos_user.listener.resetting']) ? $this->services['fos_user.listener.resetting'] : $this->get('fos_user.listener.resetting')) && false ?: '_'};
        }, 1 => 'onResettingResetRequest'), 0);
        $instance->addListener('kernel.exception', array(0 => function () {
            return ${($_ = isset($this->services['fos_rest.exception_listener']) ? $this->services['fos_rest.exception_listener'] : $this->get('fos_rest.exception_listener')) && false ?: '_'};
        }, 1 => 'onKernelException'), -100);
        $instance->addListener('kernel.view', array(0 => function () {
            return ${($_ = isset($this->services['fos_rest.view_response_listener']) ? $this->services['fos_rest.view_response_listener'] : $this->get('fos_rest.view_response_listener')) && false ?: '_'};
        }, 1 => 'onKernelView'), 30);
        $instance->addListener('lexik_form_filter.apply.orm.filter_boolean', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterBoolean'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.filter_checkbox', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterCheckbox'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.filter_choice', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterValue'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.filter_date', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterDate'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.filter_date_range', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterDateRange'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.filter_datetime', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterDateTime'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.filter_datetime_range', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterDateTimeRange'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.filter_entity', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterEntity'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.filter_number', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterNumber'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.filter_number_range', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterNumberRange'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.filter_text', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterText'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.text', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterText'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.email', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterValue'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.integer', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterValue'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.money', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterValue'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.number', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterValue'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.percent', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterValue'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.search', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterValue'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.url', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterValue'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.choice', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterValue'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.entity', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterEntity'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.country', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterValue'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.language', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterValue'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.locale', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterValue'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.timezone', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterValue'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.date', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterDate'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.datetime', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterDate'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.birthday', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterDate'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.checkbox', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterValue'), 0);
        $instance->addListener('lexik_form_filter.apply.orm.radio', array(0 => function () {
            return ${($_ = isset($this->services['lexik_form_filter.get_filter.doctrine_orm']) ? $this->services['lexik_form_filter.get_filter.doctrine_orm'] : $this->get('lexik_form_filter.get_filter.doctrine_orm')) && false ?: '_'};
        }, 1 => 'filterValue'), 0);
        $instance->addListener('kernel.exception', array(0 => function () {
            return ${($_ = isset($this->services['pagerfanta.convert_not_valid_max_per_page_to_not_found_listener']) ? $this->services['pagerfanta.convert_not_valid_max_per_page_to_not_found_listener'] : $this->get('pagerfanta.convert_not_valid_max_per_page_to_not_found_listener')) && false ?: '_'};
        }, 1 => 'onException'), 512);
        $instance->addListener('kernel.exception', array(0 => function () {
            return ${($_ = isset($this->services['pagerfanta.convert_not_valid_current_page_to_not_found_listener']) ? $this->services['pagerfanta.convert_not_valid_current_page_to_not_found_listener'] : $this->get('pagerfanta.convert_not_valid_current_page_to_not_found_listener')) && false ?: '_'};
        }, 1 => 'onException'), 512);
        $instance->addListener('console.command', array(0 => function () {
            return ${($_ = isset($this->services['debug.dump_listener']) ? $this->services['debug.dump_listener'] : $this->get('debug.dump_listener')) && false ?: '_'};
        }, 1 => 'configure'), 1024);
        $instance->addListener('kernel.response', array(0 => function () {
            return ${($_ = isset($this->services['web_profiler.debug_toolbar']) ? $this->services['web_profiler.debug_toolbar'] : $this->get('web_profiler.debug_toolbar')) && false ?: '_'};
        }, 1 => 'onKernelResponse'), -128);
        $instance->addListener('knp_pager.before', array(0 => function () {
            return ${($_ = isset($this->services['knp_paginator.subscriber.paginate']) ? $this->services['knp_paginator.subscriber.paginate'] : $this->get('knp_paginator.subscriber.paginate')) && false ?: '_'};
        }, 1 => 'before'), 0);
        $instance->addListener('knp_pager.pagination', array(0 => function () {
            return ${($_ = isset($this->services['knp_paginator.subscriber.paginate']) ? $this->services['knp_paginator.subscriber.paginate'] : $this->get('knp_paginator.subscriber.paginate')) && false ?: '_'};
        }, 1 => 'pagination'), 0);
        $instance->addListener('knp_pager.before', array(0 => function () {
            return ${($_ = isset($this->services['knp_paginator.subscriber.sortable']) ? $this->services['knp_paginator.subscriber.sortable'] : $this->get('knp_paginator.subscriber.sortable')) && false ?: '_'};
        }, 1 => 'before'), 1);
        $instance->addListener('knp_pager.before', array(0 => function () {
            return ${($_ = isset($this->services['knp_paginator.subscriber.filtration']) ? $this->services['knp_paginator.subscriber.filtration'] : $this->get('knp_paginator.subscriber.filtration')) && false ?: '_'};
        }, 1 => 'before'), 1);
        $instance->addListener('knp_pager.pagination', array(0 => function () {
            return ${($_ = isset($this->services['knp_paginator.subscriber.sliding_pagination']) ? $this->services['knp_paginator.subscriber.sliding_pagination'] : $this->get('knp_paginator.subscriber.sliding_pagination')) && false ?: '_'};
        }, 1 => 'pagination'), 1);

        return $instance;
    }

    /**
     * Gets the public 'debug.stopwatch' shared service.
     *
     * @return \Symfony\Component\Stopwatch\Stopwatch
     */
    protected function getDebug_StopwatchService()
    {
        return $this->services['debug.stopwatch'] = new \Symfony\Component\Stopwatch\Stopwatch();
    }

    /**
     * Gets the public 'deprecated.form.registry' shared service.
     *
     * @return \stdClass
     *
     * @deprecated The service "deprecated.form.registry" is internal and deprecated since Symfony 3.3 and will be removed in Symfony 4.0
     */
    protected function getDeprecated_Form_RegistryService()
    {
        @trigger_error('The service "deprecated.form.registry" is internal and deprecated since Symfony 3.3 and will be removed in Symfony 4.0', E_USER_DEPRECATED);

        $this->services['deprecated.form.registry'] = $instance = new \stdClass();

        $instance->registry = array(0 => ${($_ = isset($this->services['form.type_guesser.validator']) ? $this->services['form.type_guesser.validator'] : $this->get('form.type_guesser.validator')) && false ?: '_'}, 1 => ${($_ = isset($this->services['form.type.choice']) ? $this->services['form.type.choice'] : $this->get('form.type.choice')) && false ?: '_'}, 2 => ${($_ = isset($this->services['form.type.form']) ? $this->services['form.type.form'] : $this->get('form.type.form')) && false ?: '_'}, 3 => ${($_ = isset($this->services['form.type_extension.form.http_foundation']) ? $this->services['form.type_extension.form.http_foundation'] : $this->get('form.type_extension.form.http_foundation')) && false ?: '_'}, 4 => ${($_ = isset($this->services['form.type_extension.form.validator']) ? $this->services['form.type_extension.form.validator'] : $this->get('form.type_extension.form.validator')) && false ?: '_'}, 5 => ${($_ = isset($this->services['form.type_extension.repeated.validator']) ? $this->services['form.type_extension.repeated.validator'] : $this->get('form.type_extension.repeated.validator')) && false ?: '_'}, 6 => ${($_ = isset($this->services['form.type_extension.submit.validator']) ? $this->services['form.type_extension.submit.validator'] : $this->get('form.type_extension.submit.validator')) && false ?: '_'}, 7 => ${($_ = isset($this->services['form.type_extension.upload.validator']) ? $this->services['form.type_extension.upload.validator'] : $this->get('form.type_extension.upload.validator')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'deprecated.form.registry.csrf' shared service.
     *
     * @return \stdClass
     *
     * @deprecated The service "deprecated.form.registry.csrf" is internal and deprecated since Symfony 3.3 and will be removed in Symfony 4.0
     */
    protected function getDeprecated_Form_Registry_CsrfService()
    {
        @trigger_error('The service "deprecated.form.registry.csrf" is internal and deprecated since Symfony 3.3 and will be removed in Symfony 4.0', E_USER_DEPRECATED);

        $this->services['deprecated.form.registry.csrf'] = $instance = new \stdClass();

        $instance->registry = array(0 => ${($_ = isset($this->services['form.type_extension.csrf']) ? $this->services['form.type_extension.csrf'] : $this->get('form.type_extension.csrf')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'doctrine' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Registry
     */
    protected function getDoctrineService()
    {
        return $this->services['doctrine'] = new \Doctrine\Bundle\DoctrineBundle\Registry($this, array('default' => 'doctrine.dbal.default_connection'), array('default' => 'doctrine.orm.default_entity_manager'), 'default', 'default');
    }

    /**
     * Gets the public 'doctrine.cache_clear_metadata_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\Proxy\ClearMetadataCacheDoctrineCommand
     */
    protected function getDoctrine_CacheClearMetadataCommandService()
    {
        return $this->services['doctrine.cache_clear_metadata_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\Proxy\ClearMetadataCacheDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.cache_clear_query_cache_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\Proxy\ClearQueryCacheDoctrineCommand
     */
    protected function getDoctrine_CacheClearQueryCacheCommandService()
    {
        return $this->services['doctrine.cache_clear_query_cache_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\Proxy\ClearQueryCacheDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.cache_clear_result_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\Proxy\ClearResultCacheDoctrineCommand
     */
    protected function getDoctrine_CacheClearResultCommandService()
    {
        return $this->services['doctrine.cache_clear_result_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\Proxy\ClearResultCacheDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.cache_collection_region_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\Proxy\CollectionRegionDoctrineCommand
     */
    protected function getDoctrine_CacheCollectionRegionCommandService()
    {
        return $this->services['doctrine.cache_collection_region_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\Proxy\CollectionRegionDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.clear_entity_region_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\Proxy\EntityRegionCacheDoctrineCommand
     */
    protected function getDoctrine_ClearEntityRegionCommandService()
    {
        return $this->services['doctrine.clear_entity_region_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\Proxy\EntityRegionCacheDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.clear_query_region_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\Proxy\QueryRegionCacheDoctrineCommand
     */
    protected function getDoctrine_ClearQueryRegionCommandService()
    {
        return $this->services['doctrine.clear_query_region_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\Proxy\QueryRegionCacheDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.database_create_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\CreateDatabaseDoctrineCommand
     */
    protected function getDoctrine_DatabaseCreateCommandService()
    {
        return $this->services['doctrine.database_create_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\CreateDatabaseDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.database_drop_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\DropDatabaseDoctrineCommand
     */
    protected function getDoctrine_DatabaseDropCommandService()
    {
        return $this->services['doctrine.database_drop_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\DropDatabaseDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.database_import_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\Proxy\ImportDoctrineCommand
     */
    protected function getDoctrine_DatabaseImportCommandService()
    {
        return $this->services['doctrine.database_import_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\Proxy\ImportDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.dbal.connection_factory' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\ConnectionFactory
     */
    protected function getDoctrine_Dbal_ConnectionFactoryService()
    {
        return $this->services['doctrine.dbal.connection_factory'] = new \Doctrine\Bundle\DoctrineBundle\ConnectionFactory(array('json' => array('class' => 'Sonata\\Doctrine\\Types\\JsonType', 'commented' => true)));
    }

    /**
     * Gets the public 'doctrine.dbal.default_connection' shared service.
     *
     * @return \Doctrine\DBAL\Connection
     */
    protected function getDoctrine_Dbal_DefaultConnectionService()
    {
        $a = new \Doctrine\DBAL\Logging\LoggerChain();
        $a->addLogger(new \Symfony\Bridge\Doctrine\Logger\DbalLogger(${($_ = isset($this->services['monolog.logger.doctrine']) ? $this->services['monolog.logger.doctrine'] : $this->get('monolog.logger.doctrine', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, ${($_ = isset($this->services['debug.stopwatch']) ? $this->services['debug.stopwatch'] : $this->get('debug.stopwatch', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}));
        $a->addLogger(${($_ = isset($this->services['doctrine.dbal.logger.profiling.default']) ? $this->services['doctrine.dbal.logger.profiling.default'] : $this->getDoctrine_Dbal_Logger_Profiling_DefaultService()) && false ?: '_'});

        $b = new \Doctrine\DBAL\Configuration();
        $b->setSQLLogger($a);

        $c = new \Doctrine\ORM\Tools\ResolveTargetEntityListener();
        $c->addResolveTargetEntity('Sonata\\MediaBundle\\Entity\\BaseMedia', 'AppBundle\\Entity\\Media\\Media', array());
        $c->addResolveTargetEntity('Sonata\\UserBundle\\Entity\\BaseUser', 'AppBundle\\Entity\\Security\\User', array());
        $c->addResolveTargetEntity('Sonata\\UserBundle\\Entity\\BaseGroup', 'AppBundle\\Entity\\Security\\Group', array());

        $d = new \Symfony\Bridge\Doctrine\ContainerAwareEventManager($this);
        $d->addEventSubscriber(${($_ = isset($this->services['datadog.event_subscriber.audit']) ? $this->services['datadog.event_subscriber.audit'] : $this->get('datadog.event_subscriber.audit')) && false ?: '_'});
        $d->addEventSubscriber(${($_ = isset($this->services['sonata.easy_extends.doctrine.mapper']) ? $this->services['sonata.easy_extends.doctrine.mapper'] : $this->get('sonata.easy_extends.doctrine.mapper')) && false ?: '_'});
        $d->addEventSubscriber(new \FOS\UserBundle\Doctrine\UserListener(${($_ = isset($this->services['fos_user.util.password_updater']) ? $this->services['fos_user.util.password_updater'] : $this->getFosUser_Util_PasswordUpdaterService()) && false ?: '_'}, ${($_ = isset($this->services['fos_user.util.canonical_fields_updater']) ? $this->services['fos_user.util.canonical_fields_updater'] : $this->getFosUser_Util_CanonicalFieldsUpdaterService()) && false ?: '_'}));
        $d->addEventSubscriber(${($_ = isset($this->services['sonata.media.doctrine.event_subscriber']) ? $this->services['sonata.media.doctrine.event_subscriber'] : $this->get('sonata.media.doctrine.event_subscriber')) && false ?: '_'});
        $d->addEventSubscriber($c);
        $d->addEventListener(array(0 => 'loadClassMetadata'), ${($_ = isset($this->services['doctrine.orm.default_listeners.attach_entity_listeners']) ? $this->services['doctrine.orm.default_listeners.attach_entity_listeners'] : $this->get('doctrine.orm.default_listeners.attach_entity_listeners')) && false ?: '_'});

        return $this->services['doctrine.dbal.default_connection'] = ${($_ = isset($this->services['doctrine.dbal.connection_factory']) ? $this->services['doctrine.dbal.connection_factory'] : $this->get('doctrine.dbal.connection_factory')) && false ?: '_'}->createConnection(array('driver' => 'pdo_mysql', 'host' => '127.0.0.1', 'port' => NULL, 'dbname' => 'siunic_etecsa', 'user' => 'root', 'password' => NULL, 'charset' => 'UTF8', 'driverOptions' => array(), 'defaultTableOptions' => array()), $b, $d, array());
    }

    /**
     * Gets the public 'doctrine.ensure_production_settings_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\Proxy\EnsureProductionSettingsDoctrineCommand
     */
    protected function getDoctrine_EnsureProductionSettingsCommandService()
    {
        return $this->services['doctrine.ensure_production_settings_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\Proxy\EnsureProductionSettingsDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.generate_entities_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\GenerateEntitiesDoctrineCommand
     */
    protected function getDoctrine_GenerateEntitiesCommandService()
    {
        return $this->services['doctrine.generate_entities_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\GenerateEntitiesDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.mapping_convert_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\Proxy\ConvertMappingDoctrineCommand
     */
    protected function getDoctrine_MappingConvertCommandService()
    {
        return $this->services['doctrine.mapping_convert_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\Proxy\ConvertMappingDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.mapping_import_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\ImportMappingDoctrineCommand
     */
    protected function getDoctrine_MappingImportCommandService()
    {
        return $this->services['doctrine.mapping_import_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\ImportMappingDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.mapping_info_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\Proxy\InfoDoctrineCommand
     */
    protected function getDoctrine_MappingInfoCommandService()
    {
        return $this->services['doctrine.mapping_info_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\Proxy\InfoDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.orm.default_entity_listener_resolver' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Mapping\ContainerAwareEntityListenerResolver
     */
    protected function getDoctrine_Orm_DefaultEntityListenerResolverService()
    {
        return $this->services['doctrine.orm.default_entity_listener_resolver'] = new \Doctrine\Bundle\DoctrineBundle\Mapping\ContainerAwareEntityListenerResolver($this);
    }

    /**
     * Gets the public 'doctrine.orm.default_entity_manager' shared service.
     *
     * @return \Doctrine\ORM\EntityManager
     */
    public function getDoctrine_Orm_DefaultEntityManagerService($lazyLoad = true)
    {
        if ($lazyLoad) {

            return $this->services['doctrine.orm.default_entity_manager'] = DoctrineORMEntityManager_000000006d9c13f2000000004dc181e407c393e08643067c07eb5044e3591135::staticProxyConstructor(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) {
                    $wrappedInstance = $this->getDoctrine_Orm_DefaultEntityManagerService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        $a = ${($_ = isset($this->services['annotation_reader']) ? $this->services['annotation_reader'] : $this->get('annotation_reader')) && false ?: '_'};

        $b = new \Doctrine\ORM\Mapping\Driver\SimplifiedXmlDriver(array(($this->targetDirs[3].'\\vendor\\sonata-project\\media-bundle\\src\\Resources\\config\\doctrine') => 'Sonata\\MediaBundle\\Entity', ($this->targetDirs[3].'\\vendor\\sonata-project\\user-bundle\\Resources\\config\\doctrine') => 'Sonata\\UserBundle\\Entity', ($this->targetDirs[3].'\\vendor\\sonata-project\\classification-bundle\\src\\Resources\\config\\doctrine') => 'Sonata\\ClassificationBundle\\Entity', ($this->targetDirs[3].'\\vendor\\data-dog\\audit-bundle\\src\\DataDog\\AuditBundle\\Resources\\config\\doctrine') => 'DataDog\\AuditBundle\\Entity'));
        $b->setGlobalBasename('mapping');

        $c = new \Doctrine\ORM\Mapping\Driver\AnnotationDriver($a, array(0 => ($this->targetDirs[3].'\\vendor\\gesdinet\\jwt-refresh-token-bundle\\Entity'), 1 => ($this->targetDirs[3].'\\src\\AppBundle\\Entity')));

        $d = new \Doctrine\Common\Persistence\Mapping\Driver\MappingDriverChain();
        $d->addDriver($b, 'Sonata\\MediaBundle\\Entity');
        $d->addDriver($b, 'Sonata\\UserBundle\\Entity');
        $d->addDriver($b, 'Sonata\\ClassificationBundle\\Entity');
        $d->addDriver($b, 'DataDog\\AuditBundle\\Entity');
        $d->addDriver($c, 'Gesdinet\\JWTRefreshTokenBundle\\Entity');
        $d->addDriver($c, 'AppBundle\\Entity');
        $d->addDriver(new \Doctrine\ORM\Mapping\Driver\XmlDriver(new \Doctrine\Common\Persistence\Mapping\Driver\SymfonyFileLocator(array(($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle\\Resources\\config\\doctrine-mapping') => 'FOS\\UserBundle\\Model'), '.orm.xml')), 'FOS\\UserBundle\\Model');

        $e = new \Doctrine\ORM\Configuration();
        $e->setEntityNamespaces(array('SonataMediaBundle' => 'Sonata\\MediaBundle\\Entity', 'SonataUserBundle' => 'Sonata\\UserBundle\\Entity', 'SonataClassificationBundle' => 'Sonata\\ClassificationBundle\\Entity', 'DataDogAuditBundle' => 'DataDog\\AuditBundle\\Entity', 'GesdinetJWTRefreshTokenBundle' => 'Gesdinet\\JWTRefreshTokenBundle\\Entity', 'AppBundle' => 'AppBundle\\Entity'));
        $e->setMetadataCacheImpl(${($_ = isset($this->services['doctrine_cache.providers.doctrine.orm.default_metadata_cache']) ? $this->services['doctrine_cache.providers.doctrine.orm.default_metadata_cache'] : $this->get('doctrine_cache.providers.doctrine.orm.default_metadata_cache')) && false ?: '_'});
        $e->setQueryCacheImpl(${($_ = isset($this->services['doctrine_cache.providers.doctrine.orm.default_query_cache']) ? $this->services['doctrine_cache.providers.doctrine.orm.default_query_cache'] : $this->get('doctrine_cache.providers.doctrine.orm.default_query_cache')) && false ?: '_'});
        $e->setResultCacheImpl(${($_ = isset($this->services['doctrine_cache.providers.doctrine.orm.default_result_cache']) ? $this->services['doctrine_cache.providers.doctrine.orm.default_result_cache'] : $this->get('doctrine_cache.providers.doctrine.orm.default_result_cache')) && false ?: '_'});
        $e->setMetadataDriverImpl($d);
        $e->setProxyDir((__DIR__.'/doctrine/orm/Proxies'));
        $e->setProxyNamespace('Proxies');
        $e->setAutoGenerateProxyClasses(true);
        $e->setClassMetadataFactoryName('Doctrine\\ORM\\Mapping\\ClassMetadataFactory');
        $e->setDefaultRepositoryClassName('Doctrine\\ORM\\EntityRepository');
        $e->setNamingStrategy(new \Doctrine\ORM\Mapping\UnderscoreNamingStrategy());
        $e->setQuoteStrategy(new \Doctrine\ORM\Mapping\DefaultQuoteStrategy());
        $e->setEntityListenerResolver(${($_ = isset($this->services['doctrine.orm.default_entity_listener_resolver']) ? $this->services['doctrine.orm.default_entity_listener_resolver'] : $this->get('doctrine.orm.default_entity_listener_resolver')) && false ?: '_'});
        $e->setRepositoryFactory(new \Doctrine\Bundle\DoctrineBundle\Repository\ContainerRepositoryFactory(new \Symfony\Component\DependencyInjection\ServiceLocator(array())));

        $instance = \Doctrine\ORM\EntityManager::create(${($_ = isset($this->services['doctrine.dbal.default_connection']) ? $this->services['doctrine.dbal.default_connection'] : $this->get('doctrine.dbal.default_connection')) && false ?: '_'}, $e);

        ${($_ = isset($this->services['doctrine.orm.default_manager_configurator']) ? $this->services['doctrine.orm.default_manager_configurator'] : $this->get('doctrine.orm.default_manager_configurator')) && false ?: '_'}->configure($instance);

        return $instance;
    }

    /**
     * Gets the public 'doctrine.orm.default_entity_manager.property_info_extractor' shared service.
     *
     * @return \Symfony\Bridge\Doctrine\PropertyInfo\DoctrineExtractor
     */
    protected function getDoctrine_Orm_DefaultEntityManager_PropertyInfoExtractorService()
    {
        return $this->services['doctrine.orm.default_entity_manager.property_info_extractor'] = new \Symfony\Bridge\Doctrine\PropertyInfo\DoctrineExtractor(${($_ = isset($this->services['doctrine.orm.default_entity_manager']) ? $this->services['doctrine.orm.default_entity_manager'] : $this->get('doctrine.orm.default_entity_manager')) && false ?: '_'}->getMetadataFactory());
    }

    /**
     * Gets the public 'doctrine.orm.default_listeners.attach_entity_listeners' shared service.
     *
     * @return \Doctrine\ORM\Tools\AttachEntityListenersListener
     */
    protected function getDoctrine_Orm_DefaultListeners_AttachEntityListenersService()
    {
        return $this->services['doctrine.orm.default_listeners.attach_entity_listeners'] = new \Doctrine\ORM\Tools\AttachEntityListenersListener();
    }

    /**
     * Gets the public 'doctrine.orm.default_manager_configurator' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator
     */
    protected function getDoctrine_Orm_DefaultManagerConfiguratorService()
    {
        return $this->services['doctrine.orm.default_manager_configurator'] = new \Doctrine\Bundle\DoctrineBundle\ManagerConfigurator(array(), array());
    }

    /**
     * Gets the public 'doctrine.orm.validator.unique' shared service.
     *
     * @return \Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntityValidator
     */
    protected function getDoctrine_Orm_Validator_UniqueService()
    {
        return $this->services['doctrine.orm.validator.unique'] = new \Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntityValidator(${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'});
    }

    /**
     * Gets the public 'doctrine.orm.validator_initializer' shared service.
     *
     * @return \Symfony\Bridge\Doctrine\Validator\DoctrineInitializer
     */
    protected function getDoctrine_Orm_ValidatorInitializerService()
    {
        return $this->services['doctrine.orm.validator_initializer'] = new \Symfony\Bridge\Doctrine\Validator\DoctrineInitializer(${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'});
    }

    /**
     * Gets the public 'doctrine.query_dql_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\Proxy\RunDqlDoctrineCommand
     */
    protected function getDoctrine_QueryDqlCommandService()
    {
        return $this->services['doctrine.query_dql_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\Proxy\RunDqlDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.query_sql_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\Proxy\RunSqlDoctrineCommand
     */
    protected function getDoctrine_QuerySqlCommandService()
    {
        return $this->services['doctrine.query_sql_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\Proxy\RunSqlDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.schema_create_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\Proxy\CreateSchemaDoctrineCommand
     */
    protected function getDoctrine_SchemaCreateCommandService()
    {
        return $this->services['doctrine.schema_create_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\Proxy\CreateSchemaDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.schema_drop_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\Proxy\DropSchemaDoctrineCommand
     */
    protected function getDoctrine_SchemaDropCommandService()
    {
        return $this->services['doctrine.schema_drop_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\Proxy\DropSchemaDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.schema_update_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\Proxy\UpdateSchemaDoctrineCommand
     */
    protected function getDoctrine_SchemaUpdateCommandService()
    {
        return $this->services['doctrine.schema_update_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\Proxy\UpdateSchemaDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine.schema_validate_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineBundle\Command\Proxy\ValidateSchemaCommand
     */
    protected function getDoctrine_SchemaValidateCommandService()
    {
        return $this->services['doctrine.schema_validate_command'] = new \Doctrine\Bundle\DoctrineBundle\Command\Proxy\ValidateSchemaCommand();
    }

    /**
     * Gets the public 'doctrine_cache.contains_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineCacheBundle\Command\ContainsCommand
     */
    protected function getDoctrineCache_ContainsCommandService()
    {
        return $this->services['doctrine_cache.contains_command'] = new \Doctrine\Bundle\DoctrineCacheBundle\Command\ContainsCommand();
    }

    /**
     * Gets the public 'doctrine_cache.delete_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineCacheBundle\Command\DeleteCommand
     */
    protected function getDoctrineCache_DeleteCommandService()
    {
        return $this->services['doctrine_cache.delete_command'] = new \Doctrine\Bundle\DoctrineCacheBundle\Command\DeleteCommand();
    }

    /**
     * Gets the public 'doctrine_cache.flush_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineCacheBundle\Command\FlushCommand
     */
    protected function getDoctrineCache_FlushCommandService()
    {
        return $this->services['doctrine_cache.flush_command'] = new \Doctrine\Bundle\DoctrineCacheBundle\Command\FlushCommand();
    }

    /**
     * Gets the public 'doctrine_cache.providers.doctrine.orm.default_metadata_cache' shared service.
     *
     * @return \Doctrine\Common\Cache\ArrayCache
     */
    protected function getDoctrineCache_Providers_Doctrine_Orm_DefaultMetadataCacheService()
    {
        $this->services['doctrine_cache.providers.doctrine.orm.default_metadata_cache'] = $instance = new \Doctrine\Common\Cache\ArrayCache();

        $instance->setNamespace('sf_orm_default_e5247b5c21e6481cb5d327147f103603570b54b7f667aabe023e9aa946556b58');

        return $instance;
    }

    /**
     * Gets the public 'doctrine_cache.providers.doctrine.orm.default_query_cache' shared service.
     *
     * @return \Doctrine\Common\Cache\ArrayCache
     */
    protected function getDoctrineCache_Providers_Doctrine_Orm_DefaultQueryCacheService()
    {
        $this->services['doctrine_cache.providers.doctrine.orm.default_query_cache'] = $instance = new \Doctrine\Common\Cache\ArrayCache();

        $instance->setNamespace('sf_orm_default_e5247b5c21e6481cb5d327147f103603570b54b7f667aabe023e9aa946556b58');

        return $instance;
    }

    /**
     * Gets the public 'doctrine_cache.providers.doctrine.orm.default_result_cache' shared service.
     *
     * @return \Doctrine\Common\Cache\ArrayCache
     */
    protected function getDoctrineCache_Providers_Doctrine_Orm_DefaultResultCacheService()
    {
        $this->services['doctrine_cache.providers.doctrine.orm.default_result_cache'] = $instance = new \Doctrine\Common\Cache\ArrayCache();

        $instance->setNamespace('sf_orm_default_e5247b5c21e6481cb5d327147f103603570b54b7f667aabe023e9aa946556b58');

        return $instance;
    }

    /**
     * Gets the public 'doctrine_cache.stats_command' shared service.
     *
     * @return \Doctrine\Bundle\DoctrineCacheBundle\Command\StatsCommand
     */
    protected function getDoctrineCache_StatsCommandService()
    {
        return $this->services['doctrine_cache.stats_command'] = new \Doctrine\Bundle\DoctrineCacheBundle\Command\StatsCommand();
    }

    /**
     * Gets the public 'doctrine_migrations.diff_command' shared service.
     *
     * @return \Doctrine\Bundle\MigrationsBundle\Command\MigrationsDiffDoctrineCommand
     */
    protected function getDoctrineMigrations_DiffCommandService()
    {
        return $this->services['doctrine_migrations.diff_command'] = new \Doctrine\Bundle\MigrationsBundle\Command\MigrationsDiffDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine_migrations.execute_command' shared service.
     *
     * @return \Doctrine\Bundle\MigrationsBundle\Command\MigrationsExecuteDoctrineCommand
     */
    protected function getDoctrineMigrations_ExecuteCommandService()
    {
        return $this->services['doctrine_migrations.execute_command'] = new \Doctrine\Bundle\MigrationsBundle\Command\MigrationsExecuteDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine_migrations.generate_command' shared service.
     *
     * @return \Doctrine\Bundle\MigrationsBundle\Command\MigrationsGenerateDoctrineCommand
     */
    protected function getDoctrineMigrations_GenerateCommandService()
    {
        return $this->services['doctrine_migrations.generate_command'] = new \Doctrine\Bundle\MigrationsBundle\Command\MigrationsGenerateDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine_migrations.latest_command' shared service.
     *
     * @return \Doctrine\Bundle\MigrationsBundle\Command\MigrationsLatestDoctrineCommand
     */
    protected function getDoctrineMigrations_LatestCommandService()
    {
        return $this->services['doctrine_migrations.latest_command'] = new \Doctrine\Bundle\MigrationsBundle\Command\MigrationsLatestDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine_migrations.migrate_command' shared service.
     *
     * @return \Doctrine\Bundle\MigrationsBundle\Command\MigrationsMigrateDoctrineCommand
     */
    protected function getDoctrineMigrations_MigrateCommandService()
    {
        return $this->services['doctrine_migrations.migrate_command'] = new \Doctrine\Bundle\MigrationsBundle\Command\MigrationsMigrateDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine_migrations.status_command' shared service.
     *
     * @return \Doctrine\Bundle\MigrationsBundle\Command\MigrationsStatusDoctrineCommand
     */
    protected function getDoctrineMigrations_StatusCommandService()
    {
        return $this->services['doctrine_migrations.status_command'] = new \Doctrine\Bundle\MigrationsBundle\Command\MigrationsStatusDoctrineCommand();
    }

    /**
     * Gets the public 'doctrine_migrations.version_command' shared service.
     *
     * @return \Doctrine\Bundle\MigrationsBundle\Command\MigrationsVersionDoctrineCommand
     */
    protected function getDoctrineMigrations_VersionCommandService()
    {
        return $this->services['doctrine_migrations.version_command'] = new \Doctrine\Bundle\MigrationsBundle\Command\MigrationsVersionDoctrineCommand();
    }

    /**
     * Gets the public 'file_locator' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Config\FileLocator
     */
    protected function getFileLocatorService()
    {
        return $this->services['file_locator'] = new \Symfony\Component\HttpKernel\Config\FileLocator(${($_ = isset($this->services['kernel']) ? $this->services['kernel'] : $this->get('kernel')) && false ?: '_'}, ($this->targetDirs[3].'\\app/Resources'), array(0 => ($this->targetDirs[3].'\\app')));
    }

    /**
     * Gets the public 'filesystem' shared service.
     *
     * @return \Symfony\Component\Filesystem\Filesystem
     */
    protected function getFilesystemService()
    {
        return $this->services['filesystem'] = new \Symfony\Component\Filesystem\Filesystem();
    }

    /**
     * Gets the public 'form.extension' shared service.
     *
     * @return \Sonata\CoreBundle\Form\Extension\DependencyInjectionExtension
     */
    protected function getForm_ExtensionService()
    {
        return $this->services['form.extension'] = new \Sonata\CoreBundle\Form\Extension\DependencyInjectionExtension($this, array('AppBundle\\Form\\User\\Type\\RegistrationFormType' => 'application_user.registration.form.type', 'AppBundle\\Form\\User\\Type\\ProfileFormType' => 'application_user.profile.form.type', 'AppBundle\\Form\\User\\Type\\ProfileAuthenticationFormType' => 'application_sonata_user.profile.authentication.form.type', 'Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' => 'form.type.form', 'Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType' => 'form.type.choice', 'Symfony\\Bridge\\Doctrine\\Form\\Type\\EntityType' => 'form.type.entity', 'FOS\\UserBundle\\Form\\Type\\UsernameFormType' => 'fos_user.username_form_type', 'FOS\\UserBundle\\Form\\Type\\ProfileFormType' => 'fos_user.profile.form.type', 'FOS\\UserBundle\\Form\\Type\\RegistrationFormType' => 'fos_user.registration.form.type', 'FOS\\UserBundle\\Form\\Type\\ChangePasswordFormType' => 'fos_user.change_password.form.type', 'FOS\\UserBundle\\Form\\Type\\ResettingFormType' => 'fos_user.resetting.form.type', 'FOS\\UserBundle\\Form\\Type\\GroupFormType' => 'fos_user.group.form.type', 'Sonata\\UserBundle\\Form\\Type\\SecurityRolesType' => 'sonata.user.form.type.security_roles', 'Sonata\\UserBundle\\Form\\Type\\ProfileType' => 'sonata.user.profile.form.type', 'Sonata\\UserBundle\\Form\\Type\\UserGenderListType' => 'sonata.user.form.gender_list', 'Sonata\\UserBundle\\Form\\Type\\RegistrationFormType' => 'sonata.user.registration.form.type', 'Sonata\\UserBundle\\Form\\Type\\ApiGroupType' => 'sonata.user.api.form.type.group', 'Sonata\\UserBundle\\Form\\Type\\ApiUserType' => 'sonata.user.api.form.type.user', 'Sonata\\MediaBundle\\Form\\Type\\MediaType' => 'sonata.media.form.type.media', 'Sonata\\MediaBundle\\Form\\Type\\ApiDoctrineMediaType' => 'sonata.media.api.form.type.doctrine.media', 'Sonata\\MediaBundle\\Form\\Type\\ApiMediaType' => 'sonata.media.api.form.type.media', 'Sonata\\MediaBundle\\Form\\Type\\ApiGalleryType' => 'sonata.media.api.form.type.gallery', 'Sonata\\MediaBundle\\Form\\Type\\ApiGalleryHasMediaType' => 'sonata.media.api.form.type.gallery_has_media', 'Ivory\\CKEditorBundle\\Form\\Type\\CKEditorType' => 'ivory_ck_editor.form.type', 'Sonata\\AdminBundle\\Form\\Type\\AdminType' => 'sonata.admin.form.type.admin', 'Sonata\\AdminBundle\\Form\\Type\\ModelType' => 'sonata.admin.form.type.model_choice', 'Sonata\\AdminBundle\\Form\\Type\\ModelListType' => 'sonata.admin.form.type.model_list', 'Sonata\\AdminBundle\\Form\\Type\\ModelReferenceType' => 'sonata.admin.form.type.model_reference', 'Sonata\\AdminBundle\\Form\\Type\\ModelHiddenType' => 'sonata.admin.form.type.model_hidden', 'Sonata\\AdminBundle\\Form\\Type\\ModelAutocompleteType' => 'sonata.admin.form.type.model_autocomplete', 'Sonata\\AdminBundle\\Form\\Type\\CollectionType' => 'sonata.admin.form.type.collection', 'Sonata\\AdminBundle\\Form\\Type\\ChoiceFieldMaskType' => 'sonata.admin.doctrine_orm.form.type.choice_field_mask', 'Sonata\\AdminBundle\\Form\\Type\\Filter\\NumberType' => 'sonata.admin.form.filter.type.number', 'Sonata\\AdminBundle\\Form\\Type\\Filter\\ChoiceType' => 'sonata.admin.form.filter.type.choice', 'Sonata\\AdminBundle\\Form\\Type\\Filter\\DefaultType' => 'sonata.admin.form.filter.type.default', 'Sonata\\AdminBundle\\Form\\Type\\Filter\\DateType' => 'sonata.admin.form.filter.type.date', 'Sonata\\AdminBundle\\Form\\Type\\Filter\\DateRangeType' => 'sonata.admin.form.filter.type.daterange', 'Sonata\\AdminBundle\\Form\\Type\\Filter\\DateTimeType' => 'sonata.admin.form.filter.type.datetime', 'Sonata\\AdminBundle\\Form\\Type\\Filter\\DateTimeRangeType' => 'sonata.admin.form.filter.type.datetime_range', 'Sonata\\CoreBundle\\Form\\Type\\ImmutableArrayType' => 'sonata.core.form.type.array', 'Sonata\\CoreBundle\\Form\\Type\\BooleanType' => 'sonata.core.form.type.boolean', 'Sonata\\CoreBundle\\Form\\Type\\CollectionType' => 'sonata.core.form.type.collection', 'Sonata\\CoreBundle\\Form\\Type\\TranslatableChoiceType' => 'sonata.core.form.type.translatable_choice', 'Sonata\\CoreBundle\\Form\\Type\\DateRangeType' => 'sonata.core.form.type.date_range', 'Sonata\\CoreBundle\\Form\\Type\\DateTimeRangeType' => 'sonata.core.form.type.datetime_range', 'Sonata\\CoreBundle\\Form\\Type\\DatePickerType' => 'sonata.core.form.type.date_picker', 'Sonata\\CoreBundle\\Form\\Type\\DateTimePickerType' => 'sonata.core.form.type.datetime_picker', 'Sonata\\CoreBundle\\Form\\Type\\DateRangePickerType' => 'sonata.core.form.type.date_range_picker', 'Sonata\\CoreBundle\\Form\\Type\\DateTimeRangePickerType' => 'sonata.core.form.type.datetime_range_picker', 'Sonata\\CoreBundle\\Form\\Type\\EqualType' => 'sonata.core.form.type.equal', 'Sonata\\CoreBundle\\Form\\Type\\ColorSelectorType' => 'sonata.core.form.type.color_selector', 'Sonata\\CoreBundle\\Form\\Type\\ColorType' => 'sonata.core.form.type.color', 'Sonata\\FormatterBundle\\Form\\Type\\FormatterType' => 'sonata.formatter.form.type.selector', 'Sonata\\FormatterBundle\\Form\\Type\\SimpleFormatterType' => 'sonata.formatter.form.type.simple', 'Sonata\\BlockBundle\\Form\\Type\\ServiceListType' => 'sonata.block.form.type.block', 'Sonata\\BlockBundle\\Form\\Type\\ContainerTemplateType' => 'sonata.block.form.type.container_template', 'Sonata\\ClassificationBundle\\Form\\Type\\CategorySelectorType' => 'sonata.classification.form.type.category_selector', 'Sonata\\ClassificationBundle\\Form\\Type\\ApiCategoryType' => 'sonata.classification.api.form.type.category', 'Sonata\\ClassificationBundle\\Form\\Type\\ApiCollectionType' => 'sonata.classification.api.form.type.collection', 'Sonata\\ClassificationBundle\\Form\\Type\\ApiTagType' => 'sonata.classification.api.form.type.tag', 'Sonata\\ClassificationBundle\\Form\\Type\\ApiContextType' => 'sonata.classification.api.form.type.context', 'Mopa\\Bundle\\BootstrapBundle\\Form\\Type\\TabType' => 'mopa_bootstrap.form.type.tab', 'Mopa\\Bundle\\BootstrapBundle\\Form\\Type\\FormActionsType' => 'mopa_bootstrap.form.type.form_actions', 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\Type\\TextFilterType' => 'lexik_form_filter.type.filter_text', 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\Type\\NumberFilterType' => 'lexik_form_filter.type.filter_number', 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\Type\\NumberRangeFilterType' => 'lexik_form_filter.type.filter_number_range', 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\Type\\CheckboxFilterType' => 'lexik_form_filter.type.filter_checkbox', 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\Type\\BooleanFilterType' => 'lexik_form_filter.type.filter_boolean', 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\Type\\ChoiceFilterType' => 'lexik_form_filter.type.filter_choice', 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\Type\\DateFilterType' => 'lexik_form_filter.type.filter_date', 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\Type\\DateRangeFilterType' => 'lexik_form_filter.type.filter_date_range', 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\Type\\DateTimeFilterType' => 'lexik_form_filter.type.filter_datetime', 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\Type\\DateTimeRangeFilterType' => 'lexik_form_filter.type.filter_datetime_range', 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\Type\\CollectionAdapterFilterType' => 'lexik_form_filter.type.filter_collection_adapter', 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\Type\\SharedableFilterType' => 'lexik_form_filter.type.filter_sharedable', 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\Type\\EntityFilterType' => 'lexik_form_filter.type.filter_entity', 'Liip\\ImagineBundle\\Form\\Type\\ImageType' => 'liip_imagine.form.type.image', 'Gregwar\\CaptchaBundle\\Type\\CaptchaType' => 'captcha.type'), array('Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType' => array(0 => 'form.type_extension.form.http_foundation', 1 => 'form.type_extension.form.validator', 2 => 'form.type_extension.upload.validator', 3 => 'form.type_extension.csrf', 4 => 'form.type_extension.form.data_collector', 5 => 'sonata.admin.form.extension.field', 6 => 'fos_rest.form.extension.csrf_disable', 7 => 'nelmio_api_doc.form.extension.description_form_type_extension', 8 => 'mopa_bootstrap.form.type_extension.embed_form', 9 => 'mopa_bootstrap.form.type_extension.static_text', 10 => 'mopa_bootstrap.form.type_extension.help', 11 => 'mopa_bootstrap.form.type_extension.legend', 12 => 'mopa_bootstrap.form.type_extension.error', 13 => 'mopa_bootstrap.form.type_extension.widget', 14 => 'mopa_bootstrap.form.type_extension.horizontal', 15 => 'mopa_bootstrap.form.type_extension.widget_collection', 16 => 'mopa_bootstrap.form.type_extension.tabbed', 17 => 'lexik_form_filter.type_extension.filter_extension'), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\RepeatedType' => array(0 => 'form.type_extension.repeated.validator'), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\SubmitType' => array(0 => 'form.type_extension.submit.validator'), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType' => array(0 => 'sonata.admin.form.extension.choice'), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\ButtonType' => array(0 => 'mopa_bootstrap.form.type_extension.offset_button', 1 => 'mopa_bootstrap.form.type_extension.button'), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\DateType' => array(0 => 'mopa_bootstrap.form.type_extension.date'), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\DateTimeType' => array(0 => 'mopa_bootstrap.form.type_extension.datetime'), 'Symfony\\Component\\Form\\Extension\\Core\\Type\\TimeType' => array(0 => 'mopa_bootstrap.form.type_extension.time')), array(0 => 'form.type_guesser.validator', 1 => 'form.type_guesser.doctrine'), array('fos_user_username' => 'FOS\\UserBundle\\Form\\Type\\UsernameFormType', 'fos_user_profile' => 'FOS\\UserBundle\\Form\\Type\\ProfileFormType', 'fos_user_registration' => 'FOS\\UserBundle\\Form\\Type\\RegistrationFormType', 'fos_user_change_password' => 'FOS\\UserBundle\\Form\\Type\\ChangePasswordFormType', 'fos_user_resetting' => 'FOS\\UserBundle\\Form\\Type\\ResettingFormType', 'fos_user_group' => 'FOS\\UserBundle\\Form\\Type\\GroupFormType', 'sonata_security_roles' => 'Sonata\\UserBundle\\Form\\Type\\SecurityRolesType', 'sonata_user_profile' => 'Sonata\\UserBundle\\Form\\Type\\ProfileType', 'sonata_user_gender' => 'Sonata\\UserBundle\\Form\\Type\\UserGenderListType', 'sonata_user_registration' => 'Sonata\\UserBundle\\Form\\Type\\RegistrationFormType', 'sonata_user_api_form_group' => 'Sonata\\UserBundle\\Form\\Type\\ApiGroupType', 'sonata_user_api_form_user' => 'Sonata\\UserBundle\\Form\\Type\\ApiUserType', 'sonata_media_type' => 'Sonata\\MediaBundle\\Form\\Type\\MediaType', 'sonata_media_api_form_media' => 'Sonata\\MediaBundle\\Form\\Type\\ApiMediaType', 'sonata_media_api_form_doctrine_media' => 'Sonata\\MediaBundle\\Form\\Type\\ApiDoctrineMediaType', 'sonata_media_api_form_gallery' => 'Sonata\\MediaBundle\\Form\\Type\\ApiGalleryType', 'sonata_media_api_form_gallery_has_media' => 'Sonata\\MediaBundle\\Form\\Type\\ApiGalleryHasMediaType', 'sonata_type_admin' => 'Sonata\\AdminBundle\\Form\\Type\\AdminType', 'sonata_type_model' => 'Sonata\\AdminBundle\\Form\\Type\\ModelType', 'sonata_type_model_list' => 'Sonata\\AdminBundle\\Form\\Type\\ModelListType', 'sonata_type_model_reference' => 'Sonata\\AdminBundle\\Form\\Type\\ModelReferenceType', 'sonata_type_model_hidden' => 'Sonata\\AdminBundle\\Form\\Type\\ModelHiddenType', 'sonata_type_model_autocomplete' => 'Sonata\\AdminBundle\\Form\\Type\\ModelAutocompleteType', 'sonata_type_native_collection' => 'Sonata\\AdminBundle\\Form\\Type\\CollectionType', 'sonata_type_choice_field_mask' => 'Sonata\\AdminBundle\\Form\\Type\\ChoiceFieldMaskType', 'sonata_type_filter_number' => 'Sonata\\AdminBundle\\Form\\Type\\Filter\\NumberType', 'sonata_type_filter_choice' => 'Sonata\\AdminBundle\\Form\\Type\\Filter\\ChoiceType', 'sonata_type_filter_default' => 'Sonata\\AdminBundle\\Form\\Type\\Filter\\DefaultType', 'sonata_type_filter_date' => 'Sonata\\AdminBundle\\Form\\Type\\Filter\\DateType', 'sonata_type_filter_date_range' => 'Sonata\\AdminBundle\\Form\\Type\\Filter\\DateRangeType', 'sonata_type_filter_datetime' => 'Sonata\\AdminBundle\\Form\\Type\\Filter\\DateTimeType', 'sonata_type_filter_datetime_range' => 'Sonata\\AdminBundle\\Form\\Type\\Filter\\DateTimeRangeType', 'tab' => 'Mopa\\Bundle\\BootstrapBundle\\Form\\Type\\TabType', 'form' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\FormType', 'birthday' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\BirthdayType', 'checkbox' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\CheckboxType', 'choice' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType', 'collection' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\CollectionType', 'country' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\CountryType', 'date' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\DateType', 'datetime' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\DateTimeType', 'email' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\EmailType', 'file' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\FileType', 'hidden' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\HiddenType', 'integer' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\IntegerType', 'language' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\LanguageType', 'locale' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\LocaleType', 'money' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\MoneyType', 'number' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\NumberType', 'password' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\PasswordType', 'percent' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\PercentType', 'radio' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\RadioType', 'repeated' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\RepeatedType', 'search' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\SearchType', 'textarea' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\TextareaType', 'text' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType', 'time' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\TimeType', 'timezone' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\TimezoneType', 'url' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\UrlType', 'button' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\ButtonType', 'submit' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\SubmitType', 'reset' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\ResetType', 'currency' => 'Symfony\\Component\\Form\\Extension\\Core\\Type\\CurrencyType', 'entity' => 'Symfony\\Bridge\\Doctrine\\Form\\Type\\EntityType', 'sonata_type_immutable_array' => 'Sonata\\CoreBundle\\Form\\Type\\ImmutableArrayType', 'sonata_type_boolean' => 'Sonata\\CoreBundle\\Form\\Type\\BooleanType', 'sonata_type_collection' => 'Sonata\\CoreBundle\\Form\\Type\\CollectionType', 'sonata_type_translatable_choice' => 'Sonata\\CoreBundle\\Form\\Type\\TranslatableChoiceType', 'sonata_type_date_range' => 'Sonata\\CoreBundle\\Form\\Type\\DateRangeType', 'sonata_type_datetime_range' => 'Sonata\\CoreBundle\\Form\\Type\\DateTimeRangeType', 'sonata_type_date_picker' => 'Sonata\\CoreBundle\\Form\\Type\\DatePickerType', 'sonata_type_datetime_picker' => 'Sonata\\CoreBundle\\Form\\Type\\DateTimePickerType', 'sonata_type_date_range_picker' => 'Sonata\\CoreBundle\\Form\\Type\\DateRangePickerType', 'sonata_type_datetime_range_picker' => 'Sonata\\CoreBundle\\Form\\Type\\DateTimeRangePickerType', 'sonata_type_equal' => 'Sonata\\CoreBundle\\Form\\Type\\EqualType', 'sonata_type_color' => 'Sonata\\CoreBundle\\Form\\Type\\ColorType', 'sonata_type_color_selector' => 'Sonata\\CoreBundle\\Form\\Type\\ColorSelectorType', 'ckeditor' => 'Ivory\\CKEditorBundle\\Form\\Type\\CKEditorType', 'sonata_formatter_type' => 'Sonata\\FormatterBundle\\Form\\Type\\FormatterType', 'sonata_simple_formatter_type' => 'Sonata\\FormatterBundle\\Form\\Type\\SimpleFormatterType', 'sonata_block_service_choice' => 'Sonata\\BlockBundle\\Form\\Type\\ServiceListType', 'sonata_type_container_template_choice' => 'Sonata\\BlockBundle\\Form\\Type\\ContainerTemplateType', 'sonata_classification_api_form_category' => 'Sonata\\ClassificationBundle\\Form\\Type\\ApiCategoryType', 'sonata_classification_api_form_collection' => 'Sonata\\ClassificationBundle\\Form\\Type\\ApiCollectionType', 'sonata_classification_api_form_tag' => 'Sonata\\ClassificationBundle\\Form\\Type\\ApiTagType', 'sonata_classification_api_form_context' => 'Sonata\\ClassificationBundle\\Form\\Type\\ApiContextType', 'sonata_category_selector' => 'Sonata\\ClassificationBundle\\Form\\Type\\CategorySelectorType'), array('form' => array(0 => 'sonata.admin.form.extension.field', 1 => 'mopa_bootstrap.form.type_extension.help', 2 => 'mopa_bootstrap.form.type_extension.legend', 3 => 'mopa_bootstrap.form.type_extension.error', 4 => 'mopa_bootstrap.form.type_extension.widget', 5 => 'mopa_bootstrap.form.type_extension.horizontal', 6 => 'mopa_bootstrap.form.type_extension.widget_collection', 7 => 'mopa_bootstrap.form.type_extension.tabbed', 8 => 'form.type_extension.form.http_foundation', 9 => 'form.type_extension.form.validator', 10 => 'form.type_extension.csrf', 11 => 'form.type_extension.form.data_collector', 12 => 'nelmio_api_doc.form.extension.description_form_type_extension'), 'choice' => array(0 => 'sonata.admin.form.extension.choice'), 'button' => array(0 => 'mopa_bootstrap.form.type_extension.button'), 'date' => array(0 => 'mopa_bootstrap.form.type_extension.date'), 'repeated' => array(0 => 'form.type_extension.repeated.validator'), 'submit' => array(0 => 'form.type_extension.submit.validator')), array());
    }

    /**
     * Gets the public 'form.factory' shared service.
     *
     * @return \Symfony\Component\Form\FormFactory
     */
    protected function getForm_FactoryService()
    {
        return $this->services['form.factory'] = new \Symfony\Component\Form\FormFactory(${($_ = isset($this->services['form.registry']) ? $this->services['form.registry'] : $this->get('form.registry')) && false ?: '_'}, ${($_ = isset($this->services['form.resolved_type_factory']) ? $this->services['form.resolved_type_factory'] : $this->get('form.resolved_type_factory')) && false ?: '_'});
    }

    /**
     * Gets the public 'form.registry' shared service.
     *
     * @return \Symfony\Component\Form\FormRegistry
     */
    protected function getForm_RegistryService()
    {
        return $this->services['form.registry'] = new \Symfony\Component\Form\FormRegistry(array(0 => ${($_ = isset($this->services['form.extension']) ? $this->services['form.extension'] : $this->get('form.extension')) && false ?: '_'}), ${($_ = isset($this->services['form.resolved_type_factory']) ? $this->services['form.resolved_type_factory'] : $this->get('form.resolved_type_factory')) && false ?: '_'});
    }

    /**
     * Gets the public 'form.resolved_type_factory' shared service.
     *
     * @return \Symfony\Component\Form\Extension\DataCollector\Proxy\ResolvedTypeFactoryDataCollectorProxy
     */
    protected function getForm_ResolvedTypeFactoryService()
    {
        return $this->services['form.resolved_type_factory'] = new \Symfony\Component\Form\Extension\DataCollector\Proxy\ResolvedTypeFactoryDataCollectorProxy(new \Symfony\Component\Form\ResolvedFormTypeFactory(), ${($_ = isset($this->services['data_collector.form']) ? $this->services['data_collector.form'] : $this->get('data_collector.form')) && false ?: '_'});
    }

    /**
     * Gets the public 'form.type.birthday' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\BirthdayType
     *
     * @deprecated The "form.type.birthday" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_BirthdayService()
    {
        @trigger_error('The "form.type.birthday" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.birthday'] = new \Symfony\Component\Form\Extension\Core\Type\BirthdayType();
    }

    /**
     * Gets the public 'form.type.button' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\ButtonType
     *
     * @deprecated The "form.type.button" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_ButtonService()
    {
        @trigger_error('The "form.type.button" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.button'] = new \Symfony\Component\Form\Extension\Core\Type\ButtonType();
    }

    /**
     * Gets the public 'form.type.checkbox' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\CheckboxType
     *
     * @deprecated The "form.type.checkbox" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_CheckboxService()
    {
        @trigger_error('The "form.type.checkbox" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.checkbox'] = new \Symfony\Component\Form\Extension\Core\Type\CheckboxType();
    }

    /**
     * Gets the public 'form.type.choice' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\ChoiceType
     */
    protected function getForm_Type_ChoiceService()
    {
        return $this->services['form.type.choice'] = new \Symfony\Component\Form\Extension\Core\Type\ChoiceType(new \Symfony\Component\Form\ChoiceList\Factory\CachingFactoryDecorator(new \Symfony\Component\Form\ChoiceList\Factory\PropertyAccessDecorator(new \Symfony\Component\Form\ChoiceList\Factory\DefaultChoiceListFactory(), ${($_ = isset($this->services['property_accessor']) ? $this->services['property_accessor'] : $this->get('property_accessor')) && false ?: '_'})));
    }

    /**
     * Gets the public 'form.type.collection' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\CollectionType
     *
     * @deprecated The "form.type.collection" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_CollectionService()
    {
        @trigger_error('The "form.type.collection" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.collection'] = new \Symfony\Component\Form\Extension\Core\Type\CollectionType();
    }

    /**
     * Gets the public 'form.type.country' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\CountryType
     *
     * @deprecated The "form.type.country" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_CountryService()
    {
        @trigger_error('The "form.type.country" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.country'] = new \Symfony\Component\Form\Extension\Core\Type\CountryType();
    }

    /**
     * Gets the public 'form.type.currency' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\CurrencyType
     *
     * @deprecated The "form.type.currency" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_CurrencyService()
    {
        @trigger_error('The "form.type.currency" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.currency'] = new \Symfony\Component\Form\Extension\Core\Type\CurrencyType();
    }

    /**
     * Gets the public 'form.type.date' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\DateType
     *
     * @deprecated The "form.type.date" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_DateService()
    {
        @trigger_error('The "form.type.date" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.date'] = new \Symfony\Component\Form\Extension\Core\Type\DateType();
    }

    /**
     * Gets the public 'form.type.datetime' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\DateTimeType
     *
     * @deprecated The "form.type.datetime" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_DatetimeService()
    {
        @trigger_error('The "form.type.datetime" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.datetime'] = new \Symfony\Component\Form\Extension\Core\Type\DateTimeType();
    }

    /**
     * Gets the public 'form.type.email' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\EmailType
     *
     * @deprecated The "form.type.email" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_EmailService()
    {
        @trigger_error('The "form.type.email" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.email'] = new \Symfony\Component\Form\Extension\Core\Type\EmailType();
    }

    /**
     * Gets the public 'form.type.entity' shared service.
     *
     * @return \Symfony\Bridge\Doctrine\Form\Type\EntityType
     */
    protected function getForm_Type_EntityService()
    {
        return $this->services['form.type.entity'] = new \Symfony\Bridge\Doctrine\Form\Type\EntityType(${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'});
    }

    /**
     * Gets the public 'form.type.file' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\FileType
     *
     * @deprecated The "form.type.file" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_FileService()
    {
        @trigger_error('The "form.type.file" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.file'] = new \Symfony\Component\Form\Extension\Core\Type\FileType();
    }

    /**
     * Gets the public 'form.type.form' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\FormType
     */
    protected function getForm_Type_FormService()
    {
        return $this->services['form.type.form'] = new \Symfony\Component\Form\Extension\Core\Type\FormType(${($_ = isset($this->services['property_accessor']) ? $this->services['property_accessor'] : $this->get('property_accessor')) && false ?: '_'});
    }

    /**
     * Gets the public 'form.type.hidden' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\HiddenType
     *
     * @deprecated The "form.type.hidden" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_HiddenService()
    {
        @trigger_error('The "form.type.hidden" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.hidden'] = new \Symfony\Component\Form\Extension\Core\Type\HiddenType();
    }

    /**
     * Gets the public 'form.type.integer' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\IntegerType
     *
     * @deprecated The "form.type.integer" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_IntegerService()
    {
        @trigger_error('The "form.type.integer" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.integer'] = new \Symfony\Component\Form\Extension\Core\Type\IntegerType();
    }

    /**
     * Gets the public 'form.type.language' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\LanguageType
     *
     * @deprecated The "form.type.language" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_LanguageService()
    {
        @trigger_error('The "form.type.language" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.language'] = new \Symfony\Component\Form\Extension\Core\Type\LanguageType();
    }

    /**
     * Gets the public 'form.type.locale' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\LocaleType
     *
     * @deprecated The "form.type.locale" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_LocaleService()
    {
        @trigger_error('The "form.type.locale" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.locale'] = new \Symfony\Component\Form\Extension\Core\Type\LocaleType();
    }

    /**
     * Gets the public 'form.type.money' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\MoneyType
     *
     * @deprecated The "form.type.money" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_MoneyService()
    {
        @trigger_error('The "form.type.money" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.money'] = new \Symfony\Component\Form\Extension\Core\Type\MoneyType();
    }

    /**
     * Gets the public 'form.type.number' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\NumberType
     *
     * @deprecated The "form.type.number" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_NumberService()
    {
        @trigger_error('The "form.type.number" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.number'] = new \Symfony\Component\Form\Extension\Core\Type\NumberType();
    }

    /**
     * Gets the public 'form.type.password' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\PasswordType
     *
     * @deprecated The "form.type.password" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_PasswordService()
    {
        @trigger_error('The "form.type.password" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.password'] = new \Symfony\Component\Form\Extension\Core\Type\PasswordType();
    }

    /**
     * Gets the public 'form.type.percent' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\PercentType
     *
     * @deprecated The "form.type.percent" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_PercentService()
    {
        @trigger_error('The "form.type.percent" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.percent'] = new \Symfony\Component\Form\Extension\Core\Type\PercentType();
    }

    /**
     * Gets the public 'form.type.radio' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\RadioType
     *
     * @deprecated The "form.type.radio" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_RadioService()
    {
        @trigger_error('The "form.type.radio" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.radio'] = new \Symfony\Component\Form\Extension\Core\Type\RadioType();
    }

    /**
     * Gets the public 'form.type.range' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\RangeType
     *
     * @deprecated The "form.type.range" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_RangeService()
    {
        @trigger_error('The "form.type.range" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.range'] = new \Symfony\Component\Form\Extension\Core\Type\RangeType();
    }

    /**
     * Gets the public 'form.type.repeated' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\RepeatedType
     *
     * @deprecated The "form.type.repeated" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_RepeatedService()
    {
        @trigger_error('The "form.type.repeated" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.repeated'] = new \Symfony\Component\Form\Extension\Core\Type\RepeatedType();
    }

    /**
     * Gets the public 'form.type.reset' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\ResetType
     *
     * @deprecated The "form.type.reset" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_ResetService()
    {
        @trigger_error('The "form.type.reset" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.reset'] = new \Symfony\Component\Form\Extension\Core\Type\ResetType();
    }

    /**
     * Gets the public 'form.type.search' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\SearchType
     *
     * @deprecated The "form.type.search" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_SearchService()
    {
        @trigger_error('The "form.type.search" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.search'] = new \Symfony\Component\Form\Extension\Core\Type\SearchType();
    }

    /**
     * Gets the public 'form.type.submit' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\SubmitType
     *
     * @deprecated The "form.type.submit" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_SubmitService()
    {
        @trigger_error('The "form.type.submit" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.submit'] = new \Symfony\Component\Form\Extension\Core\Type\SubmitType();
    }

    /**
     * Gets the public 'form.type.text' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\TextType
     *
     * @deprecated The "form.type.text" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_TextService()
    {
        @trigger_error('The "form.type.text" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.text'] = new \Symfony\Component\Form\Extension\Core\Type\TextType();
    }

    /**
     * Gets the public 'form.type.textarea' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\TextareaType
     *
     * @deprecated The "form.type.textarea" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_TextareaService()
    {
        @trigger_error('The "form.type.textarea" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.textarea'] = new \Symfony\Component\Form\Extension\Core\Type\TextareaType();
    }

    /**
     * Gets the public 'form.type.time' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\TimeType
     *
     * @deprecated The "form.type.time" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_TimeService()
    {
        @trigger_error('The "form.type.time" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.time'] = new \Symfony\Component\Form\Extension\Core\Type\TimeType();
    }

    /**
     * Gets the public 'form.type.timezone' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\TimezoneType
     *
     * @deprecated The "form.type.timezone" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_TimezoneService()
    {
        @trigger_error('The "form.type.timezone" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.timezone'] = new \Symfony\Component\Form\Extension\Core\Type\TimezoneType();
    }

    /**
     * Gets the public 'form.type.url' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Core\Type\UrlType
     *
     * @deprecated The "form.type.url" service is deprecated since Symfony 3.1 and will be removed in 4.0.
     */
    protected function getForm_Type_UrlService()
    {
        @trigger_error('The "form.type.url" service is deprecated since Symfony 3.1 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['form.type.url'] = new \Symfony\Component\Form\Extension\Core\Type\UrlType();
    }

    /**
     * Gets the public 'form.type_extension.csrf' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Csrf\Type\FormTypeCsrfExtension
     */
    protected function getForm_TypeExtension_CsrfService()
    {
        return $this->services['form.type_extension.csrf'] = new \Symfony\Component\Form\Extension\Csrf\Type\FormTypeCsrfExtension(${($_ = isset($this->services['security.csrf.token_manager']) ? $this->services['security.csrf.token_manager'] : $this->get('security.csrf.token_manager')) && false ?: '_'}, true, '_token', ${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, 'validators', ${($_ = isset($this->services['form.server_params']) ? $this->services['form.server_params'] : $this->getForm_ServerParamsService()) && false ?: '_'});
    }

    /**
     * Gets the public 'form.type_extension.form.data_collector' shared service.
     *
     * @return \Symfony\Component\Form\Extension\DataCollector\Type\DataCollectorTypeExtension
     */
    protected function getForm_TypeExtension_Form_DataCollectorService()
    {
        return $this->services['form.type_extension.form.data_collector'] = new \Symfony\Component\Form\Extension\DataCollector\Type\DataCollectorTypeExtension(${($_ = isset($this->services['data_collector.form']) ? $this->services['data_collector.form'] : $this->get('data_collector.form')) && false ?: '_'});
    }

    /**
     * Gets the public 'form.type_extension.form.http_foundation' shared service.
     *
     * @return \Symfony\Component\Form\Extension\HttpFoundation\Type\FormTypeHttpFoundationExtension
     */
    protected function getForm_TypeExtension_Form_HttpFoundationService()
    {
        return $this->services['form.type_extension.form.http_foundation'] = new \Symfony\Component\Form\Extension\HttpFoundation\Type\FormTypeHttpFoundationExtension(new \Symfony\Component\Form\Extension\HttpFoundation\HttpFoundationRequestHandler(${($_ = isset($this->services['form.server_params']) ? $this->services['form.server_params'] : $this->getForm_ServerParamsService()) && false ?: '_'}));
    }

    /**
     * Gets the public 'form.type_extension.form.validator' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Validator\Type\FormTypeValidatorExtension
     */
    protected function getForm_TypeExtension_Form_ValidatorService()
    {
        return $this->services['form.type_extension.form.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\FormTypeValidatorExtension(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
    }

    /**
     * Gets the public 'form.type_extension.repeated.validator' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension
     */
    protected function getForm_TypeExtension_Repeated_ValidatorService()
    {
        return $this->services['form.type_extension.repeated.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\RepeatedTypeValidatorExtension();
    }

    /**
     * Gets the public 'form.type_extension.submit.validator' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension
     */
    protected function getForm_TypeExtension_Submit_ValidatorService()
    {
        return $this->services['form.type_extension.submit.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\SubmitTypeValidatorExtension();
    }

    /**
     * Gets the public 'form.type_extension.upload.validator' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Validator\Type\UploadValidatorExtension
     */
    protected function getForm_TypeExtension_Upload_ValidatorService()
    {
        return $this->services['form.type_extension.upload.validator'] = new \Symfony\Component\Form\Extension\Validator\Type\UploadValidatorExtension(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, 'validators');
    }

    /**
     * Gets the public 'form.type_guesser.doctrine' shared service.
     *
     * @return \Symfony\Bridge\Doctrine\Form\DoctrineOrmTypeGuesser
     */
    protected function getForm_TypeGuesser_DoctrineService()
    {
        return $this->services['form.type_guesser.doctrine'] = new \Symfony\Bridge\Doctrine\Form\DoctrineOrmTypeGuesser(${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'});
    }

    /**
     * Gets the public 'form.type_guesser.validator' shared service.
     *
     * @return \Symfony\Component\Form\Extension\Validator\ValidatorTypeGuesser
     */
    protected function getForm_TypeGuesser_ValidatorService()
    {
        return $this->services['form.type_guesser.validator'] = new \Symfony\Component\Form\Extension\Validator\ValidatorTypeGuesser(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
    }

    /**
     * Gets the public 'fos_js_routing.controller' shared service.
     *
     * @return \FOS\JsRoutingBundle\Controller\Controller
     */
    protected function getFosJsRouting_ControllerService()
    {
        return $this->services['fos_js_routing.controller'] = new \FOS\JsRoutingBundle\Controller\Controller(${($_ = isset($this->services['fos_js_routing.serializer']) ? $this->services['fos_js_routing.serializer'] : $this->get('fos_js_routing.serializer')) && false ?: '_'}, ${($_ = isset($this->services['fos_js_routing.extractor']) ? $this->services['fos_js_routing.extractor'] : $this->get('fos_js_routing.extractor')) && false ?: '_'}, array('enabled' => false), true);
    }

    /**
     * Gets the public 'fos_js_routing.extractor' shared service.
     *
     * @return \FOS\JsRoutingBundle\Extractor\ExposedRoutesExtractor
     */
    protected function getFosJsRouting_ExtractorService()
    {
        return $this->services['fos_js_routing.extractor'] = new \FOS\JsRoutingBundle\Extractor\ExposedRoutesExtractor(${($_ = isset($this->services['router']) ? $this->services['router'] : $this->get('router')) && false ?: '_'}, array(), __DIR__, array('FrameworkBundle' => 'Symfony\\Bundle\\FrameworkBundle\\FrameworkBundle', 'SecurityBundle' => 'Symfony\\Bundle\\SecurityBundle\\SecurityBundle', 'TwigBundle' => 'Symfony\\Bundle\\TwigBundle\\TwigBundle', 'MonologBundle' => 'Symfony\\Bundle\\MonologBundle\\MonologBundle', 'SwiftmailerBundle' => 'Symfony\\Bundle\\SwiftmailerBundle\\SwiftmailerBundle', 'DoctrineBundle' => 'Doctrine\\Bundle\\DoctrineBundle\\DoctrineBundle', 'SensioFrameworkExtraBundle' => 'Sensio\\Bundle\\FrameworkExtraBundle\\SensioFrameworkExtraBundle', 'JMSAopBundle' => 'JMS\\AopBundle\\JMSAopBundle', 'JMSSecurityExtraBundle' => 'JMS\\SecurityExtraBundle\\JMSSecurityExtraBundle', 'DoctrineMigrationsBundle' => 'Doctrine\\Bundle\\MigrationsBundle\\DoctrineMigrationsBundle', 'DoctrineCacheBundle' => 'Doctrine\\Bundle\\DoctrineCacheBundle\\DoctrineCacheBundle', 'KnpMenuBundle' => 'Knp\\Bundle\\MenuBundle\\KnpMenuBundle', 'KnpMarkdownBundle' => 'Knp\\Bundle\\MarkdownBundle\\KnpMarkdownBundle', 'KnpPaginatorBundle' => 'Knp\\Bundle\\PaginatorBundle\\KnpPaginatorBundle', 'FOSUserBundle' => 'FOS\\UserBundle\\FOSUserBundle', 'SonataUserBundle' => 'Sonata\\UserBundle\\SonataUserBundle', 'SonataMediaBundle' => 'Sonata\\MediaBundle\\SonataMediaBundle', 'IvoryCKEditorBundle' => 'Ivory\\CKEditorBundle\\IvoryCKEditorBundle', 'SonataAdminBundle' => 'Sonata\\AdminBundle\\SonataAdminBundle', 'SonataDoctrineORMAdminBundle' => 'Sonata\\DoctrineORMAdminBundle\\SonataDoctrineORMAdminBundle', 'FOSRestBundle' => 'FOS\\RestBundle\\FOSRestBundle', 'BazingaHateoasBundle' => 'Bazinga\\Bundle\\HateoasBundle\\BazingaHateoasBundle', 'NelmioApiDocBundle' => 'Nelmio\\ApiDocBundle\\NelmioApiDocBundle', 'NelmioCorsBundle' => 'Nelmio\\CorsBundle\\NelmioCorsBundle', 'JMSSerializerBundle' => 'JMS\\SerializerBundle\\JMSSerializerBundle', 'SonataEasyExtendsBundle' => 'Sonata\\EasyExtendsBundle\\SonataEasyExtendsBundle', 'SonataCoreBundle' => 'Sonata\\CoreBundle\\SonataCoreBundle', 'SonataIntlBundle' => 'Sonata\\IntlBundle\\SonataIntlBundle', 'SonataFormatterBundle' => 'Sonata\\FormatterBundle\\SonataFormatterBundle', 'SonataBlockBundle' => 'Sonata\\BlockBundle\\SonataBlockBundle', 'SonataClassificationBundle' => 'Sonata\\ClassificationBundle\\SonataClassificationBundle', 'SonataDatagridBundle' => 'Sonata\\DatagridBundle\\SonataDatagridBundle', 'MopaBootstrapBundle' => 'Mopa\\Bundle\\BootstrapBundle\\MopaBootstrapBundle', 'FOSJsRoutingBundle' => 'FOS\\JsRoutingBundle\\FOSJsRoutingBundle', 'LexikFormFilterBundle' => 'Lexik\\Bundle\\FormFilterBundle\\LexikFormFilterBundle', 'LiipImagineBundle' => 'Liip\\ImagineBundle\\LiipImagineBundle', 'KnpGaufretteBundle' => 'Knp\\Bundle\\GaufretteBundle\\KnpGaufretteBundle', 'WhiteOctoberPagerfantaBundle' => 'WhiteOctober\\PagerfantaBundle\\WhiteOctoberPagerfantaBundle', 'DataDogAuditBundle' => 'DataDog\\AuditBundle\\DataDogAuditBundle', 'GregwarCaptchaBundle' => 'Gregwar\\CaptchaBundle\\GregwarCaptchaBundle', 'LexikJWTAuthenticationBundle' => 'Lexik\\Bundle\\JWTAuthenticationBundle\\LexikJWTAuthenticationBundle', 'GesdinetJWTRefreshTokenBundle' => 'Gesdinet\\JWTRefreshTokenBundle\\GesdinetJWTRefreshTokenBundle', 'AppBundle' => 'AppBundle\\AppBundle', 'DebugBundle' => 'Symfony\\Bundle\\DebugBundle\\DebugBundle', 'WebProfilerBundle' => 'Symfony\\Bundle\\WebProfilerBundle\\WebProfilerBundle', 'SensioDistributionBundle' => 'Sensio\\Bundle\\DistributionBundle\\SensioDistributionBundle', 'SensioGeneratorBundle' => 'Sensio\\Bundle\\GeneratorBundle\\SensioGeneratorBundle', 'WebServerBundle' => 'Symfony\\Bundle\\WebServerBundle\\WebServerBundle'));
    }

    /**
     * Gets the public 'fos_js_routing.serializer' shared service.
     *
     * @return \Symfony\Component\Serializer\Serializer
     */
    protected function getFosJsRouting_SerializerService()
    {
        return $this->services['fos_js_routing.serializer'] = new \Symfony\Component\Serializer\Serializer(array(0 => new \Symfony\Component\Serializer\Normalizer\GetSetMethodNormalizer()), array('json' => new \Symfony\Component\Serializer\Encoder\JsonEncoder()));
    }

    /**
     * Gets the public 'fos_rest.body_listener' shared service.
     *
     * @return \FOS\RestBundle\EventListener\BodyListener
     */
    protected function getFosRest_BodyListenerService()
    {
        $this->services['fos_rest.body_listener'] = $instance = new \FOS\RestBundle\EventListener\BodyListener(${($_ = isset($this->services['fos_rest.decoder_provider']) ? $this->services['fos_rest.decoder_provider'] : $this->get('fos_rest.decoder_provider')) && false ?: '_'}, false);

        $instance->setDefaultFormat(NULL);

        return $instance;
    }

    /**
     * Gets the public 'fos_rest.decoder.json' shared service.
     *
     * @return \FOS\RestBundle\Decoder\JsonDecoder
     */
    protected function getFosRest_Decoder_JsonService()
    {
        return $this->services['fos_rest.decoder.json'] = new \FOS\RestBundle\Decoder\JsonDecoder();
    }

    /**
     * Gets the public 'fos_rest.decoder.jsontoform' shared service.
     *
     * @return \FOS\RestBundle\Decoder\JsonToFormDecoder
     */
    protected function getFosRest_Decoder_JsontoformService()
    {
        return $this->services['fos_rest.decoder.jsontoform'] = new \FOS\RestBundle\Decoder\JsonToFormDecoder();
    }

    /**
     * Gets the public 'fos_rest.decoder.xml' shared service.
     *
     * @return \FOS\RestBundle\Decoder\XmlDecoder
     */
    protected function getFosRest_Decoder_XmlService()
    {
        return $this->services['fos_rest.decoder.xml'] = new \FOS\RestBundle\Decoder\XmlDecoder();
    }

    /**
     * Gets the public 'fos_rest.decoder_provider' shared service.
     *
     * @return \FOS\RestBundle\Decoder\ContainerDecoderProvider
     */
    protected function getFosRest_DecoderProviderService()
    {
        return $this->services['fos_rest.decoder_provider'] = new \FOS\RestBundle\Decoder\ContainerDecoderProvider(new \Symfony\Component\DependencyInjection\ServiceLocator(array('fos_rest.decoder.json' => function () {
            return ${($_ = isset($this->services['fos_rest.decoder.json']) ? $this->services['fos_rest.decoder.json'] : $this->get('fos_rest.decoder.json')) && false ?: '_'};
        }, 'fos_rest.decoder.xml' => function () {
            return ${($_ = isset($this->services['fos_rest.decoder.xml']) ? $this->services['fos_rest.decoder.xml'] : $this->get('fos_rest.decoder.xml')) && false ?: '_'};
        })), array('json' => 'fos_rest.decoder.json', 'xml' => 'fos_rest.decoder.xml'));
    }

    /**
     * Gets the public 'fos_rest.exception.controller' shared service.
     *
     * @return \FOS\RestBundle\Controller\ExceptionController
     */
    protected function getFosRest_Exception_ControllerService()
    {
        return $this->services['fos_rest.exception.controller'] = new \FOS\RestBundle\Controller\ExceptionController(${($_ = isset($this->services['fos_rest.view_handler']) ? $this->services['fos_rest.view_handler'] : $this->get('fos_rest.view_handler')) && false ?: '_'}, ${($_ = isset($this->services['fos_rest.exception.codes_map']) ? $this->services['fos_rest.exception.codes_map'] : $this->getFosRest_Exception_CodesMapService()) && false ?: '_'}, true);
    }

    /**
     * Gets the public 'fos_rest.exception.twig_controller' shared service.
     *
     * @return \FOS\RestBundle\Controller\TwigExceptionController
     */
    protected function getFosRest_Exception_TwigControllerService()
    {
        return $this->services['fos_rest.exception.twig_controller'] = new \FOS\RestBundle\Controller\TwigExceptionController(${($_ = isset($this->services['fos_rest.view_handler']) ? $this->services['fos_rest.view_handler'] : $this->get('fos_rest.view_handler')) && false ?: '_'}, ${($_ = isset($this->services['fos_rest.exception.codes_map']) ? $this->services['fos_rest.exception.codes_map'] : $this->getFosRest_Exception_CodesMapService()) && false ?: '_'}, true, ${($_ = isset($this->services['templating']) ? $this->services['templating'] : $this->get('templating')) && false ?: '_'});
    }

    /**
     * Gets the public 'fos_rest.exception_listener' shared service.
     *
     * @return \FOS\RestBundle\EventListener\ExceptionListener
     */
    protected function getFosRest_ExceptionListenerService()
    {
        return $this->services['fos_rest.exception_listener'] = new \FOS\RestBundle\EventListener\ExceptionListener('fos_rest.exception.twig_controller:showAction', ${($_ = isset($this->services['monolog.logger.request']) ? $this->services['monolog.logger.request'] : $this->get('monolog.logger.request', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the public 'fos_rest.form.extension.csrf_disable' shared service.
     *
     * @return \FOS\RestBundle\Form\Extension\DisableCSRFExtension
     */
    protected function getFosRest_Form_Extension_CsrfDisableService()
    {
        return $this->services['fos_rest.form.extension.csrf_disable'] = new \FOS\RestBundle\Form\Extension\DisableCSRFExtension(${($_ = isset($this->services['security.token_storage']) ? $this->services['security.token_storage'] : $this->get('security.token_storage')) && false ?: '_'}, 'ROLE_API', ${($_ = isset($this->services['security.authorization_checker']) ? $this->services['security.authorization_checker'] : $this->get('security.authorization_checker')) && false ?: '_'});
    }

    /**
     * Gets the public 'fos_rest.format_listener' shared service.
     *
     * @return \FOS\RestBundle\EventListener\FormatListener
     */
    protected function getFosRest_FormatListenerService()
    {
        return $this->services['fos_rest.format_listener'] = new \FOS\RestBundle\EventListener\FormatListener(${($_ = isset($this->services['fos_rest.format_negotiator']) ? $this->services['fos_rest.format_negotiator'] : $this->get('fos_rest.format_negotiator')) && false ?: '_'});
    }

    /**
     * Gets the public 'fos_rest.format_negotiator' shared service.
     *
     * @return \FOS\RestBundle\Negotiation\FormatNegotiator
     */
    protected function getFosRest_FormatNegotiatorService()
    {
        $this->services['fos_rest.format_negotiator'] = $instance = new \FOS\RestBundle\Negotiation\FormatNegotiator(${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'});

        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/_profiler|_wdt/', NULL, NULL, NULL, array()), array('methods' => NULL, 'priorities' => array(0 => 'html', 1 => 'json'), 'fallback_format' => 'html', 'attributes' => array(), 'prefer_extension' => '2.0'));
        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/api', NULL, NULL, NULL, array()), array('priorities' => array(0 => 'json', 1 => 'xml', 2 => '*/*', 3 => '*'), 'fallback_format' => 'json', 'prefer_extension' => '2.0', 'methods' => NULL, 'attributes' => array(), 'stop' => false));
        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/', NULL, NULL, NULL, array()), array('stop' => true, 'methods' => NULL, 'attributes' => array(), 'prefer_extension' => '2.0', 'fallback_format' => 'html', 'priorities' => array()));

        return $instance;
    }

    /**
     * Gets the public 'fos_rest.inflector' shared service.
     *
     * @return \FOS\RestBundle\Inflector\DoctrineInflector
     */
    protected function getFosRest_InflectorService()
    {
        return $this->services['fos_rest.inflector'] = new \FOS\RestBundle\Inflector\DoctrineInflector();
    }

    /**
     * Gets the public 'fos_rest.mime_type_listener' shared service.
     *
     * @return \FOS\RestBundle\EventListener\MimeTypeListener
     */
    protected function getFosRest_MimeTypeListenerService()
    {
        return $this->services['fos_rest.mime_type_listener'] = new \FOS\RestBundle\EventListener\MimeTypeListener(array('json' => array(0 => 'application/json', 1 => 'application/x-json')));
    }

    /**
     * Gets the public 'fos_rest.normalizer.camel_keys' shared service.
     *
     * @return \FOS\RestBundle\Normalizer\CamelKeysNormalizer
     */
    protected function getFosRest_Normalizer_CamelKeysService()
    {
        return $this->services['fos_rest.normalizer.camel_keys'] = new \FOS\RestBundle\Normalizer\CamelKeysNormalizer();
    }

    /**
     * Gets the public 'fos_rest.normalizer.camel_keys_with_leading_underscore' shared service.
     *
     * @return \FOS\RestBundle\Normalizer\CamelKeysNormalizerWithLeadingUnderscore
     */
    protected function getFosRest_Normalizer_CamelKeysWithLeadingUnderscoreService()
    {
        return $this->services['fos_rest.normalizer.camel_keys_with_leading_underscore'] = new \FOS\RestBundle\Normalizer\CamelKeysNormalizerWithLeadingUnderscore();
    }

    /**
     * Gets the public 'fos_rest.param_fetcher_listener' shared service.
     *
     * @return \FOS\RestBundle\EventListener\ParamFetcherListener
     */
    protected function getFosRest_ParamFetcherListenerService()
    {
        return $this->services['fos_rest.param_fetcher_listener'] = new \FOS\RestBundle\EventListener\ParamFetcherListener(${($_ = isset($this->services['fos_rest.request.param_fetcher']) ? $this->services['fos_rest.request.param_fetcher'] : $this->get('fos_rest.request.param_fetcher')) && false ?: '_'}, false);
    }

    /**
     * Gets the public 'fos_rest.request.param_fetcher' shared service.
     *
     * @return \FOS\RestBundle\Request\ParamFetcher
     */
    protected function getFosRest_Request_ParamFetcherService()
    {
        return $this->services['fos_rest.request.param_fetcher'] = new \FOS\RestBundle\Request\ParamFetcher($this, ${($_ = isset($this->services['fos_rest.request.param_fetcher.reader']) ? $this->services['fos_rest.request.param_fetcher.reader'] : $this->getFosRest_Request_ParamFetcher_ReaderService()) && false ?: '_'}, ${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'}, ${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the public 'fos_rest.serializer' shared service.
     *
     * @return \FOS\RestBundle\Serializer\JMSSerializerAdapter
     */
    public function getFosRest_SerializerService($lazyLoad = true)
    {
        if ($lazyLoad) {

            return $this->services['fos_rest.serializer'] = FOSRestBundleSerializerJMSSerializerAdapter_000000006d9c1a53000000004dc181e407c393e08643067c07eb5044e3591135::staticProxyConstructor(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) {
                    $wrappedInstance = $this->getFosRest_SerializerService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        return new \FOS\RestBundle\Serializer\JMSSerializerAdapter(${($_ = isset($this->services['jms_serializer']) ? $this->services['jms_serializer'] : $this->get('jms_serializer')) && false ?: '_'}, ${($_ = isset($this->services['jms_serializer.serialization_context_factory']) ? $this->services['jms_serializer.serialization_context_factory'] : $this->get('jms_serializer.serialization_context_factory')) && false ?: '_'}, ${($_ = isset($this->services['jms_serializer.deserialization_context_factory']) ? $this->services['jms_serializer.deserialization_context_factory'] : $this->get('jms_serializer.deserialization_context_factory')) && false ?: '_'});
    }

    /**
     * Gets the public 'fos_rest.serializer.exception_normalizer.jms' shared service.
     *
     * @return \FOS\RestBundle\Serializer\Normalizer\ExceptionHandler
     */
    protected function getFosRest_Serializer_ExceptionNormalizer_JmsService()
    {
        return $this->services['fos_rest.serializer.exception_normalizer.jms'] = new \FOS\RestBundle\Serializer\Normalizer\ExceptionHandler(new \FOS\RestBundle\Util\ExceptionValueMap(array('Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException' => true)), true);
    }

    /**
     * Gets the public 'fos_rest.view_handler' shared service.
     *
     * @return \FOS\RestBundle\View\ViewHandler
     */
    protected function getFosRest_ViewHandlerService()
    {
        $this->services['fos_rest.view_handler'] = $instance = new \FOS\RestBundle\View\ViewHandler(${($_ = isset($this->services['router']) ? $this->services['router'] : $this->get('router')) && false ?: '_'}, ${($_ = isset($this->services['fos_rest.serializer']) ? $this->services['fos_rest.serializer'] : $this->get('fos_rest.serializer')) && false ?: '_'}, ${($_ = isset($this->services['templating']) ? $this->services['templating'] : $this->get('templating', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, ${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'}, array('json' => false, 'html' => true), 400, 204, false, array('html' => 302), 'twig');

        $instance->setSerializeNullStrategy(false);
        $instance->registerHandler('jsonp', array(0 => new \FOS\RestBundle\View\JsonpHandler('JSON_CALLBACK'), 1 => 'createResponse'));

        return $instance;
    }

    /**
     * Gets the public 'fos_rest.view_response_listener' shared service.
     *
     * @return \FOS\RestBundle\EventListener\ViewResponseListener
     */
    protected function getFosRest_ViewResponseListenerService()
    {
        return $this->services['fos_rest.view_response_listener'] = new \FOS\RestBundle\EventListener\ViewResponseListener(${($_ = isset($this->services['fos_rest.view_handler']) ? $this->services['fos_rest.view_handler'] : $this->get('fos_rest.view_handler')) && false ?: '_'}, true);
    }

    /**
     * Gets the public 'fos_user.change_password.controller' shared service.
     *
     * @return \FOS\UserBundle\Controller\ChangePasswordController
     */
    protected function getFosUser_ChangePassword_ControllerService()
    {
        $this->services['fos_user.change_password.controller'] = $instance = new \FOS\UserBundle\Controller\ChangePasswordController(${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher')) && false ?: '_'}, ${($_ = isset($this->services['fos_user.change_password.form.factory']) ? $this->services['fos_user.change_password.form.factory'] : $this->get('fos_user.change_password.form.factory')) && false ?: '_'}, ${($_ = isset($this->services['fos_user.user_manager']) ? $this->services['fos_user.user_manager'] : $this->get('fos_user.user_manager')) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the public 'fos_user.change_password.form.factory' shared service.
     *
     * @return \FOS\UserBundle\Form\Factory\FormFactory
     */
    protected function getFosUser_ChangePassword_Form_FactoryService()
    {
        return $this->services['fos_user.change_password.form.factory'] = new \FOS\UserBundle\Form\Factory\FormFactory(${($_ = isset($this->services['form.factory']) ? $this->services['form.factory'] : $this->get('form.factory')) && false ?: '_'}, 'fos_user_change_password_form', 'FOS\\UserBundle\\Form\\Type\\ChangePasswordFormType', array(0 => 'ChangePassword', 1 => 'Default'));
    }

    /**
     * Gets the public 'fos_user.change_password.form.type' shared service.
     *
     * @return \FOS\UserBundle\Form\Type\ChangePasswordFormType
     */
    protected function getFosUser_ChangePassword_Form_TypeService()
    {
        return $this->services['fos_user.change_password.form.type'] = new \FOS\UserBundle\Form\Type\ChangePasswordFormType('AppBundle\\Entity\\User\\User');
    }

    /**
     * Gets the public 'fos_user.command.activate_user' shared service.
     *
     * @return \FOS\UserBundle\Command\ActivateUserCommand
     */
    protected function getFosUser_Command_ActivateUserService()
    {
        return $this->services['fos_user.command.activate_user'] = new \FOS\UserBundle\Command\ActivateUserCommand(${($_ = isset($this->services['fos_user.util.user_manipulator']) ? $this->services['fos_user.util.user_manipulator'] : $this->get('fos_user.util.user_manipulator')) && false ?: '_'});
    }

    /**
     * Gets the public 'fos_user.command.change_password' shared service.
     *
     * @return \FOS\UserBundle\Command\ChangePasswordCommand
     */
    protected function getFosUser_Command_ChangePasswordService()
    {
        return $this->services['fos_user.command.change_password'] = new \FOS\UserBundle\Command\ChangePasswordCommand(${($_ = isset($this->services['fos_user.util.user_manipulator']) ? $this->services['fos_user.util.user_manipulator'] : $this->get('fos_user.util.user_manipulator')) && false ?: '_'});
    }

    /**
     * Gets the public 'fos_user.command.create_user' shared service.
     *
     * @return \FOS\UserBundle\Command\CreateUserCommand
     */
    protected function getFosUser_Command_CreateUserService()
    {
        return $this->services['fos_user.command.create_user'] = new \FOS\UserBundle\Command\CreateUserCommand(${($_ = isset($this->services['fos_user.util.user_manipulator']) ? $this->services['fos_user.util.user_manipulator'] : $this->get('fos_user.util.user_manipulator')) && false ?: '_'});
    }

    /**
     * Gets the public 'fos_user.command.deactivate_user' shared service.
     *
     * @return \FOS\UserBundle\Command\DeactivateUserCommand
     */
    protected function getFosUser_Command_DeactivateUserService()
    {
        return $this->services['fos_user.command.deactivate_user'] = new \FOS\UserBundle\Command\DeactivateUserCommand(${($_ = isset($this->services['fos_user.util.user_manipulator']) ? $this->services['fos_user.util.user_manipulator'] : $this->get('fos_user.util.user_manipulator')) && false ?: '_'});
    }

    /**
     * Gets the public 'fos_user.command.demote_user' shared service.
     *
     * @return \FOS\UserBundle\Command\DemoteUserCommand
     */
    protected function getFosUser_Command_DemoteUserService()
    {
        return $this->services['fos_user.command.demote_user'] = new \FOS\UserBundle\Command\DemoteUserCommand(${($_ = isset($this->services['fos_user.util.user_manipulator']) ? $this->services['fos_user.util.user_manipulator'] : $this->get('fos_user.util.user_manipulator')) && false ?: '_'});
    }

    /**
     * Gets the public 'fos_user.command.promote_user' shared service.
     *
     * @return \FOS\UserBundle\Command\PromoteUserCommand
     */
    protected function getFosUser_Command_PromoteUserService()
    {
        return $this->services['fos_user.command.promote_user'] = new \FOS\UserBundle\Command\PromoteUserCommand(${($_ = isset($this->services['fos_user.util.user_manipulator']) ? $this->services['fos_user.util.user_manipulator'] : $this->get('fos_user.util.user_manipulator')) && false ?: '_'});
    }

    /**
     * Gets the public 'fos_user.group.controller' shared service.
     *
     * @return \FOS\UserBundle\Controller\GroupController
     */
    protected function getFosUser_Group_ControllerService()
    {
        $this->services['fos_user.group.controller'] = $instance = new \FOS\UserBundle\Controller\GroupController(${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher')) && false ?: '_'}, ${($_ = isset($this->services['fos_user.group.form.factory']) ? $this->services['fos_user.group.form.factory'] : $this->get('fos_user.group.form.factory')) && false ?: '_'}, ${($_ = isset($this->services['fos_user.group_manager']) ? $this->services['fos_user.group_manager'] : $this->get('fos_user.group_manager')) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the public 'fos_user.group.form.factory' shared service.
     *
     * @return \FOS\UserBundle\Form\Factory\FormFactory
     */
    protected function getFosUser_Group_Form_FactoryService()
    {
        return $this->services['fos_user.group.form.factory'] = new \FOS\UserBundle\Form\Factory\FormFactory(${($_ = isset($this->services['form.factory']) ? $this->services['form.factory'] : $this->get('form.factory')) && false ?: '_'}, 'fos_user_group_form', 'FOS\\UserBundle\\Form\\Type\\GroupFormType', array(0 => 'Registration', 1 => 'Default'));
    }

    /**
     * Gets the public 'fos_user.group.form.type' shared service.
     *
     * @return \FOS\UserBundle\Form\Type\GroupFormType
     */
    protected function getFosUser_Group_Form_TypeService()
    {
        return $this->services['fos_user.group.form.type'] = new \FOS\UserBundle\Form\Type\GroupFormType('AppBundle\\Entity\\User\\Group');
    }

    /**
     * Gets the public 'fos_user.group_manager' shared service.
     *
     * @return \Sonata\UserBundle\Entity\GroupManager
     */
    protected function getFosUser_GroupManagerService()
    {
        return $this->services['fos_user.group_manager'] = new \Sonata\UserBundle\Entity\GroupManager(${($_ = isset($this->services['fos_user.object_manager']) ? $this->services['fos_user.object_manager'] : $this->getFosUser_ObjectManagerService()) && false ?: '_'}, 'AppBundle\\Entity\\User\\Group');
    }

    /**
     * Gets the public 'fos_user.listener.authentication' shared service.
     *
     * @return \FOS\UserBundle\EventListener\AuthenticationListener
     */
    protected function getFosUser_Listener_AuthenticationService()
    {
        return $this->services['fos_user.listener.authentication'] = new \FOS\UserBundle\EventListener\AuthenticationListener(${($_ = isset($this->services['fos_user.security.login_manager']) ? $this->services['fos_user.security.login_manager'] : $this->get('fos_user.security.login_manager')) && false ?: '_'}, 'main');
    }

    /**
     * Gets the public 'fos_user.listener.email_confirmation' shared service.
     *
     * @return \FOS\UserBundle\EventListener\EmailConfirmationListener
     */
    protected function getFosUser_Listener_EmailConfirmationService()
    {
        return $this->services['fos_user.listener.email_confirmation'] = new \FOS\UserBundle\EventListener\EmailConfirmationListener(${($_ = isset($this->services['fos_user.mailer']) ? $this->services['fos_user.mailer'] : $this->get('fos_user.mailer')) && false ?: '_'}, ${($_ = isset($this->services['fos_user.util.token_generator']) ? $this->services['fos_user.util.token_generator'] : $this->get('fos_user.util.token_generator')) && false ?: '_'}, ${($_ = isset($this->services['router']) ? $this->services['router'] : $this->get('router')) && false ?: '_'}, ${($_ = isset($this->services['session']) ? $this->services['session'] : $this->get('session')) && false ?: '_'});
    }

    /**
     * Gets the public 'fos_user.listener.flash' shared service.
     *
     * @return \FOS\UserBundle\EventListener\FlashListener
     */
    protected function getFosUser_Listener_FlashService()
    {
        return $this->services['fos_user.listener.flash'] = new \FOS\UserBundle\EventListener\FlashListener(${($_ = isset($this->services['session']) ? $this->services['session'] : $this->get('session')) && false ?: '_'}, ${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'});
    }

    /**
     * Gets the public 'fos_user.listener.resetting' shared service.
     *
     * @return \FOS\UserBundle\EventListener\ResettingListener
     */
    protected function getFosUser_Listener_ResettingService()
    {
        return $this->services['fos_user.listener.resetting'] = new \FOS\UserBundle\EventListener\ResettingListener(${($_ = isset($this->services['router']) ? $this->services['router'] : $this->get('router')) && false ?: '_'}, 86400);
    }

    /**
     * Gets the public 'fos_user.mailer' shared service.
     *
     * @return \FOS\UserBundle\Mailer\Mailer
     */
    protected function getFosUser_MailerService()
    {
        return $this->services['fos_user.mailer'] = new \FOS\UserBundle\Mailer\Mailer(${($_ = isset($this->services['swiftmailer.mailer.default']) ? $this->services['swiftmailer.mailer.default'] : $this->get('swiftmailer.mailer.default')) && false ?: '_'}, ${($_ = isset($this->services['router']) ? $this->services['router'] : $this->get('router')) && false ?: '_'}, ${($_ = isset($this->services['templating']) ? $this->services['templating'] : $this->get('templating')) && false ?: '_'}, array('confirmation.template' => '@FOSUser/Registration/email.txt.twig', 'resetting.template' => '@FOSUser/Resetting/email.txt.twig', 'from_email' => array('confirmation' => array('no-reply@symfony.com' => 'webmaster'), 'resetting' => array('no-reply@symfony.com' => 'webmaster'))));
    }

    /**
     * Gets the public 'fos_user.profile.controller' shared service.
     *
     * @return \FOS\UserBundle\Controller\ProfileController
     */
    protected function getFosUser_Profile_ControllerService()
    {
        $this->services['fos_user.profile.controller'] = $instance = new \FOS\UserBundle\Controller\ProfileController(${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher')) && false ?: '_'}, ${($_ = isset($this->services['fos_user.profile.form.factory']) ? $this->services['fos_user.profile.form.factory'] : $this->get('fos_user.profile.form.factory')) && false ?: '_'}, ${($_ = isset($this->services['fos_user.user_manager']) ? $this->services['fos_user.user_manager'] : $this->get('fos_user.user_manager')) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the public 'fos_user.profile.form.factory' shared service.
     *
     * @return \FOS\UserBundle\Form\Factory\FormFactory
     */
    protected function getFosUser_Profile_Form_FactoryService()
    {
        return $this->services['fos_user.profile.form.factory'] = new \FOS\UserBundle\Form\Factory\FormFactory(${($_ = isset($this->services['form.factory']) ? $this->services['form.factory'] : $this->get('form.factory')) && false ?: '_'}, 'fos_user_profile_form', 'AppBundle\\Form\\User\\Type\\ProfileFormType', array(0 => 'Profile', 1 => 'Default'));
    }

    /**
     * Gets the public 'fos_user.profile.form.type' shared service.
     *
     * @return \FOS\UserBundle\Form\Type\ProfileFormType
     */
    protected function getFosUser_Profile_Form_TypeService()
    {
        return $this->services['fos_user.profile.form.type'] = new \FOS\UserBundle\Form\Type\ProfileFormType('AppBundle\\Entity\\User\\User');
    }

    /**
     * Gets the public 'fos_user.registration.controller' shared service.
     *
     * @return \FOS\UserBundle\Controller\RegistrationController
     */
    protected function getFosUser_Registration_ControllerService()
    {
        $this->services['fos_user.registration.controller'] = $instance = new \FOS\UserBundle\Controller\RegistrationController(${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher')) && false ?: '_'}, ${($_ = isset($this->services['fos_user.registration.form.factory']) ? $this->services['fos_user.registration.form.factory'] : $this->get('fos_user.registration.form.factory')) && false ?: '_'}, ${($_ = isset($this->services['fos_user.user_manager']) ? $this->services['fos_user.user_manager'] : $this->get('fos_user.user_manager')) && false ?: '_'}, ${($_ = isset($this->services['security.token_storage']) ? $this->services['security.token_storage'] : $this->get('security.token_storage')) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the public 'fos_user.registration.form.factory' shared service.
     *
     * @return \FOS\UserBundle\Form\Factory\FormFactory
     */
    protected function getFosUser_Registration_Form_FactoryService()
    {
        return $this->services['fos_user.registration.form.factory'] = new \FOS\UserBundle\Form\Factory\FormFactory(${($_ = isset($this->services['form.factory']) ? $this->services['form.factory'] : $this->get('form.factory')) && false ?: '_'}, 'fos_user_registration_form', 'AppBundle\\Form\\User\\Type\\RegistrationFormType', array(0 => 'Registration', 1 => 'Default'));
    }

    /**
     * Gets the public 'fos_user.registration.form.type' shared service.
     *
     * @return \FOS\UserBundle\Form\Type\RegistrationFormType
     */
    protected function getFosUser_Registration_Form_TypeService()
    {
        return $this->services['fos_user.registration.form.type'] = new \FOS\UserBundle\Form\Type\RegistrationFormType('AppBundle\\Entity\\User\\User');
    }

    /**
     * Gets the public 'fos_user.resetting.controller' shared service.
     *
     * @return \FOS\UserBundle\Controller\ResettingController
     */
    protected function getFosUser_Resetting_ControllerService()
    {
        $this->services['fos_user.resetting.controller'] = $instance = new \FOS\UserBundle\Controller\ResettingController(${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher')) && false ?: '_'}, ${($_ = isset($this->services['fos_user.resetting.form.factory']) ? $this->services['fos_user.resetting.form.factory'] : $this->get('fos_user.resetting.form.factory')) && false ?: '_'}, ${($_ = isset($this->services['fos_user.user_manager']) ? $this->services['fos_user.user_manager'] : $this->get('fos_user.user_manager')) && false ?: '_'}, ${($_ = isset($this->services['fos_user.util.token_generator']) ? $this->services['fos_user.util.token_generator'] : $this->get('fos_user.util.token_generator')) && false ?: '_'}, ${($_ = isset($this->services['fos_user.mailer']) ? $this->services['fos_user.mailer'] : $this->get('fos_user.mailer')) && false ?: '_'}, 7200);

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the public 'fos_user.resetting.form.factory' shared service.
     *
     * @return \FOS\UserBundle\Form\Factory\FormFactory
     */
    protected function getFosUser_Resetting_Form_FactoryService()
    {
        return $this->services['fos_user.resetting.form.factory'] = new \FOS\UserBundle\Form\Factory\FormFactory(${($_ = isset($this->services['form.factory']) ? $this->services['form.factory'] : $this->get('form.factory')) && false ?: '_'}, 'fos_user_resetting_form', 'FOS\\UserBundle\\Form\\Type\\ResettingFormType', array(0 => 'ResetPassword', 1 => 'Default'));
    }

    /**
     * Gets the public 'fos_user.resetting.form.type' shared service.
     *
     * @return \FOS\UserBundle\Form\Type\ResettingFormType
     */
    protected function getFosUser_Resetting_Form_TypeService()
    {
        return $this->services['fos_user.resetting.form.type'] = new \FOS\UserBundle\Form\Type\ResettingFormType('AppBundle\\Entity\\User\\User');
    }

    /**
     * Gets the public 'fos_user.security.controller' shared service.
     *
     * @return \FOS\UserBundle\Controller\SecurityController
     */
    protected function getFosUser_Security_ControllerService()
    {
        $this->services['fos_user.security.controller'] = $instance = new \FOS\UserBundle\Controller\SecurityController(${($_ = isset($this->services['security.csrf.token_manager']) ? $this->services['security.csrf.token_manager'] : $this->get('security.csrf.token_manager', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});

        $instance->setContainer($this);

        return $instance;
    }

    /**
     * Gets the public 'fos_user.security.interactive_login_listener' shared service.
     *
     * @return \FOS\UserBundle\EventListener\LastLoginListener
     */
    protected function getFosUser_Security_InteractiveLoginListenerService()
    {
        return $this->services['fos_user.security.interactive_login_listener'] = new \FOS\UserBundle\EventListener\LastLoginListener(${($_ = isset($this->services['fos_user.user_manager']) ? $this->services['fos_user.user_manager'] : $this->get('fos_user.user_manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'fos_user.security.login_manager' shared service.
     *
     * @return \FOS\UserBundle\Security\LoginManager
     */
    protected function getFosUser_Security_LoginManagerService()
    {
        return $this->services['fos_user.security.login_manager'] = new \FOS\UserBundle\Security\LoginManager(${($_ = isset($this->services['security.token_storage']) ? $this->services['security.token_storage'] : $this->get('security.token_storage')) && false ?: '_'}, ${($_ = isset($this->services['security.user_checker']) ? $this->services['security.user_checker'] : $this->getSecurity_UserCheckerService()) && false ?: '_'}, ${($_ = isset($this->services['security.authentication.session_strategy']) ? $this->services['security.authentication.session_strategy'] : $this->getSecurity_Authentication_SessionStrategyService()) && false ?: '_'}, ${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'}, ${($_ = isset($this->services['security.authentication.rememberme.services.simplehash.main']) ? $this->services['security.authentication.rememberme.services.simplehash.main'] : $this->getSecurity_Authentication_Rememberme_Services_Simplehash_MainService()) && false ?: '_'});
    }

    /**
     * Gets the public 'fos_user.user_manager' shared service.
     *
     * @return \Sonata\UserBundle\Entity\UserManager
     */
    protected function getFosUser_UserManagerService()
    {
        return $this->services['fos_user.user_manager'] = new \Sonata\UserBundle\Entity\UserManager(${($_ = isset($this->services['fos_user.util.password_updater']) ? $this->services['fos_user.util.password_updater'] : $this->getFosUser_Util_PasswordUpdaterService()) && false ?: '_'}, ${($_ = isset($this->services['fos_user.util.canonical_fields_updater']) ? $this->services['fos_user.util.canonical_fields_updater'] : $this->getFosUser_Util_CanonicalFieldsUpdaterService()) && false ?: '_'}, ${($_ = isset($this->services['fos_user.object_manager']) ? $this->services['fos_user.object_manager'] : $this->getFosUser_ObjectManagerService()) && false ?: '_'}, 'AppBundle\\Entity\\User\\User');
    }

    /**
     * Gets the public 'fos_user.username_form_type' shared service.
     *
     * @return \FOS\UserBundle\Form\Type\UsernameFormType
     */
    protected function getFosUser_UsernameFormTypeService()
    {
        return $this->services['fos_user.username_form_type'] = new \FOS\UserBundle\Form\Type\UsernameFormType(new \FOS\UserBundle\Form\DataTransformer\UserToUsernameTransformer(${($_ = isset($this->services['fos_user.user_manager']) ? $this->services['fos_user.user_manager'] : $this->get('fos_user.user_manager')) && false ?: '_'}));
    }

    /**
     * Gets the public 'fos_user.util.email_canonicalizer' shared service.
     *
     * @return \FOS\UserBundle\Util\Canonicalizer
     */
    protected function getFosUser_Util_EmailCanonicalizerService()
    {
        return $this->services['fos_user.util.email_canonicalizer'] = new \FOS\UserBundle\Util\Canonicalizer();
    }

    /**
     * Gets the public 'fos_user.util.token_generator' shared service.
     *
     * @return \FOS\UserBundle\Util\TokenGenerator
     */
    protected function getFosUser_Util_TokenGeneratorService()
    {
        return $this->services['fos_user.util.token_generator'] = new \FOS\UserBundle\Util\TokenGenerator();
    }

    /**
     * Gets the public 'fos_user.util.user_manipulator' shared service.
     *
     * @return \FOS\UserBundle\Util\UserManipulator
     */
    protected function getFosUser_Util_UserManipulatorService()
    {
        return $this->services['fos_user.util.user_manipulator'] = new \FOS\UserBundle\Util\UserManipulator(${($_ = isset($this->services['fos_user.user_manager']) ? $this->services['fos_user.user_manager'] : $this->get('fos_user.user_manager')) && false ?: '_'}, ${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher')) && false ?: '_'}, ${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'});
    }

    /**
     * Gets the public 'fragment.handler' shared service.
     *
     * @return \Symfony\Component\HttpKernel\DependencyInjection\LazyLoadingFragmentHandler
     */
    protected function getFragment_HandlerService()
    {
        return $this->services['fragment.handler'] = new \Symfony\Component\HttpKernel\DependencyInjection\LazyLoadingFragmentHandler(${($_ = isset($this->services['service_locator.cc2b70dfe28c491d5d4736dc8913e9ae']) ? $this->services['service_locator.cc2b70dfe28c491d5d4736dc8913e9ae'] : $this->getServiceLocator_Cc2b70dfe28c491d5d4736dc8913e9aeService()) && false ?: '_'}, ${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'}, true);
    }

    /**
     * Gets the public 'fragment.listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\FragmentListener
     */
    protected function getFragment_ListenerService()
    {
        return $this->services['fragment.listener'] = new \Symfony\Component\HttpKernel\EventListener\FragmentListener(${($_ = isset($this->services['uri_signer']) ? $this->services['uri_signer'] : $this->get('uri_signer')) && false ?: '_'}, '/_fragment');
    }

    /**
     * Gets the public 'fragment.renderer.hinclude' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Fragment\HIncludeFragmentRenderer
     */
    protected function getFragment_Renderer_HincludeService()
    {
        $this->services['fragment.renderer.hinclude'] = $instance = new \Symfony\Component\HttpKernel\Fragment\HIncludeFragmentRenderer(${($_ = isset($this->services['twig']) ? $this->services['twig'] : $this->get('twig')) && false ?: '_'}, ${($_ = isset($this->services['uri_signer']) ? $this->services['uri_signer'] : $this->get('uri_signer')) && false ?: '_'}, 'hinclude.html.twig');

        $instance->setFragmentPath('/_fragment');

        return $instance;
    }

    /**
     * Gets the public 'fragment.renderer.inline' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Fragment\InlineFragmentRenderer
     */
    protected function getFragment_Renderer_InlineService()
    {
        $this->services['fragment.renderer.inline'] = $instance = new \Symfony\Component\HttpKernel\Fragment\InlineFragmentRenderer(${($_ = isset($this->services['http_kernel']) ? $this->services['http_kernel'] : $this->get('http_kernel')) && false ?: '_'}, ${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher')) && false ?: '_'});

        $instance->setFragmentPath('/_fragment');

        return $instance;
    }

    /**
     * Gets the public 'gesdinet.jwtrefreshtoken' shared service.
     *
     * @return \Gesdinet\JWTRefreshTokenBundle\Service\RefreshToken
     */
    protected function getGesdinet_JwtrefreshtokenService()
    {
        return $this->services['gesdinet.jwtrefreshtoken'] = new \Gesdinet\JWTRefreshTokenBundle\Service\RefreshToken(${($_ = isset($this->services['gesdinet.jwtrefreshtoken.authenticator']) ? $this->services['gesdinet.jwtrefreshtoken.authenticator'] : $this->get('gesdinet.jwtrefreshtoken.authenticator')) && false ?: '_'}, ${($_ = isset($this->services['gesdinet.jwtrefreshtoken.user_provider']) ? $this->services['gesdinet.jwtrefreshtoken.user_provider'] : $this->get('gesdinet.jwtrefreshtoken.user_provider')) && false ?: '_'}, ${($_ = isset($this->services['lexik_jwt_authentication.handler.authentication_success']) ? $this->services['lexik_jwt_authentication.handler.authentication_success'] : $this->get('lexik_jwt_authentication.handler.authentication_success')) && false ?: '_'}, ${($_ = isset($this->services['lexik_jwt_authentication.handler.authentication_failure']) ? $this->services['lexik_jwt_authentication.handler.authentication_failure'] : $this->get('lexik_jwt_authentication.handler.authentication_failure')) && false ?: '_'}, ${($_ = isset($this->services['gesdinet.jwtrefreshtoken.refresh_token_manager']) ? $this->services['gesdinet.jwtrefreshtoken.refresh_token_manager'] : $this->get('gesdinet.jwtrefreshtoken.refresh_token_manager')) && false ?: '_'}, 86400, 'api', true);
    }

    /**
     * Gets the public 'gesdinet.jwtrefreshtoken.authenticator' shared service.
     *
     * @return \Gesdinet\JWTRefreshTokenBundle\Security\Authenticator\RefreshTokenAuthenticator
     */
    protected function getGesdinet_Jwtrefreshtoken_AuthenticatorService()
    {
        return $this->services['gesdinet.jwtrefreshtoken.authenticator'] = new \Gesdinet\JWTRefreshTokenBundle\Security\Authenticator\RefreshTokenAuthenticator();
    }

    /**
     * Gets the public 'gesdinet.jwtrefreshtoken.refresh_token_manager' shared service.
     *
     * @return \Gesdinet\JWTRefreshTokenBundle\Doctrine\RefreshTokenManager
     */
    protected function getGesdinet_Jwtrefreshtoken_RefreshTokenManagerService()
    {
        return $this->services['gesdinet.jwtrefreshtoken.refresh_token_manager'] = new \Gesdinet\JWTRefreshTokenBundle\Doctrine\RefreshTokenManager(${($_ = isset($this->services['doctrine.orm.default_entity_manager']) ? $this->services['doctrine.orm.default_entity_manager'] : $this->get('doctrine.orm.default_entity_manager')) && false ?: '_'}, 'Gesdinet\\JWTRefreshTokenBundle\\Entity\\RefreshToken');
    }

    /**
     * Gets the public 'gesdinet.jwtrefreshtoken.send_token' shared service.
     *
     * @return \Gesdinet\JWTRefreshTokenBundle\EventListener\AttachRefreshTokenOnSuccessListener
     */
    protected function getGesdinet_Jwtrefreshtoken_SendTokenService()
    {
        return $this->services['gesdinet.jwtrefreshtoken.send_token'] = new \Gesdinet\JWTRefreshTokenBundle\EventListener\AttachRefreshTokenOnSuccessListener(${($_ = isset($this->services['gesdinet.jwtrefreshtoken.refresh_token_manager']) ? $this->services['gesdinet.jwtrefreshtoken.refresh_token_manager'] : $this->get('gesdinet.jwtrefreshtoken.refresh_token_manager')) && false ?: '_'}, 86400, ${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'}, ${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'});
    }

    /**
     * Gets the public 'gesdinet.jwtrefreshtoken.user_provider' shared service.
     *
     * @return \Gesdinet\JWTRefreshTokenBundle\Security\Provider\RefreshTokenProvider
     */
    protected function getGesdinet_Jwtrefreshtoken_UserProviderService()
    {
        return $this->services['gesdinet.jwtrefreshtoken.user_provider'] = new \Gesdinet\JWTRefreshTokenBundle\Security\Provider\RefreshTokenProvider(${($_ = isset($this->services['gesdinet.jwtrefreshtoken.refresh_token_manager']) ? $this->services['gesdinet.jwtrefreshtoken.refresh_token_manager'] : $this->get('gesdinet.jwtrefreshtoken.refresh_token_manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'gregwar_captcha.captcha_builder' shared service.
     *
     * @return \Gregwar\Captcha\CaptchaBuilder
     */
    protected function getGregwarCaptcha_CaptchaBuilderService()
    {
        return $this->services['gregwar_captcha.captcha_builder'] = new \Gregwar\Captcha\CaptchaBuilder();
    }

    /**
     * Gets the public 'gregwar_captcha.generator' shared service.
     *
     * @return \Gregwar\CaptchaBundle\Generator\CaptchaGenerator
     */
    protected function getGregwarCaptcha_GeneratorService()
    {
        return $this->services['gregwar_captcha.generator'] = new \Gregwar\CaptchaBundle\Generator\CaptchaGenerator(${($_ = isset($this->services['router']) ? $this->services['router'] : $this->get('router')) && false ?: '_'}, ${($_ = isset($this->services['gregwar_captcha.captcha_builder']) ? $this->services['gregwar_captcha.captcha_builder'] : $this->get('gregwar_captcha.captcha_builder')) && false ?: '_'}, ${($_ = isset($this->services['gregwar_captcha.phrase_builder']) ? $this->services['gregwar_captcha.phrase_builder'] : $this->get('gregwar_captcha.phrase_builder')) && false ?: '_'}, ${($_ = isset($this->services['gregwar_captcha.image_file_handler']) ? $this->services['gregwar_captcha.image_file_handler'] : $this->get('gregwar_captcha.image_file_handler')) && false ?: '_'});
    }

    /**
     * Gets the public 'gregwar_captcha.image_file_handler' shared service.
     *
     * @return \Gregwar\CaptchaBundle\Generator\ImageFileHandler
     */
    protected function getGregwarCaptcha_ImageFileHandlerService()
    {
        return $this->services['gregwar_captcha.image_file_handler'] = new \Gregwar\CaptchaBundle\Generator\ImageFileHandler('captcha', ($this->targetDirs[3].'\\app/../web'), 100, 60);
    }

    /**
     * Gets the public 'gregwar_captcha.phrase_builder' shared service.
     *
     * @return \Gregwar\Captcha\PhraseBuilder
     */
    protected function getGregwarCaptcha_PhraseBuilderService()
    {
        return $this->services['gregwar_captcha.phrase_builder'] = new \Gregwar\Captcha\PhraseBuilder();
    }

    /**
     * Gets the public 'hateoas.configuration.provider.resolver' shared service.
     *
     * @return \Hateoas\Configuration\Provider\Resolver\ChainResolver
     */
    protected function getHateoas_Configuration_Provider_ResolverService()
    {
        return $this->services['hateoas.configuration.provider.resolver'] = new \Hateoas\Configuration\Provider\Resolver\ChainResolver(array(0 => new \Hateoas\Configuration\Provider\Resolver\MethodResolver(), 1 => new \Hateoas\Configuration\Provider\Resolver\StaticMethodResolver(), 2 => new \Hateoas\Configuration\Provider\Resolver\SymfonyContainerResolver($this)));
    }

    /**
     * Gets the public 'hateoas.event_subscriber.json' shared service.
     *
     * @return \Hateoas\Serializer\EventSubscriber\JsonEventSubscriber
     */
    protected function getHateoas_EventSubscriber_JsonService()
    {
        $a = ${($_ = isset($this->services['jms_serializer.metadata_factory']) ? $this->services['jms_serializer.metadata_factory'] : $this->getJmsSerializer_MetadataFactoryService()) && false ?: '_'};

        return $this->services['hateoas.event_subscriber.json'] = new \Hateoas\Serializer\EventSubscriber\JsonEventSubscriber(new \Hateoas\Serializer\JsonHalSerializer(), ${($_ = isset($this->services['hateoas.links_factory']) ? $this->services['hateoas.links_factory'] : $this->getHateoas_LinksFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['hateoas.embeds_factory']) ? $this->services['hateoas.embeds_factory'] : $this->getHateoas_EmbedsFactoryService()) && false ?: '_'}, new \Hateoas\Serializer\Metadata\InlineDeferrer($a), new \Hateoas\Serializer\Metadata\InlineDeferrer($a));
    }

    /**
     * Gets the public 'hateoas.event_subscriber.xml' shared service.
     *
     * @return \Hateoas\Serializer\EventSubscriber\XmlEventSubscriber
     */
    protected function getHateoas_EventSubscriber_XmlService()
    {
        $a = new \Hateoas\Serializer\XmlSerializer();
        $a->setMetadataFactory(${($_ = isset($this->services['jms_serializer.metadata_factory']) ? $this->services['jms_serializer.metadata_factory'] : $this->getJmsSerializer_MetadataFactoryService()) && false ?: '_'});

        return $this->services['hateoas.event_subscriber.xml'] = new \Hateoas\Serializer\EventSubscriber\XmlEventSubscriber($a, ${($_ = isset($this->services['hateoas.links_factory']) ? $this->services['hateoas.links_factory'] : $this->getHateoas_LinksFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['hateoas.embeds_factory']) ? $this->services['hateoas.embeds_factory'] : $this->getHateoas_EmbedsFactoryService()) && false ?: '_'});
    }

    /**
     * Gets the public 'hateoas.expression.evaluator' shared service.
     *
     * @return \Bazinga\Bundle\HateoasBundle\Hateoas\Expression\LazyFunctionExpressionEvaluator
     */
    protected function getHateoas_Expression_EvaluatorService()
    {
        $this->services['hateoas.expression.evaluator'] = $instance = new \Bazinga\Bundle\HateoasBundle\Hateoas\Expression\LazyFunctionExpressionEvaluator(${($_ = isset($this->services['bazinga_hateoas.expression_language']) ? $this->services['bazinga_hateoas.expression_language'] : $this->get('bazinga_hateoas.expression_language')) && false ?: '_'}, array(), $this);

        $instance->setContextVariable('container', $this);
        $instance->registerFunctionId('hateoas.expression.link');

        return $instance;
    }

    /**
     * Gets the public 'hateoas.expression.link' shared service.
     *
     * @return \Hateoas\Expression\LinkExpressionFunction
     */
    protected function getHateoas_Expression_LinkService()
    {
        return $this->services['hateoas.expression.link'] = new \Hateoas\Expression\LinkExpressionFunction(${($_ = isset($this->services['hateoas.helper.link']) ? $this->services['hateoas.helper.link'] : $this->get('hateoas.helper.link')) && false ?: '_'});
    }

    /**
     * Gets the public 'hateoas.generator.registry' shared service.
     *
     * @return \Hateoas\UrlGenerator\UrlGeneratorRegistry
     */
    protected function getHateoas_Generator_RegistryService()
    {
        return $this->services['hateoas.generator.registry'] = new \Hateoas\UrlGenerator\UrlGeneratorRegistry(${($_ = isset($this->services['hateoas.generator.symfony']) ? $this->services['hateoas.generator.symfony'] : $this->get('hateoas.generator.symfony')) && false ?: '_'});
    }

    /**
     * Gets the public 'hateoas.generator.symfony' shared service.
     *
     * @return \Hateoas\UrlGenerator\SymfonyUrlGenerator
     */
    protected function getHateoas_Generator_SymfonyService()
    {
        return $this->services['hateoas.generator.symfony'] = new \Hateoas\UrlGenerator\SymfonyUrlGenerator(${($_ = isset($this->services['router']) ? $this->services['router'] : $this->get('router')) && false ?: '_'});
    }

    /**
     * Gets the public 'hateoas.helper.link' shared service.
     *
     * @return \Hateoas\Helper\LinkHelper
     */
    protected function getHateoas_Helper_LinkService()
    {
        return $this->services['hateoas.helper.link'] = new \Hateoas\Helper\LinkHelper(${($_ = isset($this->services['hateoas.link_factory']) ? $this->services['hateoas.link_factory'] : $this->getHateoas_LinkFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['hateoas.configuration.relations_repository']) ? $this->services['hateoas.configuration.relations_repository'] : $this->getHateoas_Configuration_RelationsRepositoryService()) && false ?: '_'});
    }

    /**
     * Gets the public 'hateoas.serializer.exclusion_manager' shared service.
     *
     * @return \Hateoas\Serializer\ExclusionManager
     */
    protected function getHateoas_Serializer_ExclusionManagerService()
    {
        return $this->services['hateoas.serializer.exclusion_manager'] = new \Hateoas\Serializer\ExclusionManager(${($_ = isset($this->services['hateoas.expression.evaluator']) ? $this->services['hateoas.expression.evaluator'] : $this->get('hateoas.expression.evaluator')) && false ?: '_'});
    }

    /**
     * Gets the public 'hateoas.twig.link' shared service.
     *
     * @return \Hateoas\Twig\Extension\LinkExtension
     */
    protected function getHateoas_Twig_LinkService()
    {
        return $this->services['hateoas.twig.link'] = new \Hateoas\Twig\Extension\LinkExtension(${($_ = isset($this->services['hateoas.helper.link']) ? $this->services['hateoas.helper.link'] : $this->get('hateoas.helper.link')) && false ?: '_'});
    }

    /**
     * Gets the public 'http_kernel' shared service.
     *
     * @return \Symfony\Component\HttpKernel\HttpKernel
     */
    protected function getHttpKernelService()
    {
        return $this->services['http_kernel'] = new \Symfony\Component\HttpKernel\HttpKernel(${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher')) && false ?: '_'}, ${($_ = isset($this->services['debug.controller_resolver']) ? $this->services['debug.controller_resolver'] : $this->get('debug.controller_resolver')) && false ?: '_'}, ${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'}, ${($_ = isset($this->services['debug.argument_resolver']) ? $this->services['debug.argument_resolver'] : $this->get('debug.argument_resolver')) && false ?: '_'});
    }

    /**
     * Gets the public 'ivory_ck_editor.config_manager' shared service.
     *
     * @return \Ivory\CKEditorBundle\Model\ConfigManager
     */
    protected function getIvoryCkEditor_ConfigManagerService()
    {
        $this->services['ivory_ck_editor.config_manager'] = $instance = new \Ivory\CKEditorBundle\Model\ConfigManager();

        $instance->setConfigs(array('default' => array('filebrowserBrowseRoute' => 'admin_sonata_media_media_media_ckeditor_browser', 'filebrowserImageBrowseRoute' => 'admin_sonata_media_media_media_ckeditor_browser', 'filebrowserImageBrowseRouteParameters' => array('provider' => 'sonata.media.provider.image', 'hide_context' => true, 'context' => 'default'), 'filebrowserUploadRoute' => 'admin_sonata_media_media_media_ckeditor_upload', 'filebrowserUploadRouteParameters' => array('provider' => 'sonata.media.provider.file', 'hide_context' => true, 'context' => 'default'), 'filebrowserImageUploadRoute' => 'admin_sonata_media_media_media_ckeditor_upload', 'filebrowserImageUploadRouteParameters' => array('provider' => 'sonata.media.provider.image', 'context' => 'default')), 'news' => array('filebrowserBrowseRoute' => 'admin_sonata_media_media_media_ckeditor_browser', 'filebrowserImageBrowseRoute' => 'admin_sonata_media_media_media_ckeditor_browser', 'filebrowserImageBrowseRouteParameters' => array('provider' => 'sonata.media.provider.image', 'hide_context' => true, 'context' => 'news'), 'filebrowserUploadRoute' => 'admin_sonata_media_media_media_ckeditor_upload', 'filebrowserUploadRouteParameters' => array('provider' => 'sonata.media.provider.file', 'context' => 'news'), 'filebrowserImageUploadRoute' => 'admin_sonata_media_media_media_ckeditor_upload', 'filebrowserImageUploadRouteParameters' => array('provider' => 'sonata.media.provider.image', 'context' => 'news'))));
        $instance->setDefaultConfig('default');

        return $instance;
    }

    /**
     * Gets the public 'ivory_ck_editor.form.type' shared service.
     *
     * @return \Ivory\CKEditorBundle\Form\Type\CKEditorType
     */
    protected function getIvoryCkEditor_Form_TypeService()
    {
        return $this->services['ivory_ck_editor.form.type'] = new \Ivory\CKEditorBundle\Form\Type\CKEditorType(${($_ = isset($this->services['ivory_ck_editor.config_manager']) ? $this->services['ivory_ck_editor.config_manager'] : $this->get('ivory_ck_editor.config_manager')) && false ?: '_'}, ${($_ = isset($this->services['ivory_ck_editor.plugin_manager']) ? $this->services['ivory_ck_editor.plugin_manager'] : $this->get('ivory_ck_editor.plugin_manager')) && false ?: '_'}, ${($_ = isset($this->services['ivory_ck_editor.styles_set_manager']) ? $this->services['ivory_ck_editor.styles_set_manager'] : $this->get('ivory_ck_editor.styles_set_manager')) && false ?: '_'}, ${($_ = isset($this->services['ivory_ck_editor.template_manager']) ? $this->services['ivory_ck_editor.template_manager'] : $this->get('ivory_ck_editor.template_manager')) && false ?: '_'}, ${($_ = isset($this->services['ivory_ck_editor.toolbar_manager']) ? $this->services['ivory_ck_editor.toolbar_manager'] : $this->get('ivory_ck_editor.toolbar_manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'ivory_ck_editor.plugin_manager' shared service.
     *
     * @return \Ivory\CKEditorBundle\Model\PluginManager
     */
    protected function getIvoryCkEditor_PluginManagerService()
    {
        return $this->services['ivory_ck_editor.plugin_manager'] = new \Ivory\CKEditorBundle\Model\PluginManager();
    }

    /**
     * Gets the public 'ivory_ck_editor.renderer' shared service.
     *
     * @return \Ivory\CKEditorBundle\Renderer\CKEditorRenderer
     */
    protected function getIvoryCkEditor_RendererService()
    {
        return $this->services['ivory_ck_editor.renderer'] = new \Ivory\CKEditorBundle\Renderer\CKEditorRenderer($this);
    }

    /**
     * Gets the public 'ivory_ck_editor.renderer.json_builder' shared service.
     *
     * @return \Ivory\JsonBuilder\JsonBuilder
     */
    protected function getIvoryCkEditor_Renderer_JsonBuilderService()
    {
        return $this->services['ivory_ck_editor.renderer.json_builder'] = new \Ivory\JsonBuilder\JsonBuilder(${($_ = isset($this->services['property_accessor']) ? $this->services['property_accessor'] : $this->get('property_accessor', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the public 'ivory_ck_editor.styles_set_manager' shared service.
     *
     * @return \Ivory\CKEditorBundle\Model\StylesSetManager
     */
    protected function getIvoryCkEditor_StylesSetManagerService()
    {
        return $this->services['ivory_ck_editor.styles_set_manager'] = new \Ivory\CKEditorBundle\Model\StylesSetManager();
    }

    /**
     * Gets the public 'ivory_ck_editor.template_manager' shared service.
     *
     * @return \Ivory\CKEditorBundle\Model\TemplateManager
     */
    protected function getIvoryCkEditor_TemplateManagerService()
    {
        return $this->services['ivory_ck_editor.template_manager'] = new \Ivory\CKEditorBundle\Model\TemplateManager();
    }

    /**
     * Gets the public 'ivory_ck_editor.toolbar_manager' shared service.
     *
     * @return \Ivory\CKEditorBundle\Model\ToolbarManager
     */
    protected function getIvoryCkEditor_ToolbarManagerService()
    {
        return $this->services['ivory_ck_editor.toolbar_manager'] = new \Ivory\CKEditorBundle\Model\ToolbarManager();
    }

    /**
     * Gets the public 'ivory_ck_editor.twig_extension' shared service.
     *
     * @return \Ivory\CKEditorBundle\Twig\CKEditorExtension
     */
    protected function getIvoryCkEditor_TwigExtensionService()
    {
        return $this->services['ivory_ck_editor.twig_extension'] = new \Ivory\CKEditorBundle\Twig\CKEditorExtension(${($_ = isset($this->services['ivory_ck_editor.renderer']) ? $this->services['ivory_ck_editor.renderer'] : $this->get('ivory_ck_editor.renderer')) && false ?: '_'});
    }

    /**
     * Gets the public 'jms_aop.interceptor_loader' shared service.
     *
     * @return \JMS\AopBundle\Aop\InterceptorLoader
     */
    protected function getJmsAop_InterceptorLoaderService()
    {
        return $this->services['jms_aop.interceptor_loader'] = new \JMS\AopBundle\Aop\InterceptorLoader($this, array());
    }

    /**
     * Gets the public 'jms_aop.pointcut_container' shared service.
     *
     * @return \JMS\AopBundle\Aop\PointcutContainer
     */
    protected function getJmsAop_PointcutContainerService()
    {
        return $this->services['jms_aop.pointcut_container'] = new \JMS\AopBundle\Aop\PointcutContainer(array('security.access.method_interceptor' => ${($_ = isset($this->services['security.access.pointcut']) ? $this->services['security.access.pointcut'] : $this->get('security.access.pointcut')) && false ?: '_'}));
    }

    /**
     * Gets the public 'jms_serializer' shared service.
     *
     * @return \JMS\Serializer\Serializer
     */
    protected function getJmsSerializerService()
    {
        $a = new \JMS\Serializer\EventDispatcher\LazyEventDispatcher(new \Symfony\Component\DependencyInjection\ServiceLocator(array('hateoas.event_subscriber.json' => function () {
            return ${($_ = isset($this->services['hateoas.event_subscriber.json']) ? $this->services['hateoas.event_subscriber.json'] : $this->get('hateoas.event_subscriber.json')) && false ?: '_'};
        }, 'hateoas.event_subscriber.xml' => function () {
            return ${($_ = isset($this->services['hateoas.event_subscriber.xml']) ? $this->services['hateoas.event_subscriber.xml'] : $this->get('hateoas.event_subscriber.xml')) && false ?: '_'};
        }, 'jms_serializer.doctrine_proxy_subscriber' => function () {
            return ${($_ = isset($this->services['jms_serializer.doctrine_proxy_subscriber']) ? $this->services['jms_serializer.doctrine_proxy_subscriber'] : $this->get('jms_serializer.doctrine_proxy_subscriber')) && false ?: '_'};
        }, 'jms_serializer.stopwatch_subscriber' => function () {
            return ${($_ = isset($this->services['jms_serializer.stopwatch_subscriber']) ? $this->services['jms_serializer.stopwatch_subscriber'] : $this->get('jms_serializer.stopwatch_subscriber')) && false ?: '_'};
        })));
        $a->setListeners(array('serializer.post_serialize' => array(0 => array(0 => array(0 => 'hateoas.event_subscriber.xml', 1 => 'onPostSerialize'), 1 => NULL, 2 => 'xml'), 1 => array(0 => array(0 => 'hateoas.event_subscriber.json', 1 => 'onPostSerialize'), 1 => NULL, 2 => 'json'), 2 => array(0 => array(0 => 'jms_serializer.stopwatch_subscriber', 1 => 'onPostSerialize'), 1 => NULL, 2 => NULL)), 'serializer.pre_serialize' => array(0 => array(0 => array(0 => 'jms_serializer.stopwatch_subscriber', 1 => 'onPreSerialize'), 1 => NULL, 2 => NULL), 1 => array(0 => array(0 => 'jms_serializer.doctrine_proxy_subscriber', 1 => 'onPreSerializeTypedProxy'), 1 => NULL, 2 => NULL), 2 => array(0 => array(0 => 'jms_serializer.doctrine_proxy_subscriber', 1 => 'onPreSerialize'), 1 => NULL, 2 => NULL))));

        $this->services['jms_serializer'] = $instance = new \JMS\Serializer\Serializer(${($_ = isset($this->services['jms_serializer.metadata_factory']) ? $this->services['jms_serializer.metadata_factory'] : $this->getJmsSerializer_MetadataFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['jms_serializer.handler_registry']) ? $this->services['jms_serializer.handler_registry'] : $this->get('jms_serializer.handler_registry')) && false ?: '_'}, ${($_ = isset($this->services['jms_serializer.unserialize_object_constructor']) ? $this->services['jms_serializer.unserialize_object_constructor'] : $this->getJmsSerializer_UnserializeObjectConstructorService()) && false ?: '_'}, new \JMS\DiExtraBundle\DependencyInjection\Collection\LazyServiceMap($this, array('json' => 'jms_serializer.json_serialization_visitor', 'xml' => 'jms_serializer.xml_serialization_visitor', 'yml' => 'jms_serializer.yaml_serialization_visitor')), new \JMS\DiExtraBundle\DependencyInjection\Collection\LazyServiceMap($this, array('json' => 'jms_serializer.json_deserialization_visitor', 'xml' => 'jms_serializer.xml_deserialization_visitor')), $a, NULL, ${($_ = isset($this->services['jms_serializer.expression_evaluator']) ? $this->services['jms_serializer.expression_evaluator'] : $this->get('jms_serializer.expression_evaluator')) && false ?: '_'});

        $instance->setSerializationContextFactory(${($_ = isset($this->services['jms_serializer.serialization_context_factory']) ? $this->services['jms_serializer.serialization_context_factory'] : $this->get('jms_serializer.serialization_context_factory')) && false ?: '_'});
        $instance->setDeserializationContextFactory(${($_ = isset($this->services['jms_serializer.deserialization_context_factory']) ? $this->services['jms_serializer.deserialization_context_factory'] : $this->get('jms_serializer.deserialization_context_factory')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'jms_serializer.accessor_strategy' shared service.
     *
     * @return \JMS\Serializer\Accessor\ExpressionAccessorStrategy
     */
    protected function getJmsSerializer_AccessorStrategyService()
    {
        return $this->services['jms_serializer.accessor_strategy'] = new \JMS\Serializer\Accessor\ExpressionAccessorStrategy(${($_ = isset($this->services['jms_serializer.expression_evaluator']) ? $this->services['jms_serializer.expression_evaluator'] : $this->get('jms_serializer.expression_evaluator')) && false ?: '_'}, new \JMS\Serializer\Accessor\DefaultAccessorStrategy());
    }

    /**
     * Gets the public 'jms_serializer.array_collection_handler' shared service.
     *
     * @return \JMS\Serializer\Handler\ArrayCollectionHandler
     */
    protected function getJmsSerializer_ArrayCollectionHandlerService()
    {
        return $this->services['jms_serializer.array_collection_handler'] = new \JMS\Serializer\Handler\ArrayCollectionHandler(false);
    }

    /**
     * Gets the public 'jms_serializer.constraint_violation_handler' shared service.
     *
     * @return \JMS\Serializer\Handler\ConstraintViolationHandler
     */
    protected function getJmsSerializer_ConstraintViolationHandlerService()
    {
        return $this->services['jms_serializer.constraint_violation_handler'] = new \JMS\Serializer\Handler\ConstraintViolationHandler();
    }

    /**
     * Gets the public 'jms_serializer.datetime_handler' shared service.
     *
     * @return \JMS\Serializer\Handler\DateHandler
     */
    protected function getJmsSerializer_DatetimeHandlerService()
    {
        return $this->services['jms_serializer.datetime_handler'] = new \JMS\Serializer\Handler\DateHandler('Y-m-d\\TH:i:sP', 'Europe/Berlin', true);
    }

    /**
     * Gets the public 'jms_serializer.deserialization_context_factory' shared service.
     *
     * @return \JMS\SerializerBundle\ContextFactory\ConfiguredContextFactory
     */
    protected function getJmsSerializer_DeserializationContextFactoryService()
    {
        return $this->services['jms_serializer.deserialization_context_factory'] = new \JMS\SerializerBundle\ContextFactory\ConfiguredContextFactory();
    }

    /**
     * Gets the public 'jms_serializer.doctrine_proxy_subscriber' shared service.
     *
     * @return \JMS\Serializer\EventDispatcher\Subscriber\DoctrineProxySubscriber
     */
    protected function getJmsSerializer_DoctrineProxySubscriberService()
    {
        return $this->services['jms_serializer.doctrine_proxy_subscriber'] = new \JMS\Serializer\EventDispatcher\Subscriber\DoctrineProxySubscriber(true, false);
    }

    /**
     * Gets the public 'jms_serializer.expression_evaluator' shared service.
     *
     * @return \JMS\Serializer\Expression\ExpressionEvaluator
     */
    protected function getJmsSerializer_ExpressionEvaluatorService()
    {
        $a = new \Symfony\Component\ExpressionLanguage\ExpressionLanguage();
        $a->registerProvider(new \JMS\SerializerBundle\ExpressionLanguage\BasicSerializerFunctionsProvider());

        return $this->services['jms_serializer.expression_evaluator'] = new \JMS\Serializer\Expression\ExpressionEvaluator($a, array('container' => $this));
    }

    /**
     * Gets the public 'jms_serializer.form_error_handler' shared service.
     *
     * @return \FOS\RestBundle\Serializer\Normalizer\FormErrorHandler
     */
    protected function getJmsSerializer_FormErrorHandlerService()
    {
        return $this->services['jms_serializer.form_error_handler'] = new \FOS\RestBundle\Serializer\Normalizer\FormErrorHandler(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, 'validators');
    }

    /**
     * Gets the public 'jms_serializer.handler_registry' shared service.
     *
     * @return \FOS\RestBundle\Serializer\JMSHandlerRegistry
     */
    protected function getJmsSerializer_HandlerRegistryService()
    {
        return $this->services['jms_serializer.handler_registry'] = new \FOS\RestBundle\Serializer\JMSHandlerRegistry(${($_ = isset($this->services['fos_rest.serializer.jms_handler_registry.inner']) ? $this->services['fos_rest.serializer.jms_handler_registry.inner'] : $this->getFosRest_Serializer_JmsHandlerRegistry_InnerService()) && false ?: '_'});
    }

    /**
     * Gets the public 'jms_serializer.json_deserialization_visitor' shared service.
     *
     * @return \JMS\Serializer\JsonDeserializationVisitor
     */
    protected function getJmsSerializer_JsonDeserializationVisitorService()
    {
        return $this->services['jms_serializer.json_deserialization_visitor'] = new \JMS\Serializer\JsonDeserializationVisitor(${($_ = isset($this->services['jms_serializer.naming_strategy']) ? $this->services['jms_serializer.naming_strategy'] : $this->get('jms_serializer.naming_strategy')) && false ?: '_'});
    }

    /**
     * Gets the public 'jms_serializer.json_serialization_visitor' shared service.
     *
     * @return \JMS\Serializer\JsonSerializationVisitor
     */
    protected function getJmsSerializer_JsonSerializationVisitorService()
    {
        $this->services['jms_serializer.json_serialization_visitor'] = $instance = new \JMS\Serializer\JsonSerializationVisitor(${($_ = isset($this->services['jms_serializer.naming_strategy']) ? $this->services['jms_serializer.naming_strategy'] : $this->get('jms_serializer.naming_strategy')) && false ?: '_'}, ${($_ = isset($this->services['jms_serializer.accessor_strategy']) ? $this->services['jms_serializer.accessor_strategy'] : $this->get('jms_serializer.accessor_strategy')) && false ?: '_'});

        $instance->setOptions(0);

        return $instance;
    }

    /**
     * Gets the public 'jms_serializer.metadata_driver' shared service.
     *
     * @return \JMS\Serializer\Metadata\Driver\DoctrineTypeDriver
     */
    protected function getJmsSerializer_MetadataDriverService()
    {
        $a = ${($_ = isset($this->services['jms_serializer.metadata.file_locator']) ? $this->services['jms_serializer.metadata.file_locator'] : $this->getJmsSerializer_Metadata_FileLocatorService()) && false ?: '_'};

        return $this->services['jms_serializer.metadata_driver'] = new \JMS\Serializer\Metadata\Driver\DoctrineTypeDriver(new \Metadata\Driver\DriverChain(array(0 => new \JMS\Serializer\Metadata\Driver\YamlDriver($a), 1 => new \JMS\Serializer\Metadata\Driver\XmlDriver($a), 2 => new \JMS\Serializer\Metadata\Driver\PhpDriver($a), 3 => new \JMS\Serializer\Metadata\Driver\AnnotationDriver(${($_ = isset($this->services['annotation_reader']) ? $this->services['annotation_reader'] : $this->get('annotation_reader')) && false ?: '_'}))), ${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'});
    }

    /**
     * Gets the public 'jms_serializer.naming_strategy' shared service.
     *
     * @return \JMS\Serializer\Naming\CacheNamingStrategy
     */
    protected function getJmsSerializer_NamingStrategyService()
    {
        return $this->services['jms_serializer.naming_strategy'] = new \JMS\Serializer\Naming\CacheNamingStrategy(new \JMS\Serializer\Naming\SerializedNameAnnotationStrategy(new \JMS\Serializer\Naming\CamelCaseNamingStrategy('_', true)));
    }

    /**
     * Gets the public 'jms_serializer.object_constructor' shared service.
     *
     * @return \JMS\Serializer\Construction\DoctrineObjectConstructor
     */
    protected function getJmsSerializer_ObjectConstructorService()
    {
        return $this->services['jms_serializer.object_constructor'] = new \JMS\Serializer\Construction\DoctrineObjectConstructor(${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'}, ${($_ = isset($this->services['jms_serializer.unserialize_object_constructor']) ? $this->services['jms_serializer.unserialize_object_constructor'] : $this->getJmsSerializer_UnserializeObjectConstructorService()) && false ?: '_'}, 'null');
    }

    /**
     * Gets the public 'jms_serializer.php_collection_handler' shared service.
     *
     * @return \JMS\Serializer\Handler\PhpCollectionHandler
     */
    protected function getJmsSerializer_PhpCollectionHandlerService()
    {
        return $this->services['jms_serializer.php_collection_handler'] = new \JMS\Serializer\Handler\PhpCollectionHandler();
    }

    /**
     * Gets the public 'jms_serializer.serialization_context_factory' shared service.
     *
     * @return \JMS\SerializerBundle\ContextFactory\ConfiguredContextFactory
     */
    protected function getJmsSerializer_SerializationContextFactoryService()
    {
        return $this->services['jms_serializer.serialization_context_factory'] = new \JMS\SerializerBundle\ContextFactory\ConfiguredContextFactory();
    }

    /**
     * Gets the public 'jms_serializer.stopwatch_subscriber' shared service.
     *
     * @return \JMS\SerializerBundle\Serializer\StopwatchEventSubscriber
     */
    protected function getJmsSerializer_StopwatchSubscriberService()
    {
        return $this->services['jms_serializer.stopwatch_subscriber'] = new \JMS\SerializerBundle\Serializer\StopwatchEventSubscriber(${($_ = isset($this->services['debug.stopwatch']) ? $this->services['debug.stopwatch'] : $this->get('debug.stopwatch')) && false ?: '_'});
    }

    /**
     * Gets the public 'jms_serializer.templating.helper.serializer' shared service.
     *
     * @return \JMS\SerializerBundle\Templating\SerializerHelper
     */
    protected function getJmsSerializer_Templating_Helper_SerializerService()
    {
        return $this->services['jms_serializer.templating.helper.serializer'] = new \JMS\SerializerBundle\Templating\SerializerHelper(${($_ = isset($this->services['jms_serializer']) ? $this->services['jms_serializer'] : $this->get('jms_serializer')) && false ?: '_'});
    }

    /**
     * Gets the public 'jms_serializer.twig_extension.serializer_runtime_helper' shared service.
     *
     * @return \JMS\Serializer\Twig\SerializerRuntimeHelper
     */
    protected function getJmsSerializer_TwigExtension_SerializerRuntimeHelperService()
    {
        return $this->services['jms_serializer.twig_extension.serializer_runtime_helper'] = new \JMS\Serializer\Twig\SerializerRuntimeHelper(${($_ = isset($this->services['jms_serializer']) ? $this->services['jms_serializer'] : $this->get('jms_serializer')) && false ?: '_'});
    }

    /**
     * Gets the public 'jms_serializer.xml_deserialization_visitor' shared service.
     *
     * @return \JMS\Serializer\XmlDeserializationVisitor
     */
    protected function getJmsSerializer_XmlDeserializationVisitorService()
    {
        $this->services['jms_serializer.xml_deserialization_visitor'] = $instance = new \JMS\Serializer\XmlDeserializationVisitor(${($_ = isset($this->services['jms_serializer.naming_strategy']) ? $this->services['jms_serializer.naming_strategy'] : $this->get('jms_serializer.naming_strategy')) && false ?: '_'});

        $instance->setDoctypeWhitelist(array());

        return $instance;
    }

    /**
     * Gets the public 'jms_serializer.xml_serialization_visitor' shared service.
     *
     * @return \JMS\Serializer\XmlSerializationVisitor
     */
    protected function getJmsSerializer_XmlSerializationVisitorService()
    {
        $this->services['jms_serializer.xml_serialization_visitor'] = $instance = new \JMS\Serializer\XmlSerializationVisitor(${($_ = isset($this->services['jms_serializer.naming_strategy']) ? $this->services['jms_serializer.naming_strategy'] : $this->get('jms_serializer.naming_strategy')) && false ?: '_'}, ${($_ = isset($this->services['jms_serializer.accessor_strategy']) ? $this->services['jms_serializer.accessor_strategy'] : $this->get('jms_serializer.accessor_strategy')) && false ?: '_'});

        $instance->setFormatOutput(true);

        return $instance;
    }

    /**
     * Gets the public 'jms_serializer.yaml_serialization_visitor' shared service.
     *
     * @return \JMS\Serializer\YamlSerializationVisitor
     */
    protected function getJmsSerializer_YamlSerializationVisitorService()
    {
        return $this->services['jms_serializer.yaml_serialization_visitor'] = new \JMS\Serializer\YamlSerializationVisitor(${($_ = isset($this->services['jms_serializer.naming_strategy']) ? $this->services['jms_serializer.naming_strategy'] : $this->get('jms_serializer.naming_strategy')) && false ?: '_'}, ${($_ = isset($this->services['jms_serializer.accessor_strategy']) ? $this->services['jms_serializer.accessor_strategy'] : $this->get('jms_serializer.accessor_strategy')) && false ?: '_'});
    }

    /**
     * Gets the public 'kernel.class_cache.cache_warmer' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\CacheWarmer\ClassCacheCacheWarmer
     *
     * @deprecated The "kernel.class_cache.cache_warmer" option is deprecated since version 3.3, to be removed in 4.0.
     */
    protected function getKernel_ClassCache_CacheWarmerService()
    {
        @trigger_error('The "kernel.class_cache.cache_warmer" option is deprecated since version 3.3, to be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['kernel.class_cache.cache_warmer'] = new \Symfony\Bundle\FrameworkBundle\CacheWarmer\ClassCacheCacheWarmer(array(0 => 'Symfony\\Component\\HttpFoundation\\ParameterBag', 1 => 'Symfony\\Component\\HttpFoundation\\HeaderBag', 2 => 'Symfony\\Component\\HttpFoundation\\FileBag', 3 => 'Symfony\\Component\\HttpFoundation\\ServerBag', 4 => 'Symfony\\Component\\HttpFoundation\\Request', 5 => 'Symfony\\Component\\HttpKernel\\Kernel'));
    }

    /**
     * Gets the public 'knp_gaufrette.filesystem_map' shared service.
     *
     * @return \Knp\Bundle\GaufretteBundle\FilesystemMap
     */
    protected function getKnpGaufrette_FilesystemMapService()
    {
        return $this->services['knp_gaufrette.filesystem_map'] = new \Knp\Bundle\GaufretteBundle\FilesystemMap(array());
    }

    /**
     * Gets the public 'knp_menu.factory' shared service.
     *
     * @return \Knp\Menu\MenuFactory
     */
    protected function getKnpMenu_FactoryService()
    {
        $this->services['knp_menu.factory'] = $instance = new \Knp\Menu\MenuFactory();

        $instance->addExtension(new \Knp\Menu\Integration\Symfony\RoutingExtension(${($_ = isset($this->services['router']) ? $this->services['router'] : $this->get('router')) && false ?: '_'}), 0);

        return $instance;
    }

    /**
     * Gets the public 'knp_menu.matcher' shared service.
     *
     * @return \Knp\Menu\Matcher\Matcher
     */
    protected function getKnpMenu_MatcherService()
    {
        return $this->services['knp_menu.matcher'] = new \Knp\Menu\Matcher\Matcher(new RewindableGenerator(function () {
            yield 0 => ${($_ = isset($this->services['knp_menu.voter.router']) ? $this->services['knp_menu.voter.router'] : $this->get('knp_menu.voter.router')) && false ?: '_'};
            yield 1 => ${($_ = isset($this->services['sonata.admin.menu.matcher.voter.admin']) ? $this->services['sonata.admin.menu.matcher.voter.admin'] : $this->get('sonata.admin.menu.matcher.voter.admin')) && false ?: '_'};
            yield 2 => ${($_ = isset($this->services['sonata.admin.menu.matcher.voter.active']) ? $this->services['sonata.admin.menu.matcher.voter.active'] : $this->get('sonata.admin.menu.matcher.voter.active')) && false ?: '_'};
        }, 3));
    }

    /**
     * Gets the public 'knp_menu.menu_provider' shared service.
     *
     * @return \Knp\Menu\Provider\ChainProvider
     */
    protected function getKnpMenu_MenuProviderService()
    {
        return $this->services['knp_menu.menu_provider'] = new \Knp\Menu\Provider\ChainProvider(new RewindableGenerator(function () {
            yield 0 => ${($_ = isset($this->services['knp_menu.menu_provider.lazy']) ? $this->services['knp_menu.menu_provider.lazy'] : $this->getKnpMenu_MenuProvider_LazyService()) && false ?: '_'};
            yield 1 => ${($_ = isset($this->services['knp_menu.menu_provider.builder_alias']) ? $this->services['knp_menu.menu_provider.builder_alias'] : $this->getKnpMenu_MenuProvider_BuilderAliasService()) && false ?: '_'};
            yield 2 => ${($_ = isset($this->services['sonata.admin.menu.group_provider']) ? $this->services['sonata.admin.menu.group_provider'] : $this->getSonata_Admin_Menu_GroupProviderService()) && false ?: '_'};
        }, 3));
    }

    /**
     * Gets the public 'knp_menu.renderer.list' shared service.
     *
     * @return \Knp\Menu\Renderer\ListRenderer
     */
    protected function getKnpMenu_Renderer_ListService()
    {
        return $this->services['knp_menu.renderer.list'] = new \Knp\Menu\Renderer\ListRenderer(${($_ = isset($this->services['knp_menu.matcher']) ? $this->services['knp_menu.matcher'] : $this->get('knp_menu.matcher')) && false ?: '_'}, array(), 'UTF-8');
    }

    /**
     * Gets the public 'knp_menu.renderer.twig' shared service.
     *
     * @return \Knp\Menu\Renderer\TwigRenderer
     */
    protected function getKnpMenu_Renderer_TwigService()
    {
        return $this->services['knp_menu.renderer.twig'] = new \Knp\Menu\Renderer\TwigRenderer(${($_ = isset($this->services['twig']) ? $this->services['twig'] : $this->get('twig')) && false ?: '_'}, '@KnpMenu/menu.html.twig', ${($_ = isset($this->services['knp_menu.matcher']) ? $this->services['knp_menu.matcher'] : $this->get('knp_menu.matcher')) && false ?: '_'}, array());
    }

    /**
     * Gets the public 'knp_menu.renderer_provider' shared service.
     *
     * @return \Knp\Menu\Renderer\PsrProvider
     */
    protected function getKnpMenu_RendererProviderService()
    {
        return $this->services['knp_menu.renderer_provider'] = new \Knp\Menu\Renderer\PsrProvider(new \Symfony\Component\DependencyInjection\ServiceLocator(array('list' => function () {
            return ${($_ = isset($this->services['knp_menu.renderer.list']) ? $this->services['knp_menu.renderer.list'] : $this->get('knp_menu.renderer.list')) && false ?: '_'};
        }, 'twig' => function () {
            return ${($_ = isset($this->services['knp_menu.renderer.twig']) ? $this->services['knp_menu.renderer.twig'] : $this->get('knp_menu.renderer.twig')) && false ?: '_'};
        })), 'twig');
    }

    /**
     * Gets the public 'knp_menu.voter.router' shared service.
     *
     * @return \Knp\Menu\Matcher\Voter\RouteVoter
     */
    protected function getKnpMenu_Voter_RouterService()
    {
        return $this->services['knp_menu.voter.router'] = new \Knp\Menu\Matcher\Voter\RouteVoter(${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'});
    }

    /**
     * Gets the public 'knp_paginator' shared service.
     *
     * @return \Knp\Component\Pager\Paginator
     */
    public function getKnpPaginatorService($lazyLoad = true)
    {
        if ($lazyLoad) {

            return $this->services['knp_paginator'] = KnpComponentPagerPaginator_000000006d9c1c0b000000004dc181e407c393e08643067c07eb5044e3591135::staticProxyConstructor(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) {
                    $wrappedInstance = $this->getKnpPaginatorService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        $instance = new \Knp\Component\Pager\Paginator(${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher')) && false ?: '_'});

        $instance->setDefaultPaginatorOptions(array('pageParameterName' => 'page', 'sortFieldParameterName' => 'sort', 'sortDirectionParameterName' => 'direction', 'filterFieldParameterName' => 'filterField', 'filterValueParameterName' => 'filterValue', 'distinct' => true));

        return $instance;
    }

    /**
     * Gets the public 'knp_paginator.helper.processor' shared service.
     *
     * @return \Knp\Bundle\PaginatorBundle\Helper\Processor
     */
    protected function getKnpPaginator_Helper_ProcessorService()
    {
        return $this->services['knp_paginator.helper.processor'] = new \Knp\Bundle\PaginatorBundle\Helper\Processor(${($_ = isset($this->services['router']) ? $this->services['router'] : $this->get('router')) && false ?: '_'}, ${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'});
    }

    /**
     * Gets the public 'knp_paginator.subscriber.filtration' shared service.
     *
     * @return \Knp\Component\Pager\Event\Subscriber\Filtration\FiltrationSubscriber
     */
    protected function getKnpPaginator_Subscriber_FiltrationService()
    {
        return $this->services['knp_paginator.subscriber.filtration'] = new \Knp\Component\Pager\Event\Subscriber\Filtration\FiltrationSubscriber();
    }

    /**
     * Gets the public 'knp_paginator.subscriber.paginate' shared service.
     *
     * @return \Knp\Component\Pager\Event\Subscriber\Paginate\PaginationSubscriber
     */
    protected function getKnpPaginator_Subscriber_PaginateService()
    {
        return $this->services['knp_paginator.subscriber.paginate'] = new \Knp\Component\Pager\Event\Subscriber\Paginate\PaginationSubscriber();
    }

    /**
     * Gets the public 'knp_paginator.subscriber.sliding_pagination' shared service.
     *
     * @return \Knp\Bundle\PaginatorBundle\Subscriber\SlidingPaginationSubscriber
     */
    protected function getKnpPaginator_Subscriber_SlidingPaginationService()
    {
        return $this->services['knp_paginator.subscriber.sliding_pagination'] = new \Knp\Bundle\PaginatorBundle\Subscriber\SlidingPaginationSubscriber(array('defaultPaginationTemplate' => 'MopaBootstrapBundle:Pagination:sliding.html.twig', 'defaultSortableTemplate' => '@KnpPaginator/Pagination/sortable_link.html.twig', 'defaultFiltrationTemplate' => '@KnpPaginator/Pagination/filtration.html.twig', 'defaultPageRange' => 5));
    }

    /**
     * Gets the public 'knp_paginator.subscriber.sortable' shared service.
     *
     * @return \Knp\Component\Pager\Event\Subscriber\Sortable\SortableSubscriber
     */
    protected function getKnpPaginator_Subscriber_SortableService()
    {
        return $this->services['knp_paginator.subscriber.sortable'] = new \Knp\Component\Pager\Event\Subscriber\Sortable\SortableSubscriber();
    }

    /**
     * Gets the public 'knp_paginator.twig.extension.pagination' shared service.
     *
     * @return \Knp\Bundle\PaginatorBundle\Twig\Extension\PaginationExtension
     */
    protected function getKnpPaginator_Twig_Extension_PaginationService()
    {
        return $this->services['knp_paginator.twig.extension.pagination'] = new \Knp\Bundle\PaginatorBundle\Twig\Extension\PaginationExtension(${($_ = isset($this->services['knp_paginator.helper.processor']) ? $this->services['knp_paginator.helper.processor'] : $this->get('knp_paginator.helper.processor')) && false ?: '_'});
    }

    /**
     * Gets the public 'lexik_form_filter.apply_filter.doctrine_orm' shared service.
     *
     * @return \Lexik\Bundle\FormFilterBundle\Event\Listener\DoctrineApplyFilterListener
     */
    protected function getLexikFormFilter_ApplyFilter_DoctrineOrmService()
    {
        return $this->services['lexik_form_filter.apply_filter.doctrine_orm'] = new \Lexik\Bundle\FormFilterBundle\Event\Listener\DoctrineApplyFilterListener('and');
    }

    /**
     * Gets the public 'lexik_form_filter.data_extraction_method.default' shared service.
     *
     * @return \Lexik\Bundle\FormFilterBundle\Filter\DataExtractor\Method\DefaultExtractionMethod
     */
    protected function getLexikFormFilter_DataExtractionMethod_DefaultService()
    {
        return $this->services['lexik_form_filter.data_extraction_method.default'] = new \Lexik\Bundle\FormFilterBundle\Filter\DataExtractor\Method\DefaultExtractionMethod();
    }

    /**
     * Gets the public 'lexik_form_filter.data_extraction_method.key_values' shared service.
     *
     * @return \Lexik\Bundle\FormFilterBundle\Filter\DataExtractor\Method\ValueKeysExtractionMethod
     */
    protected function getLexikFormFilter_DataExtractionMethod_KeyValuesService()
    {
        return $this->services['lexik_form_filter.data_extraction_method.key_values'] = new \Lexik\Bundle\FormFilterBundle\Filter\DataExtractor\Method\ValueKeysExtractionMethod();
    }

    /**
     * Gets the public 'lexik_form_filter.data_extraction_method.text' shared service.
     *
     * @return \Lexik\Bundle\FormFilterBundle\Filter\DataExtractor\Method\TextExtractionMethod
     */
    protected function getLexikFormFilter_DataExtractionMethod_TextService()
    {
        return $this->services['lexik_form_filter.data_extraction_method.text'] = new \Lexik\Bundle\FormFilterBundle\Filter\DataExtractor\Method\TextExtractionMethod();
    }

    /**
     * Gets the public 'lexik_form_filter.filter_prepare' shared service.
     *
     * @return \Lexik\Bundle\FormFilterBundle\Event\Listener\PrepareListener
     */
    protected function getLexikFormFilter_FilterPrepareService()
    {
        return $this->services['lexik_form_filter.filter_prepare'] = new \Lexik\Bundle\FormFilterBundle\Event\Listener\PrepareListener();
    }

    /**
     * Gets the public 'lexik_form_filter.form_data_extractor' shared service.
     *
     * @return \Lexik\Bundle\FormFilterBundle\Filter\DataExtractor\FormDataExtractor
     */
    protected function getLexikFormFilter_FormDataExtractorService()
    {
        $this->services['lexik_form_filter.form_data_extractor'] = $instance = new \Lexik\Bundle\FormFilterBundle\Filter\DataExtractor\FormDataExtractor();

        $instance->addMethod(${($_ = isset($this->services['lexik_form_filter.data_extraction_method.default']) ? $this->services['lexik_form_filter.data_extraction_method.default'] : $this->get('lexik_form_filter.data_extraction_method.default')) && false ?: '_'});
        $instance->addMethod(${($_ = isset($this->services['lexik_form_filter.data_extraction_method.text']) ? $this->services['lexik_form_filter.data_extraction_method.text'] : $this->get('lexik_form_filter.data_extraction_method.text')) && false ?: '_'});
        $instance->addMethod(${($_ = isset($this->services['lexik_form_filter.data_extraction_method.key_values']) ? $this->services['lexik_form_filter.data_extraction_method.key_values'] : $this->get('lexik_form_filter.data_extraction_method.key_values')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'lexik_form_filter.get_filter.doctrine_orm' shared service.
     *
     * @return \Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber
     */
    protected function getLexikFormFilter_GetFilter_DoctrineOrmService()
    {
        return $this->services['lexik_form_filter.get_filter.doctrine_orm'] = new \Lexik\Bundle\FormFilterBundle\Event\Subscriber\DoctrineORMSubscriber();
    }

    /**
     * Gets the public 'lexik_form_filter.query_builder_updater' shared service.
     *
     * @return \Lexik\Bundle\FormFilterBundle\Filter\FilterBuilderUpdater
     */
    protected function getLexikFormFilter_QueryBuilderUpdaterService()
    {
        return $this->services['lexik_form_filter.query_builder_updater'] = new \Lexik\Bundle\FormFilterBundle\Filter\FilterBuilderUpdater(${($_ = isset($this->services['lexik_form_filter.form_data_extractor']) ? $this->services['lexik_form_filter.form_data_extractor'] : $this->get('lexik_form_filter.form_data_extractor')) && false ?: '_'}, ${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher')) && false ?: '_'});
    }

    /**
     * Gets the public 'lexik_form_filter.type.filter_boolean' shared service.
     *
     * @return \Lexik\Bundle\FormFilterBundle\Filter\Form\Type\BooleanFilterType
     */
    protected function getLexikFormFilter_Type_FilterBooleanService()
    {
        return $this->services['lexik_form_filter.type.filter_boolean'] = new \Lexik\Bundle\FormFilterBundle\Filter\Form\Type\BooleanFilterType();
    }

    /**
     * Gets the public 'lexik_form_filter.type.filter_checkbox' shared service.
     *
     * @return \Lexik\Bundle\FormFilterBundle\Filter\Form\Type\CheckboxFilterType
     */
    protected function getLexikFormFilter_Type_FilterCheckboxService()
    {
        return $this->services['lexik_form_filter.type.filter_checkbox'] = new \Lexik\Bundle\FormFilterBundle\Filter\Form\Type\CheckboxFilterType();
    }

    /**
     * Gets the public 'lexik_form_filter.type.filter_choice' shared service.
     *
     * @return \Lexik\Bundle\FormFilterBundle\Filter\Form\Type\ChoiceFilterType
     */
    protected function getLexikFormFilter_Type_FilterChoiceService()
    {
        return $this->services['lexik_form_filter.type.filter_choice'] = new \Lexik\Bundle\FormFilterBundle\Filter\Form\Type\ChoiceFilterType();
    }

    /**
     * Gets the public 'lexik_form_filter.type.filter_collection_adapter' shared service.
     *
     * @return \Lexik\Bundle\FormFilterBundle\Filter\Form\Type\CollectionAdapterFilterType
     */
    protected function getLexikFormFilter_Type_FilterCollectionAdapterService()
    {
        return $this->services['lexik_form_filter.type.filter_collection_adapter'] = new \Lexik\Bundle\FormFilterBundle\Filter\Form\Type\CollectionAdapterFilterType();
    }

    /**
     * Gets the public 'lexik_form_filter.type.filter_date' shared service.
     *
     * @return \Lexik\Bundle\FormFilterBundle\Filter\Form\Type\DateFilterType
     */
    protected function getLexikFormFilter_Type_FilterDateService()
    {
        return $this->services['lexik_form_filter.type.filter_date'] = new \Lexik\Bundle\FormFilterBundle\Filter\Form\Type\DateFilterType();
    }

    /**
     * Gets the public 'lexik_form_filter.type.filter_date_range' shared service.
     *
     * @return \Lexik\Bundle\FormFilterBundle\Filter\Form\Type\DateRangeFilterType
     */
    protected function getLexikFormFilter_Type_FilterDateRangeService()
    {
        return $this->services['lexik_form_filter.type.filter_date_range'] = new \Lexik\Bundle\FormFilterBundle\Filter\Form\Type\DateRangeFilterType();
    }

    /**
     * Gets the public 'lexik_form_filter.type.filter_datetime' shared service.
     *
     * @return \Lexik\Bundle\FormFilterBundle\Filter\Form\Type\DateTimeFilterType
     */
    protected function getLexikFormFilter_Type_FilterDatetimeService()
    {
        return $this->services['lexik_form_filter.type.filter_datetime'] = new \Lexik\Bundle\FormFilterBundle\Filter\Form\Type\DateTimeFilterType();
    }

    /**
     * Gets the public 'lexik_form_filter.type.filter_datetime_range' shared service.
     *
     * @return \Lexik\Bundle\FormFilterBundle\Filter\Form\Type\DateTimeRangeFilterType
     */
    protected function getLexikFormFilter_Type_FilterDatetimeRangeService()
    {
        return $this->services['lexik_form_filter.type.filter_datetime_range'] = new \Lexik\Bundle\FormFilterBundle\Filter\Form\Type\DateTimeRangeFilterType();
    }

    /**
     * Gets the public 'lexik_form_filter.type.filter_entity' shared service.
     *
     * @return \Lexik\Bundle\FormFilterBundle\Filter\Form\Type\EntityFilterType
     */
    protected function getLexikFormFilter_Type_FilterEntityService()
    {
        return $this->services['lexik_form_filter.type.filter_entity'] = new \Lexik\Bundle\FormFilterBundle\Filter\Form\Type\EntityFilterType(${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'});
    }

    /**
     * Gets the public 'lexik_form_filter.type.filter_number' shared service.
     *
     * @return \Lexik\Bundle\FormFilterBundle\Filter\Form\Type\NumberFilterType
     */
    protected function getLexikFormFilter_Type_FilterNumberService()
    {
        return $this->services['lexik_form_filter.type.filter_number'] = new \Lexik\Bundle\FormFilterBundle\Filter\Form\Type\NumberFilterType();
    }

    /**
     * Gets the public 'lexik_form_filter.type.filter_number_range' shared service.
     *
     * @return \Lexik\Bundle\FormFilterBundle\Filter\Form\Type\NumberRangeFilterType
     */
    protected function getLexikFormFilter_Type_FilterNumberRangeService()
    {
        return $this->services['lexik_form_filter.type.filter_number_range'] = new \Lexik\Bundle\FormFilterBundle\Filter\Form\Type\NumberRangeFilterType();
    }

    /**
     * Gets the public 'lexik_form_filter.type.filter_sharedable' shared service.
     *
     * @return \Lexik\Bundle\FormFilterBundle\Filter\Form\Type\SharedableFilterType
     */
    protected function getLexikFormFilter_Type_FilterSharedableService()
    {
        return $this->services['lexik_form_filter.type.filter_sharedable'] = new \Lexik\Bundle\FormFilterBundle\Filter\Form\Type\SharedableFilterType();
    }

    /**
     * Gets the public 'lexik_form_filter.type.filter_text' shared service.
     *
     * @return \Lexik\Bundle\FormFilterBundle\Filter\Form\Type\TextFilterType
     */
    protected function getLexikFormFilter_Type_FilterTextService()
    {
        return $this->services['lexik_form_filter.type.filter_text'] = new \Lexik\Bundle\FormFilterBundle\Filter\Form\Type\TextFilterType(1);
    }

    /**
     * Gets the public 'lexik_form_filter.type_extension.filter_extension' shared service.
     *
     * @return \Lexik\Bundle\FormFilterBundle\Filter\Form\FilterTypeExtension
     */
    protected function getLexikFormFilter_TypeExtension_FilterExtensionService()
    {
        return $this->services['lexik_form_filter.type_extension.filter_extension'] = new \Lexik\Bundle\FormFilterBundle\Filter\Form\FilterTypeExtension();
    }

    /**
     * Gets the public 'lexik_jwt_authentication.check_config_command' shared service.
     *
     * @return \Lexik\Bundle\JWTAuthenticationBundle\Command\CheckConfigCommand
     */
    protected function getLexikJwtAuthentication_CheckConfigCommandService()
    {
        return $this->services['lexik_jwt_authentication.check_config_command'] = new \Lexik\Bundle\JWTAuthenticationBundle\Command\CheckConfigCommand();
    }

    /**
     * Gets the public 'lexik_jwt_authentication.encoder.default' shared service.
     *
     * @return \Lexik\Bundle\JWTAuthenticationBundle\Encoder\DefaultEncoder
     */
    protected function getLexikJwtAuthentication_Encoder_DefaultService()
    {
        return $this->services['lexik_jwt_authentication.encoder.default'] = new \Lexik\Bundle\JWTAuthenticationBundle\Encoder\DefaultEncoder(${($_ = isset($this->services['Lexik\Bundle\JWTAuthenticationBundle\Services\JWSProvider\JWSProviderInterface']) ? $this->services['Lexik\Bundle\JWTAuthenticationBundle\Services\JWSProvider\JWSProviderInterface'] : $this->get('Lexik\Bundle\JWTAuthenticationBundle\Services\JWSProvider\JWSProviderInterface')) && false ?: '_'});
    }

    /**
     * Gets the public 'lexik_jwt_authentication.extractor.authorization_header_extractor' shared service.
     *
     * @return \Lexik\Bundle\JWTAuthenticationBundle\TokenExtractor\AuthorizationHeaderTokenExtractor
     */
    protected function getLexikJwtAuthentication_Extractor_AuthorizationHeaderExtractorService()
    {
        return $this->services['lexik_jwt_authentication.extractor.authorization_header_extractor'] = new \Lexik\Bundle\JWTAuthenticationBundle\TokenExtractor\AuthorizationHeaderTokenExtractor('Bearer', 'Authorization');
    }

    /**
     * Gets the public 'lexik_jwt_authentication.extractor.authorization_header_extractor.api' shared service.
     *
     * @return \Lexik\Bundle\JWTAuthenticationBundle\TokenExtractor\AuthorizationHeaderTokenExtractor
     */
    protected function getLexikJwtAuthentication_Extractor_AuthorizationHeaderExtractor_ApiService()
    {
        return $this->services['lexik_jwt_authentication.extractor.authorization_header_extractor.api'] = new \Lexik\Bundle\JWTAuthenticationBundle\TokenExtractor\AuthorizationHeaderTokenExtractor('Bearer', 'Authorization');
    }

    /**
     * Gets the public 'lexik_jwt_authentication.extractor.cookie_extractor' shared service.
     *
     * @return \Lexik\Bundle\JWTAuthenticationBundle\TokenExtractor\CookieTokenExtractor
     */
    protected function getLexikJwtAuthentication_Extractor_CookieExtractorService()
    {
        return $this->services['lexik_jwt_authentication.extractor.cookie_extractor'] = new \Lexik\Bundle\JWTAuthenticationBundle\TokenExtractor\CookieTokenExtractor('');
    }

    /**
     * Gets the public 'lexik_jwt_authentication.extractor.query_parameter_extractor' shared service.
     *
     * @return \Lexik\Bundle\JWTAuthenticationBundle\TokenExtractor\QueryParameterTokenExtractor
     */
    protected function getLexikJwtAuthentication_Extractor_QueryParameterExtractorService()
    {
        return $this->services['lexik_jwt_authentication.extractor.query_parameter_extractor'] = new \Lexik\Bundle\JWTAuthenticationBundle\TokenExtractor\QueryParameterTokenExtractor('');
    }

    /**
     * Gets the public 'lexik_jwt_authentication.handler.authentication_failure' shared service.
     *
     * @return \Lexik\Bundle\JWTAuthenticationBundle\Security\Http\Authentication\AuthenticationFailureHandler
     */
    protected function getLexikJwtAuthentication_Handler_AuthenticationFailureService()
    {
        return $this->services['lexik_jwt_authentication.handler.authentication_failure'] = new \Lexik\Bundle\JWTAuthenticationBundle\Security\Http\Authentication\AuthenticationFailureHandler(${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher')) && false ?: '_'});
    }

    /**
     * Gets the public 'lexik_jwt_authentication.handler.authentication_success' shared service.
     *
     * @return \Lexik\Bundle\JWTAuthenticationBundle\Security\Http\Authentication\AuthenticationSuccessHandler
     */
    protected function getLexikJwtAuthentication_Handler_AuthenticationSuccessService()
    {
        return $this->services['lexik_jwt_authentication.handler.authentication_success'] = new \Lexik\Bundle\JWTAuthenticationBundle\Security\Http\Authentication\AuthenticationSuccessHandler(${($_ = isset($this->services['lexik_jwt_authentication.jwt_manager']) ? $this->services['lexik_jwt_authentication.jwt_manager'] : $this->get('lexik_jwt_authentication.jwt_manager')) && false ?: '_'}, ${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher')) && false ?: '_'});
    }

    /**
     * Gets the public 'lexik_jwt_authentication.jwt_manager' shared service.
     *
     * @return \Lexik\Bundle\JWTAuthenticationBundle\Services\JWTManager
     */
    protected function getLexikJwtAuthentication_JwtManagerService()
    {
        $this->services['lexik_jwt_authentication.jwt_manager'] = $instance = new \Lexik\Bundle\JWTAuthenticationBundle\Services\JWTManager(${($_ = isset($this->services['lexik_jwt_authentication.encoder.default']) ? $this->services['lexik_jwt_authentication.encoder.default'] : $this->get('lexik_jwt_authentication.encoder.default')) && false ?: '_'}, ${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher')) && false ?: '_'});

        $instance->setUserIdentityField('username');

        return $instance;
    }

    /**
     * Gets the public 'lexik_jwt_authentication.key_loader' shared service.
     *
     * @return \Lexik\Bundle\JWTAuthenticationBundle\Services\KeyLoader\OpenSSLKeyLoader
     */
    protected function getLexikJwtAuthentication_KeyLoaderService()
    {
        return $this->services['lexik_jwt_authentication.key_loader'] = new \Lexik\Bundle\JWTAuthenticationBundle\Services\KeyLoader\OpenSSLKeyLoader(($this->targetDirs[3].'\\app/../app/config/jwt/server.key'), ($this->targetDirs[3].'\\app/../app/config/jwt/server.crt'), '1234');
    }

    /**
     * Gets the public 'lexik_jwt_authentication.security.guard.jwt_token_authenticator' shared service.
     *
     * @return \Lexik\Bundle\JWTAuthenticationBundle\Security\Guard\JWTTokenAuthenticator
     */
    protected function getLexikJwtAuthentication_Security_Guard_JwtTokenAuthenticatorService()
    {
        return $this->services['lexik_jwt_authentication.security.guard.jwt_token_authenticator'] = new \Lexik\Bundle\JWTAuthenticationBundle\Security\Guard\JWTTokenAuthenticator(${($_ = isset($this->services['lexik_jwt_authentication.jwt_manager']) ? $this->services['lexik_jwt_authentication.jwt_manager'] : $this->get('lexik_jwt_authentication.jwt_manager')) && false ?: '_'}, ${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher')) && false ?: '_'}, ${($_ = isset($this->services['Lexik\Bundle\JWTAuthenticationBundle\TokenExtractor\TokenExtractorInterface']) ? $this->services['Lexik\Bundle\JWTAuthenticationBundle\TokenExtractor\TokenExtractorInterface'] : $this->get('Lexik\Bundle\JWTAuthenticationBundle\TokenExtractor\TokenExtractorInterface')) && false ?: '_'});
    }

    /**
     * Gets the public 'liip_imagine' shared service.
     *
     * @return \Imagine\Gd\Imagine
     */
    protected function getLiipImagineService()
    {
        $this->services['liip_imagine'] = $instance = new \Imagine\Gd\Imagine();

        $instance->setMetadataReader(new \Imagine\Image\Metadata\ExifMetadataReader());

        return $instance;
    }

    /**
     * Gets the public 'liip_imagine.binary.loader.default' shared service.
     *
     * @return \Liip\ImagineBundle\Binary\Loader\FileSystemLoader
     */
    protected function getLiipImagine_Binary_Loader_DefaultService()
    {
        return $this->services['liip_imagine.binary.loader.default'] = new \Liip\ImagineBundle\Binary\Loader\FileSystemLoader(${($_ = isset($this->services['liip_imagine.mime_type_guesser']) ? $this->services['liip_imagine.mime_type_guesser'] : $this->get('liip_imagine.mime_type_guesser')) && false ?: '_'}, ${($_ = isset($this->services['liip_imagine.extension_guesser']) ? $this->services['liip_imagine.extension_guesser'] : $this->get('liip_imagine.extension_guesser')) && false ?: '_'}, new \Liip\ImagineBundle\Binary\Locator\FileSystemLocator(array(0 => ($this->targetDirs[3].'\\app/../web'))), '');
    }

    /**
     * Gets the public 'liip_imagine.binary.loader.prototype.filesystem' shared service.
     *
     * @return \Liip\ImagineBundle\Binary\Loader\FileSystemLoader
     */
    protected function getLiipImagine_Binary_Loader_Prototype_FilesystemService()
    {
        return $this->services['liip_imagine.binary.loader.prototype.filesystem'] = new \Liip\ImagineBundle\Binary\Loader\FileSystemLoader(${($_ = isset($this->services['liip_imagine.mime_type_guesser']) ? $this->services['liip_imagine.mime_type_guesser'] : $this->get('liip_imagine.mime_type_guesser')) && false ?: '_'}, ${($_ = isset($this->services['liip_imagine.extension_guesser']) ? $this->services['liip_imagine.extension_guesser'] : $this->get('liip_imagine.extension_guesser')) && false ?: '_'}, '', '');
    }

    /**
     * Gets the public 'liip_imagine.binary.loader.prototype.stream' shared service.
     *
     * @return \Liip\ImagineBundle\Binary\Loader\StreamLoader
     */
    protected function getLiipImagine_Binary_Loader_Prototype_StreamService()
    {
        return $this->services['liip_imagine.binary.loader.prototype.stream'] = new \Liip\ImagineBundle\Binary\Loader\StreamLoader('', '');
    }

    /**
     * Gets the public 'liip_imagine.binary.mime_type_guesser' shared service.
     *
     * @return \Liip\ImagineBundle\Binary\SimpleMimeTypeGuesser
     */
    protected function getLiipImagine_Binary_MimeTypeGuesserService()
    {
        return $this->services['liip_imagine.binary.mime_type_guesser'] = new \Liip\ImagineBundle\Binary\SimpleMimeTypeGuesser(${($_ = isset($this->services['liip_imagine.mime_type_guesser']) ? $this->services['liip_imagine.mime_type_guesser'] : $this->get('liip_imagine.mime_type_guesser')) && false ?: '_'});
    }

    /**
     * Gets the public 'liip_imagine.cache.manager' shared service.
     *
     * @return \Liip\ImagineBundle\Imagine\Cache\CacheManager
     */
    protected function getLiipImagine_Cache_ManagerService()
    {
        $this->services['liip_imagine.cache.manager'] = $instance = new \Liip\ImagineBundle\Imagine\Cache\CacheManager(${($_ = isset($this->services['liip_imagine.filter.configuration']) ? $this->services['liip_imagine.filter.configuration'] : $this->get('liip_imagine.filter.configuration')) && false ?: '_'}, ${($_ = isset($this->services['router']) ? $this->services['router'] : $this->get('router')) && false ?: '_'}, ${($_ = isset($this->services['liip_imagine.cache.signer']) ? $this->services['liip_imagine.cache.signer'] : $this->get('liip_imagine.cache.signer')) && false ?: '_'}, ${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher')) && false ?: '_'}, 'web_path');

        $instance->addResolver('default', ${($_ = isset($this->services['liip_imagine.cache.resolver.default']) ? $this->services['liip_imagine.cache.resolver.default'] : $this->get('liip_imagine.cache.resolver.default')) && false ?: '_'});
        $instance->addResolver('no_cache', ${($_ = isset($this->services['liip_imagine.cache.resolver.no_cache_web_path']) ? $this->services['liip_imagine.cache.resolver.no_cache_web_path'] : $this->get('liip_imagine.cache.resolver.no_cache_web_path')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'liip_imagine.cache.resolver.default' shared service.
     *
     * @return \Liip\ImagineBundle\Imagine\Cache\Resolver\WebPathResolver
     */
    protected function getLiipImagine_Cache_Resolver_DefaultService()
    {
        return $this->services['liip_imagine.cache.resolver.default'] = new \Liip\ImagineBundle\Imagine\Cache\Resolver\WebPathResolver(${($_ = isset($this->services['filesystem']) ? $this->services['filesystem'] : $this->get('filesystem')) && false ?: '_'}, ${($_ = isset($this->services['router.request_context']) ? $this->services['router.request_context'] : $this->getRouter_RequestContextService()) && false ?: '_'}, ($this->targetDirs[3].'\\app/../web'), 'media/cache');
    }

    /**
     * Gets the public 'liip_imagine.cache.resolver.no_cache_web_path' shared service.
     *
     * @return \Liip\ImagineBundle\Imagine\Cache\Resolver\NoCacheWebPathResolver
     */
    protected function getLiipImagine_Cache_Resolver_NoCacheWebPathService()
    {
        return $this->services['liip_imagine.cache.resolver.no_cache_web_path'] = new \Liip\ImagineBundle\Imagine\Cache\Resolver\NoCacheWebPathResolver(${($_ = isset($this->services['router.request_context']) ? $this->services['router.request_context'] : $this->getRouter_RequestContextService()) && false ?: '_'});
    }

    /**
     * Gets the public 'liip_imagine.cache.signer' shared service.
     *
     * @return \Liip\ImagineBundle\Imagine\Cache\Signer
     */
    protected function getLiipImagine_Cache_SignerService()
    {
        return $this->services['liip_imagine.cache.signer'] = new \Liip\ImagineBundle\Imagine\Cache\Signer('692cd6b4574faf02145126fe2f31c3fdbf88a5fc');
    }

    /**
     * Gets the public 'liip_imagine.controller' shared service.
     *
     * @return \Liip\ImagineBundle\Controller\ImagineController
     */
    protected function getLiipImagine_ControllerService()
    {
        return $this->services['liip_imagine.controller'] = new \Liip\ImagineBundle\Controller\ImagineController(${($_ = isset($this->services['liip_imagine.data.manager']) ? $this->services['liip_imagine.data.manager'] : $this->get('liip_imagine.data.manager')) && false ?: '_'}, ${($_ = isset($this->services['liip_imagine.filter.manager']) ? $this->services['liip_imagine.filter.manager'] : $this->get('liip_imagine.filter.manager')) && false ?: '_'}, ${($_ = isset($this->services['liip_imagine.cache.manager']) ? $this->services['liip_imagine.cache.manager'] : $this->get('liip_imagine.cache.manager')) && false ?: '_'}, ${($_ = isset($this->services['liip_imagine.cache.signer']) ? $this->services['liip_imagine.cache.signer'] : $this->get('liip_imagine.cache.signer')) && false ?: '_'}, ${($_ = isset($this->services['logger']) ? $this->services['logger'] : $this->get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, 301);
    }

    /**
     * Gets the public 'liip_imagine.data.manager' shared service.
     *
     * @return \Liip\ImagineBundle\Imagine\Data\DataManager
     */
    protected function getLiipImagine_Data_ManagerService()
    {
        $this->services['liip_imagine.data.manager'] = $instance = new \Liip\ImagineBundle\Imagine\Data\DataManager(${($_ = isset($this->services['liip_imagine.binary.mime_type_guesser']) ? $this->services['liip_imagine.binary.mime_type_guesser'] : $this->get('liip_imagine.binary.mime_type_guesser')) && false ?: '_'}, ${($_ = isset($this->services['liip_imagine.extension_guesser']) ? $this->services['liip_imagine.extension_guesser'] : $this->get('liip_imagine.extension_guesser')) && false ?: '_'}, ${($_ = isset($this->services['liip_imagine.filter.configuration']) ? $this->services['liip_imagine.filter.configuration'] : $this->get('liip_imagine.filter.configuration')) && false ?: '_'}, 'filesystem', NULL);

        $instance->addLoader('default', ${($_ = isset($this->services['liip_imagine.binary.loader.default']) ? $this->services['liip_imagine.binary.loader.default'] : $this->get('liip_imagine.binary.loader.default')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'liip_imagine.extension_guesser' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\File\MimeType\ExtensionGuesserInterface
     */
    protected function getLiipImagine_ExtensionGuesserService()
    {
        return $this->services['liip_imagine.extension_guesser'] = \Symfony\Component\HttpFoundation\File\MimeType\ExtensionGuesser::getInstance();
    }

    /**
     * Gets the public 'liip_imagine.filter.configuration' shared service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\FilterConfiguration
     */
    protected function getLiipImagine_Filter_ConfigurationService()
    {
        return $this->services['liip_imagine.filter.configuration'] = new \Liip\ImagineBundle\Imagine\Filter\FilterConfiguration(array('thumbnail_50x40' => array('filters' => array('relative_resize' => array('widen' => 50)), 'quality' => 100, 'jpeg_quality' => NULL, 'png_compression_level' => NULL, 'png_compression_filter' => NULL, 'format' => NULL, 'animated' => false, 'cache' => NULL, 'data_loader' => NULL, 'default_image' => NULL, 'post_processors' => array()), 'thumbnail_90x60' => array('filters' => array('thumbnail' => array('size' => array(0 => 90, 1 => 60), 'mode' => 'outbound')), 'quality' => 100, 'jpeg_quality' => NULL, 'png_compression_level' => NULL, 'png_compression_filter' => NULL, 'format' => NULL, 'animated' => false, 'cache' => NULL, 'data_loader' => NULL, 'default_image' => NULL, 'post_processors' => array()), 'thumbnail_200x200' => array('filters' => array('relative_resize' => array('widen' => 200)), 'quality' => 100, 'jpeg_quality' => NULL, 'png_compression_level' => NULL, 'png_compression_filter' => NULL, 'format' => NULL, 'animated' => false, 'cache' => NULL, 'data_loader' => NULL, 'default_image' => NULL, 'post_processors' => array()), 'thumbnail_262x255' => array('filters' => array('thumbnail' => array('size' => array(0 => 265, 1 => 255), 'mode' => 'inset')), 'quality' => 100, 'jpeg_quality' => NULL, 'png_compression_level' => NULL, 'png_compression_filter' => NULL, 'format' => NULL, 'animated' => false, 'cache' => NULL, 'data_loader' => NULL, 'default_image' => NULL, 'post_processors' => array()), 'thumbnail_310x300' => array('filters' => array('relative_resize' => array('widen' => 310)), 'quality' => 100, 'jpeg_quality' => NULL, 'png_compression_level' => NULL, 'png_compression_filter' => NULL, 'format' => NULL, 'animated' => false, 'cache' => NULL, 'data_loader' => NULL, 'default_image' => NULL, 'post_processors' => array()), 'thumbnail_610x600' => array('filters' => array('relative_resize' => array('widen' => 610)), 'quality' => 100, 'jpeg_quality' => NULL, 'png_compression_level' => NULL, 'png_compression_filter' => NULL, 'format' => NULL, 'animated' => false, 'cache' => NULL, 'data_loader' => NULL, 'default_image' => NULL, 'post_processors' => array())));
    }

    /**
     * Gets the public 'liip_imagine.filter.loader.auto_rotate' shared service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\AutoRotateFilterLoader
     */
    protected function getLiipImagine_Filter_Loader_AutoRotateService()
    {
        return $this->services['liip_imagine.filter.loader.auto_rotate'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\AutoRotateFilterLoader();
    }

    /**
     * Gets the public 'liip_imagine.filter.loader.background' shared service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\BackgroundFilterLoader
     */
    protected function getLiipImagine_Filter_Loader_BackgroundService()
    {
        return $this->services['liip_imagine.filter.loader.background'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\BackgroundFilterLoader(${($_ = isset($this->services['liip_imagine']) ? $this->services['liip_imagine'] : $this->get('liip_imagine')) && false ?: '_'});
    }

    /**
     * Gets the public 'liip_imagine.filter.loader.crop' shared service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\CropFilterLoader
     */
    protected function getLiipImagine_Filter_Loader_CropService()
    {
        return $this->services['liip_imagine.filter.loader.crop'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\CropFilterLoader();
    }

    /**
     * Gets the public 'liip_imagine.filter.loader.downscale' shared service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\DownscaleFilterLoader
     */
    protected function getLiipImagine_Filter_Loader_DownscaleService()
    {
        return $this->services['liip_imagine.filter.loader.downscale'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\DownscaleFilterLoader();
    }

    /**
     * Gets the public 'liip_imagine.filter.loader.flip' shared service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\FlipFilterLoader
     */
    protected function getLiipImagine_Filter_Loader_FlipService()
    {
        return $this->services['liip_imagine.filter.loader.flip'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\FlipFilterLoader();
    }

    /**
     * Gets the public 'liip_imagine.filter.loader.grayscale' shared service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\GrayscaleFilterLoader
     */
    protected function getLiipImagine_Filter_Loader_GrayscaleService()
    {
        return $this->services['liip_imagine.filter.loader.grayscale'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\GrayscaleFilterLoader();
    }

    /**
     * Gets the public 'liip_imagine.filter.loader.interlace' shared service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\InterlaceFilterLoader
     */
    protected function getLiipImagine_Filter_Loader_InterlaceService()
    {
        return $this->services['liip_imagine.filter.loader.interlace'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\InterlaceFilterLoader();
    }

    /**
     * Gets the public 'liip_imagine.filter.loader.paste' shared service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\PasteFilterLoader
     */
    protected function getLiipImagine_Filter_Loader_PasteService()
    {
        return $this->services['liip_imagine.filter.loader.paste'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\PasteFilterLoader(${($_ = isset($this->services['liip_imagine']) ? $this->services['liip_imagine'] : $this->get('liip_imagine')) && false ?: '_'}, ($this->targetDirs[3].'\\app'));
    }

    /**
     * Gets the public 'liip_imagine.filter.loader.relative_resize' shared service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\RelativeResizeFilterLoader
     */
    protected function getLiipImagine_Filter_Loader_RelativeResizeService()
    {
        return $this->services['liip_imagine.filter.loader.relative_resize'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\RelativeResizeFilterLoader();
    }

    /**
     * Gets the public 'liip_imagine.filter.loader.resample' shared service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\ResampleFilterLoader
     */
    protected function getLiipImagine_Filter_Loader_ResampleService()
    {
        return $this->services['liip_imagine.filter.loader.resample'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\ResampleFilterLoader(${($_ = isset($this->services['liip_imagine']) ? $this->services['liip_imagine'] : $this->get('liip_imagine')) && false ?: '_'});
    }

    /**
     * Gets the public 'liip_imagine.filter.loader.resize' shared service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\ResizeFilterLoader
     */
    protected function getLiipImagine_Filter_Loader_ResizeService()
    {
        return $this->services['liip_imagine.filter.loader.resize'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\ResizeFilterLoader();
    }

    /**
     * Gets the public 'liip_imagine.filter.loader.rotate' shared service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\RotateFilterLoader
     */
    protected function getLiipImagine_Filter_Loader_RotateService()
    {
        return $this->services['liip_imagine.filter.loader.rotate'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\RotateFilterLoader();
    }

    /**
     * Gets the public 'liip_imagine.filter.loader.scale' shared service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\ScaleFilterLoader
     */
    protected function getLiipImagine_Filter_Loader_ScaleService()
    {
        return $this->services['liip_imagine.filter.loader.scale'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\ScaleFilterLoader();
    }

    /**
     * Gets the public 'liip_imagine.filter.loader.strip' shared service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\StripFilterLoader
     */
    protected function getLiipImagine_Filter_Loader_StripService()
    {
        return $this->services['liip_imagine.filter.loader.strip'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\StripFilterLoader();
    }

    /**
     * Gets the public 'liip_imagine.filter.loader.thumbnail' shared service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\ThumbnailFilterLoader
     */
    protected function getLiipImagine_Filter_Loader_ThumbnailService()
    {
        return $this->services['liip_imagine.filter.loader.thumbnail'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\ThumbnailFilterLoader();
    }

    /**
     * Gets the public 'liip_imagine.filter.loader.upscale' shared service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\UpscaleFilterLoader
     */
    protected function getLiipImagine_Filter_Loader_UpscaleService()
    {
        return $this->services['liip_imagine.filter.loader.upscale'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\UpscaleFilterLoader();
    }

    /**
     * Gets the public 'liip_imagine.filter.loader.watermark' shared service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\Loader\WatermarkFilterLoader
     */
    protected function getLiipImagine_Filter_Loader_WatermarkService()
    {
        return $this->services['liip_imagine.filter.loader.watermark'] = new \Liip\ImagineBundle\Imagine\Filter\Loader\WatermarkFilterLoader(${($_ = isset($this->services['liip_imagine']) ? $this->services['liip_imagine'] : $this->get('liip_imagine')) && false ?: '_'}, ($this->targetDirs[3].'\\app'));
    }

    /**
     * Gets the public 'liip_imagine.filter.manager' shared service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\FilterManager
     */
    protected function getLiipImagine_Filter_ManagerService()
    {
        $this->services['liip_imagine.filter.manager'] = $instance = new \Liip\ImagineBundle\Imagine\Filter\FilterManager(${($_ = isset($this->services['liip_imagine.filter.configuration']) ? $this->services['liip_imagine.filter.configuration'] : $this->get('liip_imagine.filter.configuration')) && false ?: '_'}, ${($_ = isset($this->services['liip_imagine']) ? $this->services['liip_imagine'] : $this->get('liip_imagine')) && false ?: '_'}, ${($_ = isset($this->services['liip_imagine.binary.mime_type_guesser']) ? $this->services['liip_imagine.binary.mime_type_guesser'] : $this->get('liip_imagine.binary.mime_type_guesser')) && false ?: '_'});

        $instance->addLoader('relative_resize', ${($_ = isset($this->services['liip_imagine.filter.loader.relative_resize']) ? $this->services['liip_imagine.filter.loader.relative_resize'] : $this->get('liip_imagine.filter.loader.relative_resize')) && false ?: '_'});
        $instance->addLoader('resize', ${($_ = isset($this->services['liip_imagine.filter.loader.resize']) ? $this->services['liip_imagine.filter.loader.resize'] : $this->get('liip_imagine.filter.loader.resize')) && false ?: '_'});
        $instance->addLoader('thumbnail', ${($_ = isset($this->services['liip_imagine.filter.loader.thumbnail']) ? $this->services['liip_imagine.filter.loader.thumbnail'] : $this->get('liip_imagine.filter.loader.thumbnail')) && false ?: '_'});
        $instance->addLoader('crop', ${($_ = isset($this->services['liip_imagine.filter.loader.crop']) ? $this->services['liip_imagine.filter.loader.crop'] : $this->get('liip_imagine.filter.loader.crop')) && false ?: '_'});
        $instance->addLoader('grayscale', ${($_ = isset($this->services['liip_imagine.filter.loader.grayscale']) ? $this->services['liip_imagine.filter.loader.grayscale'] : $this->get('liip_imagine.filter.loader.grayscale')) && false ?: '_'});
        $instance->addLoader('paste', ${($_ = isset($this->services['liip_imagine.filter.loader.paste']) ? $this->services['liip_imagine.filter.loader.paste'] : $this->get('liip_imagine.filter.loader.paste')) && false ?: '_'});
        $instance->addLoader('watermark', ${($_ = isset($this->services['liip_imagine.filter.loader.watermark']) ? $this->services['liip_imagine.filter.loader.watermark'] : $this->get('liip_imagine.filter.loader.watermark')) && false ?: '_'});
        $instance->addLoader('background', ${($_ = isset($this->services['liip_imagine.filter.loader.background']) ? $this->services['liip_imagine.filter.loader.background'] : $this->get('liip_imagine.filter.loader.background')) && false ?: '_'});
        $instance->addLoader('strip', ${($_ = isset($this->services['liip_imagine.filter.loader.strip']) ? $this->services['liip_imagine.filter.loader.strip'] : $this->get('liip_imagine.filter.loader.strip')) && false ?: '_'});
        $instance->addLoader('scale', ${($_ = isset($this->services['liip_imagine.filter.loader.scale']) ? $this->services['liip_imagine.filter.loader.scale'] : $this->get('liip_imagine.filter.loader.scale')) && false ?: '_'});
        $instance->addLoader('upscale', ${($_ = isset($this->services['liip_imagine.filter.loader.upscale']) ? $this->services['liip_imagine.filter.loader.upscale'] : $this->get('liip_imagine.filter.loader.upscale')) && false ?: '_'});
        $instance->addLoader('downscale', ${($_ = isset($this->services['liip_imagine.filter.loader.downscale']) ? $this->services['liip_imagine.filter.loader.downscale'] : $this->get('liip_imagine.filter.loader.downscale')) && false ?: '_'});
        $instance->addLoader('auto_rotate', ${($_ = isset($this->services['liip_imagine.filter.loader.auto_rotate']) ? $this->services['liip_imagine.filter.loader.auto_rotate'] : $this->get('liip_imagine.filter.loader.auto_rotate')) && false ?: '_'});
        $instance->addLoader('rotate', ${($_ = isset($this->services['liip_imagine.filter.loader.rotate']) ? $this->services['liip_imagine.filter.loader.rotate'] : $this->get('liip_imagine.filter.loader.rotate')) && false ?: '_'});
        $instance->addLoader('flip', ${($_ = isset($this->services['liip_imagine.filter.loader.flip']) ? $this->services['liip_imagine.filter.loader.flip'] : $this->get('liip_imagine.filter.loader.flip')) && false ?: '_'});
        $instance->addLoader('interlace', ${($_ = isset($this->services['liip_imagine.filter.loader.interlace']) ? $this->services['liip_imagine.filter.loader.interlace'] : $this->get('liip_imagine.filter.loader.interlace')) && false ?: '_'});
        $instance->addLoader('resample', ${($_ = isset($this->services['liip_imagine.filter.loader.resample']) ? $this->services['liip_imagine.filter.loader.resample'] : $this->get('liip_imagine.filter.loader.resample')) && false ?: '_'});
        $instance->addPostProcessor('jpegoptim', ${($_ = isset($this->services['liip_imagine.filter.post_processor.jpegoptim']) ? $this->services['liip_imagine.filter.post_processor.jpegoptim'] : $this->get('liip_imagine.filter.post_processor.jpegoptim')) && false ?: '_'});
        $instance->addPostProcessor('optipng', ${($_ = isset($this->services['liip_imagine.filter.post_processor.optipng']) ? $this->services['liip_imagine.filter.post_processor.optipng'] : $this->get('liip_imagine.filter.post_processor.optipng')) && false ?: '_'});
        $instance->addPostProcessor('pngquant', ${($_ = isset($this->services['liip_imagine.filter.post_processor.pngquant']) ? $this->services['liip_imagine.filter.post_processor.pngquant'] : $this->get('liip_imagine.filter.post_processor.pngquant')) && false ?: '_'});
        $instance->addPostProcessor('mozjpeg', ${($_ = isset($this->services['liip_imagine.filter.post_processor.mozjpeg']) ? $this->services['liip_imagine.filter.post_processor.mozjpeg'] : $this->get('liip_imagine.filter.post_processor.mozjpeg')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'liip_imagine.filter.post_processor.jpegoptim' shared service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\PostProcessor\JpegOptimPostProcessor
     */
    protected function getLiipImagine_Filter_PostProcessor_JpegoptimService()
    {
        return $this->services['liip_imagine.filter.post_processor.jpegoptim'] = new \Liip\ImagineBundle\Imagine\Filter\PostProcessor\JpegOptimPostProcessor('/usr/bin/jpegoptim', true, NULL, true, NULL);
    }

    /**
     * Gets the public 'liip_imagine.filter.post_processor.mozjpeg' shared service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\PostProcessor\MozJpegPostProcessor
     */
    protected function getLiipImagine_Filter_PostProcessor_MozjpegService()
    {
        return $this->services['liip_imagine.filter.post_processor.mozjpeg'] = new \Liip\ImagineBundle\Imagine\Filter\PostProcessor\MozJpegPostProcessor('/opt/mozjpeg/bin/cjpeg');
    }

    /**
     * Gets the public 'liip_imagine.filter.post_processor.optipng' shared service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\PostProcessor\OptiPngPostProcessor
     */
    protected function getLiipImagine_Filter_PostProcessor_OptipngService()
    {
        return $this->services['liip_imagine.filter.post_processor.optipng'] = new \Liip\ImagineBundle\Imagine\Filter\PostProcessor\OptiPngPostProcessor('/usr/bin/optipng', 7, true, NULL);
    }

    /**
     * Gets the public 'liip_imagine.filter.post_processor.pngquant' shared service.
     *
     * @return \Liip\ImagineBundle\Imagine\Filter\PostProcessor\PngquantPostProcessor
     */
    protected function getLiipImagine_Filter_PostProcessor_PngquantService()
    {
        return $this->services['liip_imagine.filter.post_processor.pngquant'] = new \Liip\ImagineBundle\Imagine\Filter\PostProcessor\PngquantPostProcessor('/usr/bin/pngquant');
    }

    /**
     * Gets the public 'liip_imagine.form.type.image' shared service.
     *
     * @return \Liip\ImagineBundle\Form\Type\ImageType
     */
    protected function getLiipImagine_Form_Type_ImageService()
    {
        return $this->services['liip_imagine.form.type.image'] = new \Liip\ImagineBundle\Form\Type\ImageType();
    }

    /**
     * Gets the public 'liip_imagine.mime_type_guesser' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesserInterface
     */
    protected function getLiipImagine_MimeTypeGuesserService()
    {
        return $this->services['liip_imagine.mime_type_guesser'] = \Symfony\Component\HttpFoundation\File\MimeType\MimeTypeGuesser::getInstance();
    }

    /**
     * Gets the public 'liip_imagine.templating.helper' shared service.
     *
     * @return \Liip\ImagineBundle\Templating\Helper\ImagineHelper
     */
    protected function getLiipImagine_Templating_HelperService()
    {
        return $this->services['liip_imagine.templating.helper'] = new \Liip\ImagineBundle\Templating\Helper\ImagineHelper(${($_ = isset($this->services['liip_imagine.cache.manager']) ? $this->services['liip_imagine.cache.manager'] : $this->get('liip_imagine.cache.manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'locale_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\LocaleListener
     */
    protected function getLocaleListenerService()
    {
        return $this->services['locale_listener'] = new \Symfony\Component\HttpKernel\EventListener\LocaleListener(${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'}, 'es', ${($_ = isset($this->services['router']) ? $this->services['router'] : $this->get('router', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the public 'logger' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getLoggerService()
    {
        $this->services['logger'] = $instance = new \Symfony\Bridge\Monolog\Logger('app');

        $instance->pushProcessor(${($_ = isset($this->services['debug.log_processor']) ? $this->services['debug.log_processor'] : $this->getDebug_LogProcessorService()) && false ?: '_'});
        $instance->useMicrosecondTimestamps(true);
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.server_log']) ? $this->services['monolog.handler.server_log'] : $this->get('monolog.handler.server_log')) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.console']) ? $this->services['monolog.handler.console'] : $this->get('monolog.handler.console')) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.main']) ? $this->services['monolog.handler.main'] : $this->get('monolog.handler.main')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'markdown.parser' shared service.
     *
     * @return \Knp\Bundle\MarkdownBundle\Parser\Preset\Max
     */
    protected function getMarkdown_ParserService()
    {
        return $this->services['markdown.parser'] = new \Knp\Bundle\MarkdownBundle\Parser\Preset\Max();
    }

    /**
     * Gets the public 'monolog.handler.console' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Handler\ConsoleHandler
     */
    protected function getMonolog_Handler_ConsoleService()
    {
        return $this->services['monolog.handler.console'] = new \Symfony\Bridge\Monolog\Handler\ConsoleHandler(NULL, true, array());
    }

    /**
     * Gets the public 'monolog.handler.main' shared service.
     *
     * @return \Monolog\Handler\StreamHandler
     */
    protected function getMonolog_Handler_MainService()
    {
        $this->services['monolog.handler.main'] = $instance = new \Monolog\Handler\StreamHandler(($this->targetDirs[2].'\\logs/dev.log'), 100, true, NULL);

        $instance->pushProcessor(new \Monolog\Processor\PsrLogMessageProcessor());

        return $instance;
    }

    /**
     * Gets the public 'monolog.handler.null_internal' shared service.
     *
     * @return \Monolog\Handler\NullHandler
     */
    protected function getMonolog_Handler_NullInternalService()
    {
        return $this->services['monolog.handler.null_internal'] = new \Monolog\Handler\NullHandler();
    }

    /**
     * Gets the public 'monolog.handler.server_log' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Handler\ServerLogHandler
     */
    protected function getMonolog_Handler_ServerLogService()
    {
        return $this->services['monolog.handler.server_log'] = new \Symfony\Bridge\Monolog\Handler\ServerLogHandler('127.0.0.1:9911', 100, true);
    }

    /**
     * Gets the public 'monolog.logger.cache' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_Logger_CacheService()
    {
        $this->services['monolog.logger.cache'] = $instance = new \Symfony\Bridge\Monolog\Logger('cache');

        $instance->pushProcessor(${($_ = isset($this->services['debug.log_processor']) ? $this->services['debug.log_processor'] : $this->getDebug_LogProcessorService()) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.server_log']) ? $this->services['monolog.handler.server_log'] : $this->get('monolog.handler.server_log')) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.console']) ? $this->services['monolog.handler.console'] : $this->get('monolog.handler.console')) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.main']) ? $this->services['monolog.handler.main'] : $this->get('monolog.handler.main')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'monolog.logger.console' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_Logger_ConsoleService()
    {
        $this->services['monolog.logger.console'] = $instance = new \Symfony\Bridge\Monolog\Logger('console');

        $instance->pushProcessor(${($_ = isset($this->services['debug.log_processor']) ? $this->services['debug.log_processor'] : $this->getDebug_LogProcessorService()) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.server_log']) ? $this->services['monolog.handler.server_log'] : $this->get('monolog.handler.server_log')) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.main']) ? $this->services['monolog.handler.main'] : $this->get('monolog.handler.main')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'monolog.logger.doctrine' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_Logger_DoctrineService()
    {
        $this->services['monolog.logger.doctrine'] = $instance = new \Symfony\Bridge\Monolog\Logger('doctrine');

        $instance->pushProcessor(${($_ = isset($this->services['debug.log_processor']) ? $this->services['debug.log_processor'] : $this->getDebug_LogProcessorService()) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.server_log']) ? $this->services['monolog.handler.server_log'] : $this->get('monolog.handler.server_log')) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.main']) ? $this->services['monolog.handler.main'] : $this->get('monolog.handler.main')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'monolog.logger.event' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_Logger_EventService()
    {
        $this->services['monolog.logger.event'] = $instance = new \Symfony\Bridge\Monolog\Logger('event');

        $instance->pushProcessor(${($_ = isset($this->services['debug.log_processor']) ? $this->services['debug.log_processor'] : $this->getDebug_LogProcessorService()) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.server_log']) ? $this->services['monolog.handler.server_log'] : $this->get('monolog.handler.server_log')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'monolog.logger.php' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_Logger_PhpService()
    {
        $this->services['monolog.logger.php'] = $instance = new \Symfony\Bridge\Monolog\Logger('php');

        $instance->pushProcessor(${($_ = isset($this->services['debug.log_processor']) ? $this->services['debug.log_processor'] : $this->getDebug_LogProcessorService()) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.server_log']) ? $this->services['monolog.handler.server_log'] : $this->get('monolog.handler.server_log')) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.console']) ? $this->services['monolog.handler.console'] : $this->get('monolog.handler.console')) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.main']) ? $this->services['monolog.handler.main'] : $this->get('monolog.handler.main')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'monolog.logger.profiler' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_Logger_ProfilerService()
    {
        $this->services['monolog.logger.profiler'] = $instance = new \Symfony\Bridge\Monolog\Logger('profiler');

        $instance->pushProcessor(${($_ = isset($this->services['debug.log_processor']) ? $this->services['debug.log_processor'] : $this->getDebug_LogProcessorService()) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.server_log']) ? $this->services['monolog.handler.server_log'] : $this->get('monolog.handler.server_log')) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.console']) ? $this->services['monolog.handler.console'] : $this->get('monolog.handler.console')) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.main']) ? $this->services['monolog.handler.main'] : $this->get('monolog.handler.main')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'monolog.logger.request' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_Logger_RequestService()
    {
        $this->services['monolog.logger.request'] = $instance = new \Symfony\Bridge\Monolog\Logger('request');

        $instance->pushProcessor(${($_ = isset($this->services['debug.log_processor']) ? $this->services['debug.log_processor'] : $this->getDebug_LogProcessorService()) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.server_log']) ? $this->services['monolog.handler.server_log'] : $this->get('monolog.handler.server_log')) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.console']) ? $this->services['monolog.handler.console'] : $this->get('monolog.handler.console')) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.main']) ? $this->services['monolog.handler.main'] : $this->get('monolog.handler.main')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'monolog.logger.security' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_Logger_SecurityService()
    {
        $this->services['monolog.logger.security'] = $instance = new \Symfony\Bridge\Monolog\Logger('security');

        $instance->pushProcessor(${($_ = isset($this->services['debug.log_processor']) ? $this->services['debug.log_processor'] : $this->getDebug_LogProcessorService()) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.server_log']) ? $this->services['monolog.handler.server_log'] : $this->get('monolog.handler.server_log')) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.console']) ? $this->services['monolog.handler.console'] : $this->get('monolog.handler.console')) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.main']) ? $this->services['monolog.handler.main'] : $this->get('monolog.handler.main')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'monolog.logger.templating' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_Logger_TemplatingService()
    {
        $this->services['monolog.logger.templating'] = $instance = new \Symfony\Bridge\Monolog\Logger('templating');

        $instance->pushProcessor(${($_ = isset($this->services['debug.log_processor']) ? $this->services['debug.log_processor'] : $this->getDebug_LogProcessorService()) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.server_log']) ? $this->services['monolog.handler.server_log'] : $this->get('monolog.handler.server_log')) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.console']) ? $this->services['monolog.handler.console'] : $this->get('monolog.handler.console')) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.main']) ? $this->services['monolog.handler.main'] : $this->get('monolog.handler.main')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'monolog.logger.translation' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected function getMonolog_Logger_TranslationService()
    {
        $this->services['monolog.logger.translation'] = $instance = new \Symfony\Bridge\Monolog\Logger('translation');

        $instance->pushProcessor(${($_ = isset($this->services['debug.log_processor']) ? $this->services['debug.log_processor'] : $this->getDebug_LogProcessorService()) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.server_log']) ? $this->services['monolog.handler.server_log'] : $this->get('monolog.handler.server_log')) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.console']) ? $this->services['monolog.handler.console'] : $this->get('monolog.handler.console')) && false ?: '_'});
        $instance->pushHandler(${($_ = isset($this->services['monolog.handler.main']) ? $this->services['monolog.handler.main'] : $this->get('monolog.handler.main')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'mopa_bootstrap.form.type.form_actions' shared service.
     *
     * @return \Mopa\Bundle\BootstrapBundle\Form\Type\FormActionsType
     */
    protected function getMopaBootstrap_Form_Type_FormActionsService()
    {
        return $this->services['mopa_bootstrap.form.type.form_actions'] = new \Mopa\Bundle\BootstrapBundle\Form\Type\FormActionsType();
    }

    /**
     * Gets the public 'mopa_bootstrap.form.type.tab' shared service.
     *
     * @return \Mopa\Bundle\BootstrapBundle\Form\Type\TabType
     */
    protected function getMopaBootstrap_Form_Type_TabService()
    {
        return $this->services['mopa_bootstrap.form.type.tab'] = new \Mopa\Bundle\BootstrapBundle\Form\Type\TabType();
    }

    /**
     * Gets the public 'mopa_bootstrap.form.type_extension.button' shared service.
     *
     * @return \Mopa\Bundle\BootstrapBundle\Form\Extension\IconButtonExtension
     */
    protected function getMopaBootstrap_Form_TypeExtension_ButtonService()
    {
        return $this->services['mopa_bootstrap.form.type_extension.button'] = new \Mopa\Bundle\BootstrapBundle\Form\Extension\IconButtonExtension();
    }

    /**
     * Gets the public 'mopa_bootstrap.form.type_extension.date' shared service.
     *
     * @return \Mopa\Bundle\BootstrapBundle\Form\Extension\DateTypeExtension
     */
    protected function getMopaBootstrap_Form_TypeExtension_DateService()
    {
        return $this->services['mopa_bootstrap.form.type_extension.date'] = new \Mopa\Bundle\BootstrapBundle\Form\Extension\DateTypeExtension(array('date_wrapper_class' => array('year' => 'col-xs-4', 'month' => 'col-xs-4', 'day' => 'col-xs-4')));
    }

    /**
     * Gets the public 'mopa_bootstrap.form.type_extension.datetime' shared service.
     *
     * @return \Mopa\Bundle\BootstrapBundle\Form\Extension\DatetimeTypeExtension
     */
    protected function getMopaBootstrap_Form_TypeExtension_DatetimeService()
    {
        return $this->services['mopa_bootstrap.form.type_extension.datetime'] = new \Mopa\Bundle\BootstrapBundle\Form\Extension\DatetimeTypeExtension();
    }

    /**
     * Gets the public 'mopa_bootstrap.form.type_extension.embed_form' shared service.
     *
     * @return \Mopa\Bundle\BootstrapBundle\Form\Extension\EmbedFormExtension
     */
    protected function getMopaBootstrap_Form_TypeExtension_EmbedFormService()
    {
        return $this->services['mopa_bootstrap.form.type_extension.embed_form'] = new \Mopa\Bundle\BootstrapBundle\Form\Extension\EmbedFormExtension();
    }

    /**
     * Gets the public 'mopa_bootstrap.form.type_extension.error' shared service.
     *
     * @return \Mopa\Bundle\BootstrapBundle\Form\Extension\ErrorTypeFormTypeExtension
     */
    protected function getMopaBootstrap_Form_TypeExtension_ErrorService()
    {
        return $this->services['mopa_bootstrap.form.type_extension.error'] = new \Mopa\Bundle\BootstrapBundle\Form\Extension\ErrorTypeFormTypeExtension(array('error_type' => NULL));
    }

    /**
     * Gets the public 'mopa_bootstrap.form.type_extension.help' shared service.
     *
     * @return \Mopa\Bundle\BootstrapBundle\Form\Extension\HelpFormTypeExtension
     */
    protected function getMopaBootstrap_Form_TypeExtension_HelpService()
    {
        return $this->services['mopa_bootstrap.form.type_extension.help'] = new \Mopa\Bundle\BootstrapBundle\Form\Extension\HelpFormTypeExtension(array('help_block_tooltip' => array('title' => NULL, 'text' => NULL, 'icon' => 'info-sign', 'placement' => 'top'), 'help_block_popover' => array('title' => NULL, 'content' => NULL, 'text' => NULL, 'icon' => 'info-sign', 'placement' => 'top'), 'help_label_tooltip' => array('title' => NULL, 'text' => NULL, 'icon' => 'info-sign', 'placement' => 'top'), 'help_label_popover' => array('title' => NULL, 'content' => NULL, 'text' => NULL, 'icon' => 'info-sign', 'placement' => 'top'), 'help_widget_popover' => array('title' => NULL, 'content' => NULL, 'trigger' => 'hover', 'toggle' => 'popover', 'placement' => 'right', 'selector' => NULL)));
    }

    /**
     * Gets the public 'mopa_bootstrap.form.type_extension.horizontal' shared service.
     *
     * @return \Mopa\Bundle\BootstrapBundle\Form\Extension\LayoutFormTypeExtension
     */
    protected function getMopaBootstrap_Form_TypeExtension_HorizontalService()
    {
        return $this->services['mopa_bootstrap.form.type_extension.horizontal'] = new \Mopa\Bundle\BootstrapBundle\Form\Extension\LayoutFormTypeExtension(array('layout' => 'horizontal', 'horizontal_label_class' => 'col-sm-3', 'horizontal_label_div_class' => NULL, 'horizontal_label_offset_class' => 'col-sm-offset-3', 'horizontal_input_wrapper_class' => 'col-sm-9'));
    }

    /**
     * Gets the public 'mopa_bootstrap.form.type_extension.legend' shared service.
     *
     * @return \Mopa\Bundle\BootstrapBundle\Form\Extension\LegendFormTypeExtension
     */
    protected function getMopaBootstrap_Form_TypeExtension_LegendService()
    {
        return $this->services['mopa_bootstrap.form.type_extension.legend'] = new \Mopa\Bundle\BootstrapBundle\Form\Extension\LegendFormTypeExtension(array('render_fieldset' => true, 'show_legend' => false, 'show_child_legend' => false, 'legend_tag' => 'legend', 'render_required_asterisk' => true, 'render_optional_text' => false));
    }

    /**
     * Gets the public 'mopa_bootstrap.form.type_extension.offset_button' shared service.
     *
     * @return \Mopa\Bundle\BootstrapBundle\Form\Extension\OffsetButtonExtension
     */
    protected function getMopaBootstrap_Form_TypeExtension_OffsetButtonService()
    {
        return $this->services['mopa_bootstrap.form.type_extension.offset_button'] = new \Mopa\Bundle\BootstrapBundle\Form\Extension\OffsetButtonExtension();
    }

    /**
     * Gets the public 'mopa_bootstrap.form.type_extension.static_text' shared service.
     *
     * @return \Mopa\Bundle\BootstrapBundle\Form\Extension\StaticTextExtension
     */
    protected function getMopaBootstrap_Form_TypeExtension_StaticTextService()
    {
        return $this->services['mopa_bootstrap.form.type_extension.static_text'] = new \Mopa\Bundle\BootstrapBundle\Form\Extension\StaticTextExtension();
    }

    /**
     * Gets the public 'mopa_bootstrap.form.type_extension.tabbed' shared service.
     *
     * @return \Mopa\Bundle\BootstrapBundle\Form\Extension\TabbedFormTypeExtension
     */
    protected function getMopaBootstrap_Form_TypeExtension_TabbedService()
    {
        return $this->services['mopa_bootstrap.form.type_extension.tabbed'] = new \Mopa\Bundle\BootstrapBundle\Form\Extension\TabbedFormTypeExtension(${($_ = isset($this->services['form.factory']) ? $this->services['form.factory'] : $this->get('form.factory')) && false ?: '_'}, array('class' => 'nav nav-tabs'));
    }

    /**
     * Gets the public 'mopa_bootstrap.form.type_extension.time' shared service.
     *
     * @return \Mopa\Bundle\BootstrapBundle\Form\Extension\TimeTypeExtension
     */
    protected function getMopaBootstrap_Form_TypeExtension_TimeService()
    {
        return $this->services['mopa_bootstrap.form.type_extension.time'] = new \Mopa\Bundle\BootstrapBundle\Form\Extension\TimeTypeExtension();
    }

    /**
     * Gets the public 'mopa_bootstrap.form.type_extension.widget' shared service.
     *
     * @return \Mopa\Bundle\BootstrapBundle\Form\Extension\WidgetFormTypeExtension
     */
    protected function getMopaBootstrap_Form_TypeExtension_WidgetService()
    {
        return $this->services['mopa_bootstrap.form.type_extension.widget'] = new \Mopa\Bundle\BootstrapBundle\Form\Extension\WidgetFormTypeExtension(array('checkbox_label' => 'both'));
    }

    /**
     * Gets the public 'mopa_bootstrap.form.type_extension.widget_collection' shared service.
     *
     * @return \Mopa\Bundle\BootstrapBundle\Form\Extension\WidgetCollectionFormTypeExtension
     */
    protected function getMopaBootstrap_Form_TypeExtension_WidgetCollectionService()
    {
        return $this->services['mopa_bootstrap.form.type_extension.widget_collection'] = new \Mopa\Bundle\BootstrapBundle\Form\Extension\WidgetCollectionFormTypeExtension(array('render_collection_item' => true, 'widget_add_btn' => array('attr' => array('class' => 'btn btn-default'), 'label' => 'add_item', 'translation_domain' => NULL, 'icon' => NULL, 'icon_inverted' => false), 'widget_remove_btn' => array('attr' => array('class' => 'btn btn-default'), 'wrapper_div' => array('class' => 'form-group'), 'horizontal_wrapper_div' => array('class' => 'col-sm-3 col-sm-offset-3'), 'label' => 'remove_item', 'translation_domain' => NULL, 'icon' => NULL, 'icon_inverted' => false)));
    }

    /**
     * Gets the public 'mopa_bootstrap.twig.extension.bootstrap_flash' shared service.
     *
     * @return \Mopa\Bundle\BootstrapBundle\Twig\FlashExtension
     */
    protected function getMopaBootstrap_Twig_Extension_BootstrapFlashService()
    {
        return $this->services['mopa_bootstrap.twig.extension.bootstrap_flash'] = new \Mopa\Bundle\BootstrapBundle\Twig\FlashExtension(array('success' => 'success', 'error' => 'danger', 'danger' => 'danger', 'warning' => 'warning', 'warn' => 'warning', 'info' => 'info', 'notice' => 'info'));
    }

    /**
     * Gets the public 'mopa_bootstrap.twig.extension.bootstrap_form' shared service.
     *
     * @return \Mopa\Bundle\BootstrapBundle\Twig\FormExtension
     */
    protected function getMopaBootstrap_Twig_Extension_BootstrapFormService()
    {
        return $this->services['mopa_bootstrap.twig.extension.bootstrap_form'] = new \Mopa\Bundle\BootstrapBundle\Twig\FormExtension();
    }

    /**
     * Gets the public 'mopa_bootstrap.twig.extension.bootstrap_icon' shared service.
     *
     * @return \Mopa\Bundle\BootstrapBundle\Twig\IconExtension
     */
    protected function getMopaBootstrap_Twig_Extension_BootstrapIconService()
    {
        return $this->services['mopa_bootstrap.twig.extension.bootstrap_icon'] = new \Mopa\Bundle\BootstrapBundle\Twig\IconExtension('glyphicons', 'icon');
    }

    /**
     * Gets the public 'nelmio_api_doc.doc_comment_extractor' shared service.
     *
     * @return \Nelmio\ApiDocBundle\Util\DocCommentExtractor
     */
    protected function getNelmioApiDoc_DocCommentExtractorService()
    {
        return $this->services['nelmio_api_doc.doc_comment_extractor'] = new \Nelmio\ApiDocBundle\Util\DocCommentExtractor();
    }

    /**
     * Gets the public 'nelmio_api_doc.event_listener.request' shared service.
     *
     * @return \Nelmio\ApiDocBundle\EventListener\RequestListener
     */
    protected function getNelmioApiDoc_EventListener_RequestService()
    {
        return $this->services['nelmio_api_doc.event_listener.request'] = new \Nelmio\ApiDocBundle\EventListener\RequestListener(${($_ = isset($this->services['nelmio_api_doc.extractor.api_doc_extractor']) ? $this->services['nelmio_api_doc.extractor.api_doc_extractor'] : $this->get('nelmio_api_doc.extractor.api_doc_extractor')) && false ?: '_'}, ${($_ = isset($this->services['nelmio_api_doc.formatter.html_formatter']) ? $this->services['nelmio_api_doc.formatter.html_formatter'] : $this->get('nelmio_api_doc.formatter.html_formatter')) && false ?: '_'}, '_doc');
    }

    /**
     * Gets the public 'nelmio_api_doc.extractor.api_doc_extractor' shared service.
     *
     * @return \Nelmio\ApiDocBundle\Extractor\ApiDocExtractor
     */
    protected function getNelmioApiDoc_Extractor_ApiDocExtractorService()
    {
        $a = ${($_ = isset($this->services['nelmio_api_doc.doc_comment_extractor']) ? $this->services['nelmio_api_doc.doc_comment_extractor'] : $this->get('nelmio_api_doc.doc_comment_extractor')) && false ?: '_'};

        $this->services['nelmio_api_doc.extractor.api_doc_extractor'] = $instance = new \Nelmio\ApiDocBundle\Extractor\ApiDocExtractor($this, ${($_ = isset($this->services['router']) ? $this->services['router'] : $this->get('router')) && false ?: '_'}, ${($_ = isset($this->services['annotation_reader']) ? $this->services['annotation_reader'] : $this->get('annotation_reader')) && false ?: '_'}, $a, new \Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser(${($_ = isset($this->services['kernel']) ? $this->services['kernel'] : $this->get('kernel')) && false ?: '_'}), array(0 => new \Nelmio\ApiDocBundle\Extractor\Handler\FosRestHandler(), 1 => new \Nelmio\ApiDocBundle\Extractor\Handler\JmsSecurityExtraHandler(), 2 => new \Nelmio\ApiDocBundle\Extractor\Handler\SensioFrameworkExtraHandler(), 3 => new \Nelmio\ApiDocBundle\Extractor\Handler\PhpDocHandler($a)), array());

        $instance->addParser(${($_ = isset($this->services['nelmio_api_doc.parser.json_serializable_parser']) ? $this->services['nelmio_api_doc.parser.json_serializable_parser'] : $this->get('nelmio_api_doc.parser.json_serializable_parser')) && false ?: '_'});
        $instance->addParser(${($_ = isset($this->services['nelmio_api_doc.parser.collection_parser']) ? $this->services['nelmio_api_doc.parser.collection_parser'] : $this->get('nelmio_api_doc.parser.collection_parser')) && false ?: '_'});
        $instance->addParser(${($_ = isset($this->services['nelmio_api_doc.parser.form_errors_parser']) ? $this->services['nelmio_api_doc.parser.form_errors_parser'] : $this->get('nelmio_api_doc.parser.form_errors_parser')) && false ?: '_'});
        $instance->addParser(${($_ = isset($this->services['nelmio_api_doc.parser.form_type_parser']) ? $this->services['nelmio_api_doc.parser.form_type_parser'] : $this->get('nelmio_api_doc.parser.form_type_parser')) && false ?: '_'});
        $instance->addParser(${($_ = isset($this->services['nelmio_api_doc.parser.validation_parser']) ? $this->services['nelmio_api_doc.parser.validation_parser'] : $this->get('nelmio_api_doc.parser.validation_parser')) && false ?: '_'});
        $instance->addParser(${($_ = isset($this->services['nelmio_api_doc.parser.jms_metadata_parser']) ? $this->services['nelmio_api_doc.parser.jms_metadata_parser'] : $this->get('nelmio_api_doc.parser.jms_metadata_parser')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'nelmio_api_doc.form.extension.description_form_type_extension' shared service.
     *
     * @return \Nelmio\ApiDocBundle\Form\Extension\DescriptionFormTypeExtension
     */
    protected function getNelmioApiDoc_Form_Extension_DescriptionFormTypeExtensionService()
    {
        return $this->services['nelmio_api_doc.form.extension.description_form_type_extension'] = new \Nelmio\ApiDocBundle\Form\Extension\DescriptionFormTypeExtension();
    }

    /**
     * Gets the public 'nelmio_api_doc.formatter.html_formatter' shared service.
     *
     * @return \Nelmio\ApiDocBundle\Formatter\HtmlFormatter
     */
    protected function getNelmioApiDoc_Formatter_HtmlFormatterService()
    {
        $this->services['nelmio_api_doc.formatter.html_formatter'] = $instance = new \Nelmio\ApiDocBundle\Formatter\HtmlFormatter();

        $instance->setTemplatingEngine(${($_ = isset($this->services['templating']) ? $this->services['templating'] : $this->get('templating')) && false ?: '_'});
        $instance->setMotdTemplate('NelmioApiDocBundle::Components/motd.html.twig');
        $instance->setApiName('System API');
        $instance->setEnableSandbox(true);
        $instance->setEndpoint(NULL);
        $instance->setRequestFormatMethod('accept_header');
        $instance->setRequestFormats(array('json' => 'application/json', 'xml' => 'application/xml'));
        $instance->setDefaultRequestFormat('json');
        $instance->setAcceptType(NULL);
        $instance->setBodyFormats(array(0 => 'form', 1 => 'json'));
        $instance->setDefaultBodyFormat('form');
        $instance->setAuthentication(array('delivery' => 'http', 'type' => 'bearer', 'name' => 'Authorization', 'custom_endpoint' => false));
        $instance->setDefaultSectionsOpened(true);

        return $instance;
    }

    /**
     * Gets the public 'nelmio_api_doc.formatter.markdown_formatter' shared service.
     *
     * @return \Nelmio\ApiDocBundle\Formatter\MarkdownFormatter
     */
    protected function getNelmioApiDoc_Formatter_MarkdownFormatterService()
    {
        return $this->services['nelmio_api_doc.formatter.markdown_formatter'] = new \Nelmio\ApiDocBundle\Formatter\MarkdownFormatter();
    }

    /**
     * Gets the public 'nelmio_api_doc.formatter.simple_formatter' shared service.
     *
     * @return \Nelmio\ApiDocBundle\Formatter\SimpleFormatter
     */
    protected function getNelmioApiDoc_Formatter_SimpleFormatterService()
    {
        return $this->services['nelmio_api_doc.formatter.simple_formatter'] = new \Nelmio\ApiDocBundle\Formatter\SimpleFormatter();
    }

    /**
     * Gets the public 'nelmio_api_doc.formatter.swagger_formatter' shared service.
     *
     * @return \Nelmio\ApiDocBundle\Formatter\SwaggerFormatter
     */
    protected function getNelmioApiDoc_Formatter_SwaggerFormatterService()
    {
        $this->services['nelmio_api_doc.formatter.swagger_formatter'] = $instance = new \Nelmio\ApiDocBundle\Formatter\SwaggerFormatter('dot_notation');

        $instance->setBasePath('/api');
        $instance->setApiVersion('0.1');
        $instance->setSwaggerVersion('1.2');
        $instance->setInfo(array('title' => 'Symfony2', 'description' => 'My awesome Symfony2 app!', 'TermsOfServiceUrl' => NULL, 'contact' => NULL, 'license' => NULL, 'licenseUrl' => NULL));
        $instance->setAuthenticationConfig(array('delivery' => 'http', 'type' => 'bearer', 'name' => 'Authorization', 'custom_endpoint' => false));

        return $instance;
    }

    /**
     * Gets the public 'nelmio_api_doc.parser.collection_parser' shared service.
     *
     * @return \Nelmio\ApiDocBundle\Parser\CollectionParser
     */
    protected function getNelmioApiDoc_Parser_CollectionParserService()
    {
        return $this->services['nelmio_api_doc.parser.collection_parser'] = new \Nelmio\ApiDocBundle\Parser\CollectionParser();
    }

    /**
     * Gets the public 'nelmio_api_doc.parser.form_errors_parser' shared service.
     *
     * @return \Nelmio\ApiDocBundle\Parser\FormErrorsParser
     */
    protected function getNelmioApiDoc_Parser_FormErrorsParserService()
    {
        return $this->services['nelmio_api_doc.parser.form_errors_parser'] = new \Nelmio\ApiDocBundle\Parser\FormErrorsParser();
    }

    /**
     * Gets the public 'nelmio_api_doc.parser.form_type_parser' shared service.
     *
     * @return \Nelmio\ApiDocBundle\Parser\FormTypeParser
     */
    protected function getNelmioApiDoc_Parser_FormTypeParserService()
    {
        return $this->services['nelmio_api_doc.parser.form_type_parser'] = new \Nelmio\ApiDocBundle\Parser\FormTypeParser(${($_ = isset($this->services['form.factory']) ? $this->services['form.factory'] : $this->get('form.factory')) && false ?: '_'}, true);
    }

    /**
     * Gets the public 'nelmio_api_doc.parser.jms_metadata_parser' shared service.
     *
     * @return \Nelmio\ApiDocBundle\Parser\JmsMetadataParser
     */
    protected function getNelmioApiDoc_Parser_JmsMetadataParserService()
    {
        return $this->services['nelmio_api_doc.parser.jms_metadata_parser'] = new \Nelmio\ApiDocBundle\Parser\JmsMetadataParser(${($_ = isset($this->services['jms_serializer.metadata_factory']) ? $this->services['jms_serializer.metadata_factory'] : $this->getJmsSerializer_MetadataFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['jms_serializer.naming_strategy']) ? $this->services['jms_serializer.naming_strategy'] : $this->get('jms_serializer.naming_strategy')) && false ?: '_'}, ${($_ = isset($this->services['nelmio_api_doc.doc_comment_extractor']) ? $this->services['nelmio_api_doc.doc_comment_extractor'] : $this->get('nelmio_api_doc.doc_comment_extractor')) && false ?: '_'});
    }

    /**
     * Gets the public 'nelmio_api_doc.parser.json_serializable_parser' shared service.
     *
     * @return \Nelmio\ApiDocBundle\Parser\JsonSerializableParser
     */
    protected function getNelmioApiDoc_Parser_JsonSerializableParserService()
    {
        return $this->services['nelmio_api_doc.parser.json_serializable_parser'] = new \Nelmio\ApiDocBundle\Parser\JsonSerializableParser();
    }

    /**
     * Gets the public 'nelmio_api_doc.parser.validation_parser' shared service.
     *
     * @return \Nelmio\ApiDocBundle\Parser\ValidationParser
     */
    protected function getNelmioApiDoc_Parser_ValidationParserService()
    {
        return $this->services['nelmio_api_doc.parser.validation_parser'] = new \Nelmio\ApiDocBundle\Parser\ValidationParser(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
    }

    /**
     * Gets the public 'nelmio_api_doc.twig.extension.extra_markdown' shared service.
     *
     * @return \Nelmio\ApiDocBundle\Twig\Extension\MarkdownExtension
     */
    protected function getNelmioApiDoc_Twig_Extension_ExtraMarkdownService()
    {
        return $this->services['nelmio_api_doc.twig.extension.extra_markdown'] = new \Nelmio\ApiDocBundle\Twig\Extension\MarkdownExtension();
    }

    /**
     * Gets the public 'nelmio_cors.cors_listener' shared service.
     *
     * @return \Nelmio\CorsBundle\EventListener\CorsListener
     */
    protected function getNelmioCors_CorsListenerService()
    {
        return $this->services['nelmio_cors.cors_listener'] = new \Nelmio\CorsBundle\EventListener\CorsListener(${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher')) && false ?: '_'}, new \Nelmio\CorsBundle\Options\Resolver(array(0 => ${($_ = isset($this->services['nelmio_cors.options_provider.config']) ? $this->services['nelmio_cors.options_provider.config'] : $this->get('nelmio_cors.options_provider.config')) && false ?: '_'})));
    }

    /**
     * Gets the public 'nelmio_cors.options_provider.config' shared service.
     *
     * @return \Nelmio\CorsBundle\Options\ConfigProvider
     */
    protected function getNelmioCors_OptionsProvider_ConfigService()
    {
        return $this->services['nelmio_cors.options_provider.config'] = new \Nelmio\CorsBundle\Options\ConfigProvider(array('^/api/' => array('allow_origin' => true, 'allow_headers' => true, 'allow_methods' => array(0 => 'GET', 1 => 'POST', 2 => 'PUT', 3 => 'PATCH', 4 => 'DELETE', 5 => 'OPTIONS'), 'max_age' => 3600), '^/' => array('origin_regex' => true, 'allow_origin' => array(0 => '^http://localhost:[0-9]+'), 'allow_headers' => array(0 => 'x-custom-auth'), 'allow_methods' => array(0 => 'GET', 1 => 'POST', 2 => 'PUT', 3 => 'PATCH', 4 => 'DELETE', 5 => 'OPTIONS'), 'max_age' => 3600, 'hosts' => array(0 => '^api\\.'))), array('allow_origin' => array(), 'allow_credentials' => false, 'allow_headers' => array(), 'expose_headers' => array(), 'allow_methods' => array(), 'max_age' => 0, 'hosts' => array(), 'origin_regex' => false, 'forced_allow_origin_value' => NULL));
    }

    /**
     * Gets the public 'pagerfanta.convert_not_valid_current_page_to_not_found_listener' shared service.
     *
     * @return \WhiteOctober\PagerfantaBundle\EventListener\ConvertNotValidCurrentPageToNotFoundListener
     */
    protected function getPagerfanta_ConvertNotValidCurrentPageToNotFoundListenerService()
    {
        return $this->services['pagerfanta.convert_not_valid_current_page_to_not_found_listener'] = new \WhiteOctober\PagerfantaBundle\EventListener\ConvertNotValidCurrentPageToNotFoundListener();
    }

    /**
     * Gets the public 'pagerfanta.convert_not_valid_max_per_page_to_not_found_listener' shared service.
     *
     * @return \WhiteOctober\PagerfantaBundle\EventListener\ConvertNotValidMaxPerPageToNotFoundListener
     */
    protected function getPagerfanta_ConvertNotValidMaxPerPageToNotFoundListenerService()
    {
        return $this->services['pagerfanta.convert_not_valid_max_per_page_to_not_found_listener'] = new \WhiteOctober\PagerfantaBundle\EventListener\ConvertNotValidMaxPerPageToNotFoundListener();
    }

    /**
     * Gets the public 'profiler' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Profiler\Profiler
     */
    protected function getProfilerService()
    {
        $a = ${($_ = isset($this->services['monolog.logger.profiler']) ? $this->services['monolog.logger.profiler'] : $this->get('monolog.logger.profiler', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'};
        $b = ${($_ = isset($this->services['kernel']) ? $this->services['kernel'] : $this->get('kernel', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'};

        $c = new \Symfony\Component\Cache\DataCollector\CacheDataCollector();
        $c->addInstance('cache.app', ${($_ = isset($this->services['cache.app']) ? $this->services['cache.app'] : $this->get('cache.app')) && false ?: '_'});
        $c->addInstance('cache.system', ${($_ = isset($this->services['cache.system']) ? $this->services['cache.system'] : $this->get('cache.system')) && false ?: '_'});
        $c->addInstance('cache.validator', ${($_ = isset($this->services['cache.validator']) ? $this->services['cache.validator'] : $this->getCache_ValidatorService()) && false ?: '_'});
        $c->addInstance('cache.serializer', new \Symfony\Component\Cache\Adapter\TraceableAdapter(${($_ = isset($this->services['cache.serializer.recorder_inner']) ? $this->services['cache.serializer.recorder_inner'] : $this->getCache_Serializer_RecorderInnerService()) && false ?: '_'}));
        $c->addInstance('cache.annotations', ${($_ = isset($this->services['cache.annotations']) ? $this->services['cache.annotations'] : $this->getCache_AnnotationsService()) && false ?: '_'});

        $d = new \Doctrine\Bundle\DoctrineBundle\DataCollector\DoctrineDataCollector(${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'});
        $d->addLogger('default', ${($_ = isset($this->services['doctrine.dbal.logger.profiling.default']) ? $this->services['doctrine.dbal.logger.profiling.default'] : $this->getDoctrine_Dbal_Logger_Profiling_DefaultService()) && false ?: '_'});

        $e = new \Symfony\Component\HttpKernel\DataCollector\ConfigDataCollector();
        if ($this->has('kernel')) {
            $e->setKernel($b);
        }

        $this->services['profiler'] = $instance = new \Symfony\Component\HttpKernel\Profiler\Profiler(new \Symfony\Component\HttpKernel\Profiler\FileProfilerStorage(('file:'.__DIR__.'/profiler')), $a);

        $instance->add(${($_ = isset($this->services['data_collector.request']) ? $this->services['data_collector.request'] : $this->get('data_collector.request')) && false ?: '_'});
        $instance->add(new \Symfony\Component\HttpKernel\DataCollector\TimeDataCollector($b, ${($_ = isset($this->services['debug.stopwatch']) ? $this->services['debug.stopwatch'] : $this->get('debug.stopwatch', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}));
        $instance->add(new \Symfony\Component\HttpKernel\DataCollector\MemoryDataCollector());
        $instance->add(new \Symfony\Component\HttpKernel\DataCollector\AjaxDataCollector());
        $instance->add(${($_ = isset($this->services['data_collector.form']) ? $this->services['data_collector.form'] : $this->get('data_collector.form')) && false ?: '_'});
        $instance->add(new \Symfony\Component\HttpKernel\DataCollector\ExceptionDataCollector());
        $instance->add(new \Symfony\Component\HttpKernel\DataCollector\LoggerDataCollector($a, (__DIR__.'/appDevDebugProjectContainer')));
        $instance->add(new \Symfony\Component\HttpKernel\DataCollector\EventDataCollector(${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}));
        $instance->add(${($_ = isset($this->services['data_collector.router']) ? $this->services['data_collector.router'] : $this->get('data_collector.router')) && false ?: '_'});
        $instance->add($c);
        $instance->add(${($_ = isset($this->services['data_collector.translation']) ? $this->services['data_collector.translation'] : $this->get('data_collector.translation')) && false ?: '_'});
        $instance->add(new \Symfony\Bundle\SecurityBundle\DataCollector\SecurityDataCollector(${($_ = isset($this->services['security.token_storage']) ? $this->services['security.token_storage'] : $this->get('security.token_storage', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, ${($_ = isset($this->services['security.role_hierarchy']) ? $this->services['security.role_hierarchy'] : $this->get('security.role_hierarchy')) && false ?: '_'}, ${($_ = isset($this->services['security.logout_url_generator']) ? $this->services['security.logout_url_generator'] : $this->getSecurity_LogoutUrlGeneratorService()) && false ?: '_'}, ${($_ = isset($this->services['security.access.decision_manager']) ? $this->services['security.access.decision_manager'] : $this->get('security.access.decision_manager')) && false ?: '_'}, ${($_ = isset($this->services['security.firewall.map']) ? $this->services['security.firewall.map'] : $this->getSecurity_Firewall_MapService()) && false ?: '_'}));
        $instance->add(new \Symfony\Bridge\Twig\DataCollector\TwigDataCollector(${($_ = isset($this->services['twig.profile']) ? $this->services['twig.profile'] : $this->get('twig.profile')) && false ?: '_'}));
        $instance->add($d);
        $instance->add(new \Symfony\Bundle\SwiftmailerBundle\DataCollector\MessageDataCollector($this));
        $instance->add(${($_ = isset($this->services['data_collector.dump']) ? $this->services['data_collector.dump'] : $this->get('data_collector.dump')) && false ?: '_'});
        $instance->add(new \Sonata\BlockBundle\Profiler\DataCollector\BlockDataCollector(${($_ = isset($this->services['sonata.block.templating.helper']) ? $this->services['sonata.block.templating.helper'] : $this->get('sonata.block.templating.helper')) && false ?: '_'}, array(0 => 'sonata.block.service.container', 1 => 'sonata.page.block.container', 2 => 'sonata.dashboard.block.container', 3 => 'cmf.block.container', 4 => 'cmf.block.slideshow')));
        $instance->add($e);

        return $instance;
    }

    /**
     * Gets the public 'profiler_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ProfilerListener
     */
    protected function getProfilerListenerService()
    {
        return $this->services['profiler_listener'] = new \Symfony\Component\HttpKernel\EventListener\ProfilerListener(${($_ = isset($this->services['profiler']) ? $this->services['profiler'] : $this->get('profiler')) && false ?: '_'}, ${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'}, NULL, false, false);
    }

    /**
     * Gets the public 'property_accessor' shared service.
     *
     * @return \Symfony\Component\PropertyAccess\PropertyAccessor
     */
    protected function getPropertyAccessorService()
    {
        return $this->services['property_accessor'] = new \Symfony\Component\PropertyAccess\PropertyAccessor(false, false, new \Symfony\Component\Cache\Adapter\ArrayAdapter(0, false));
    }

    /**
     * Gets the public 'request_stack' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\RequestStack
     */
    protected function getRequestStackService()
    {
        return $this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack();
    }

    /**
     * Gets the public 'response_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ResponseListener
     */
    protected function getResponseListenerService()
    {
        return $this->services['response_listener'] = new \Symfony\Component\HttpKernel\EventListener\ResponseListener('UTF-8');
    }

    /**
     * Gets the public 'router' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Routing\Router
     */
    protected function getRouterService()
    {
        $this->services['router'] = $instance = new \Symfony\Bundle\FrameworkBundle\Routing\Router($this, ($this->targetDirs[3].'/app/config/routing_dev.yml'), array('cache_dir' => __DIR__, 'debug' => true, 'generator_class' => 'Symfony\\Component\\Routing\\Generator\\UrlGenerator', 'generator_base_class' => 'Symfony\\Component\\Routing\\Generator\\UrlGenerator', 'generator_dumper_class' => 'Symfony\\Component\\Routing\\Generator\\Dumper\\PhpGeneratorDumper', 'generator_cache_class' => 'appDevDebugProjectContainerUrlGenerator', 'matcher_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableUrlMatcher', 'matcher_base_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableUrlMatcher', 'matcher_dumper_class' => 'Symfony\\Component\\Routing\\Matcher\\Dumper\\PhpMatcherDumper', 'matcher_cache_class' => 'appDevDebugProjectContainerUrlMatcher', 'strict_requirements' => true), ${($_ = isset($this->services['router.request_context']) ? $this->services['router.request_context'] : $this->getRouter_RequestContextService()) && false ?: '_'});

        $instance->setConfigCacheFactory(${($_ = isset($this->services['config_cache_factory']) ? $this->services['config_cache_factory'] : $this->get('config_cache_factory')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'router_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\RouterListener
     */
    protected function getRouterListenerService()
    {
        return $this->services['router_listener'] = new \Symfony\Component\HttpKernel\EventListener\RouterListener(${($_ = isset($this->services['router']) ? $this->services['router'] : $this->get('router')) && false ?: '_'}, ${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'}, ${($_ = isset($this->services['router.request_context']) ? $this->services['router.request_context'] : $this->getRouter_RequestContextService()) && false ?: '_'}, ${($_ = isset($this->services['monolog.logger.request']) ? $this->services['monolog.logger.request'] : $this->get('monolog.logger.request', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the public 'routing.loader' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader
     */
    protected function getRouting_LoaderService()
    {
        $a = ${($_ = isset($this->services['controller_name_converter']) ? $this->services['controller_name_converter'] : $this->getControllerNameConverterService()) && false ?: '_'};
        $b = ${($_ = isset($this->services['file_locator']) ? $this->services['file_locator'] : $this->get('file_locator')) && false ?: '_'};
        $c = ${($_ = isset($this->services['annotation_reader']) ? $this->services['annotation_reader'] : $this->get('annotation_reader')) && false ?: '_'};

        $d = new \Sensio\Bundle\FrameworkExtraBundle\Routing\AnnotatedRouteControllerLoader($c);

        $e = new \FOS\RestBundle\Routing\Loader\RestRouteProcessor();

        $f = new \Symfony\Component\Config\Loader\LoaderResolver();
        $f->addLoader(new \Symfony\Component\Routing\Loader\XmlFileLoader($b));
        $f->addLoader(new \Symfony\Component\Routing\Loader\YamlFileLoader($b));
        $f->addLoader(new \Symfony\Component\Routing\Loader\PhpFileLoader($b));
        $f->addLoader(new \Symfony\Component\Config\Loader\GlobFileLoader($b));
        $f->addLoader(new \Symfony\Component\Routing\Loader\DirectoryLoader($b));
        $f->addLoader(new \Symfony\Component\Routing\Loader\DependencyInjection\ServiceRouterLoader($this));
        $f->addLoader($d);
        $f->addLoader(new \Symfony\Component\Routing\Loader\AnnotationDirectoryLoader($b, $d));
        $f->addLoader(new \Symfony\Component\Routing\Loader\AnnotationFileLoader($b, $d));
        $f->addLoader(${($_ = isset($this->services['sonata.admin.route_loader']) ? $this->services['sonata.admin.route_loader'] : $this->get('sonata.admin.route_loader')) && false ?: '_'});
        $f->addLoader(new \FOS\RestBundle\Routing\Loader\DirectoryRouteLoader($b, $e));
        $f->addLoader(new \FOS\RestBundle\Routing\Loader\RestRouteLoader($this, $b, $a, new \FOS\RestBundle\Routing\Loader\Reader\RestControllerReader(new \FOS\RestBundle\Routing\Loader\Reader\RestActionReader($c, ${($_ = isset($this->services['fos_rest.request.param_fetcher.reader']) ? $this->services['fos_rest.request.param_fetcher.reader'] : $this->getFosRest_Request_ParamFetcher_ReaderService()) && false ?: '_'}, ${($_ = isset($this->services['fos_rest.inflector']) ? $this->services['fos_rest.inflector'] : $this->get('fos_rest.inflector')) && false ?: '_'}, false, array('json' => false, 'html' => true), true), $c), 'json'));
        $f->addLoader(new \FOS\RestBundle\Routing\Loader\RestYamlCollectionLoader($b, $e, false, array('json' => false, 'html' => true), 'json'));
        $f->addLoader(new \FOS\RestBundle\Routing\Loader\RestXmlCollectionLoader($b, $e, false, array('json' => false, 'html' => true), 'json'));

        return $this->services['routing.loader'] = new \Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader($a, $f);
    }

    /**
     * Gets the public 'security.access.decision_manager' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager
     */
    protected function getSecurity_Access_DecisionManagerService()
    {
        return $this->services['security.access.decision_manager'] = new \Symfony\Component\Security\Core\Authorization\TraceableAccessDecisionManager(new \JMS\SecurityExtraBundle\Security\Authorization\RememberingAccessDecisionManager(new \Symfony\Component\Security\Core\Authorization\AccessDecisionManager(new RewindableGenerator(function () {
            yield 0 => ${($_ = isset($this->services['security.access.authenticated_voter']) ? $this->services['security.access.authenticated_voter'] : $this->getSecurity_Access_AuthenticatedVoterService()) && false ?: '_'};
            yield 1 => ${($_ = isset($this->services['security.access.role_hierarchy_voter']) ? $this->services['security.access.role_hierarchy_voter'] : $this->getSecurity_Access_RoleHierarchyVoterService()) && false ?: '_'};
            yield 2 => ${($_ = isset($this->services['security.access.expression_voter']) ? $this->services['security.access.expression_voter'] : $this->getSecurity_Access_ExpressionVoterService()) && false ?: '_'};
        }, 3), 'unanimous', false, true)));
    }

    /**
     * Gets the public 'security.access.method_interceptor' shared service.
     *
     * @return \JMS\SecurityExtraBundle\Security\Authorization\Interception\MethodSecurityInterceptor
     */
    protected function getSecurity_Access_MethodInterceptorService()
    {
        return $this->services['security.access.method_interceptor'] = new \JMS\SecurityExtraBundle\Security\Authorization\Interception\MethodSecurityInterceptor(${($_ = isset($this->services['security.token_storage']) ? $this->services['security.token_storage'] : $this->get('security.token_storage')) && false ?: '_'}, ${($_ = isset($this->services['security.authentication.manager']) ? $this->services['security.authentication.manager'] : $this->getSecurity_Authentication_ManagerService()) && false ?: '_'}, ${($_ = isset($this->services['security.access.decision_manager']) ? $this->services['security.access.decision_manager'] : $this->get('security.access.decision_manager')) && false ?: '_'}, new \JMS\SecurityExtraBundle\Security\Authorization\AfterInvocation\AfterInvocationManager(array()), new \JMS\SecurityExtraBundle\Security\Authorization\RunAsManager('RunAsToken', 'ROLE_'), ${($_ = isset($this->services['security.extra.metadata_factory']) ? $this->services['security.extra.metadata_factory'] : $this->getSecurity_Extra_MetadataFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['monolog.logger.security']) ? $this->services['monolog.logger.security'] : $this->get('monolog.logger.security', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the public 'security.access.pointcut' shared service.
     *
     * @return \JMS\SecurityExtraBundle\Security\Authorization\Interception\SecurityPointcut
     */
    protected function getSecurity_Access_PointcutService()
    {
        $this->services['security.access.pointcut'] = $instance = new \JMS\SecurityExtraBundle\Security\Authorization\Interception\SecurityPointcut(${($_ = isset($this->services['security.extra.metadata_factory']) ? $this->services['security.extra.metadata_factory'] : $this->getSecurity_Extra_MetadataFactoryService()) && false ?: '_'}, false, array());

        $instance->setSecuredClasses(array());

        return $instance;
    }

    /**
     * Gets the public 'security.authentication.guard_handler' shared service.
     *
     * @return \Symfony\Component\Security\Guard\GuardAuthenticatorHandler
     */
    protected function getSecurity_Authentication_GuardHandlerService()
    {
        return $this->services['security.authentication.guard_handler'] = new \Symfony\Component\Security\Guard\GuardAuthenticatorHandler(${($_ = isset($this->services['security.token_storage']) ? $this->services['security.token_storage'] : $this->get('security.token_storage')) && false ?: '_'}, ${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the public 'security.authentication_utils' shared service.
     *
     * @return \Symfony\Component\Security\Http\Authentication\AuthenticationUtils
     */
    protected function getSecurity_AuthenticationUtilsService()
    {
        return $this->services['security.authentication_utils'] = new \Symfony\Component\Security\Http\Authentication\AuthenticationUtils(${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'});
    }

    /**
     * Gets the public 'security.authorization_checker' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authorization\AuthorizationChecker
     */
    protected function getSecurity_AuthorizationCheckerService()
    {
        return $this->services['security.authorization_checker'] = new \Symfony\Component\Security\Core\Authorization\AuthorizationChecker(${($_ = isset($this->services['security.token_storage']) ? $this->services['security.token_storage'] : $this->get('security.token_storage')) && false ?: '_'}, ${($_ = isset($this->services['security.authentication.manager']) ? $this->services['security.authentication.manager'] : $this->getSecurity_Authentication_ManagerService()) && false ?: '_'}, ${($_ = isset($this->services['security.access.decision_manager']) ? $this->services['security.access.decision_manager'] : $this->get('security.access.decision_manager')) && false ?: '_'}, false);
    }

    /**
     * Gets the public 'security.csrf.token_manager' shared service.
     *
     * @return \Symfony\Component\Security\Csrf\CsrfTokenManager
     */
    protected function getSecurity_Csrf_TokenManagerService()
    {
        return $this->services['security.csrf.token_manager'] = new \Symfony\Component\Security\Csrf\CsrfTokenManager(new \Symfony\Component\Security\Csrf\TokenGenerator\UriSafeTokenGenerator(), new \Symfony\Component\Security\Csrf\TokenStorage\SessionTokenStorage(${($_ = isset($this->services['session']) ? $this->services['session'] : $this->get('session')) && false ?: '_'}), ${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the public 'security.encoder_factory' shared service.
     *
     * @return \Symfony\Component\Security\Core\Encoder\EncoderFactory
     */
    protected function getSecurity_EncoderFactoryService()
    {
        return $this->services['security.encoder_factory'] = new \Symfony\Component\Security\Core\Encoder\EncoderFactory(array('AppBundle\\Entity\\User\\User' => array('class' => 'Symfony\\Component\\Security\\Core\\Encoder\\BCryptPasswordEncoder', 'arguments' => array(0 => 13))));
    }

    /**
     * Gets the public 'security.extra.metadata_driver' shared service.
     *
     * @return \Metadata\Driver\DriverChain
     */
    protected function getSecurity_Extra_MetadataDriverService()
    {
        return $this->services['security.extra.metadata_driver'] = new \Metadata\Driver\DriverChain(array(0 => new \JMS\SecurityExtraBundle\Metadata\Driver\AnnotationDriver(${($_ = isset($this->services['annotation_reader']) ? $this->services['annotation_reader'] : $this->get('annotation_reader')) && false ?: '_'})));
    }

    /**
     * Gets the public 'security.firewall' shared service.
     *
     * @return \Symfony\Bundle\SecurityBundle\EventListener\FirewallListener
     */
    protected function getSecurity_FirewallService()
    {
        return $this->services['security.firewall'] = new \Symfony\Bundle\SecurityBundle\EventListener\FirewallListener(${($_ = isset($this->services['security.firewall.map']) ? $this->services['security.firewall.map'] : $this->getSecurity_Firewall_MapService()) && false ?: '_'}, ${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher')) && false ?: '_'}, ${($_ = isset($this->services['security.logout_url_generator']) ? $this->services['security.logout_url_generator'] : $this->getSecurity_LogoutUrlGeneratorService()) && false ?: '_'});
    }

    /**
     * Gets the public 'security.firewall.map.context.admin' shared service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security\FirewallContext
     */
    protected function getSecurity_Firewall_Map_Context_AdminService()
    {
        $a = ${($_ = isset($this->services['security.http_utils']) ? $this->services['security.http_utils'] : $this->getSecurity_HttpUtilsService()) && false ?: '_'};
        $b = ${($_ = isset($this->services['security.token_storage']) ? $this->services['security.token_storage'] : $this->get('security.token_storage')) && false ?: '_'};
        $c = ${($_ = isset($this->services['http_kernel']) ? $this->services['http_kernel'] : $this->get('http_kernel')) && false ?: '_'};
        $d = ${($_ = isset($this->services['monolog.logger.security']) ? $this->services['monolog.logger.security'] : $this->get('monolog.logger.security', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'};
        $e = ${($_ = isset($this->services['security.authentication.manager']) ? $this->services['security.authentication.manager'] : $this->getSecurity_Authentication_ManagerService()) && false ?: '_'};

        $f = new \Symfony\Component\Security\Http\Firewall\LogoutListener($b, $a, new \Symfony\Component\Security\Http\Logout\DefaultLogoutSuccessHandler($a, '/'), array('csrf_parameter' => '_csrf_token', 'csrf_token_id' => 'logout', 'logout_path' => '/admin/logout'));
        $f->addHandler(${($_ = isset($this->services['security.logout.handler.session']) ? $this->services['security.logout.handler.session'] : $this->getSecurity_Logout_Handler_SessionService()) && false ?: '_'});

        $g = new \Symfony\Component\Security\Http\Authentication\DefaultAuthenticationSuccessHandler($a, array());
        $g->setOptions(array('login_path' => '/admin/login', 'always_use_default_target_path' => false, 'default_target_path' => '/', 'target_path_parameter' => '_target_path', 'use_referer' => false));
        $g->setProviderKey('admin');

        $h = new \Symfony\Component\Security\Http\Authentication\DefaultAuthenticationFailureHandler($c, $a, array(), $d);
        $h->setOptions(array('login_path' => '/admin/login', 'failure_path' => NULL, 'failure_forward' => false, 'failure_path_parameter' => '_failure_path'));

        return $this->services['security.firewall.map.context.admin'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallContext(array(0 => ${($_ = isset($this->services['security.channel_listener']) ? $this->services['security.channel_listener'] : $this->getSecurity_ChannelListenerService()) && false ?: '_'}, 1 => ${($_ = isset($this->services['security.context_listener.0']) ? $this->services['security.context_listener.0'] : $this->getSecurity_ContextListener_0Service()) && false ?: '_'}, 2 => $f, 3 => new \Symfony\Component\Security\Http\Firewall\UsernamePasswordFormAuthenticationListener($b, $e, ${($_ = isset($this->services['security.authentication.session_strategy']) ? $this->services['security.authentication.session_strategy'] : $this->getSecurity_Authentication_SessionStrategyService()) && false ?: '_'}, $a, 'admin', $g, $h, array('use_forward' => false, 'check_path' => '/admin/login_check', 'require_previous_session' => true, 'username_parameter' => '_username', 'password_parameter' => '_password', 'csrf_parameter' => '_csrf_token', 'csrf_token_id' => 'authenticate', 'post_only' => true), $d, ${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, NULL), 4 => new \Symfony\Component\Security\Http\Firewall\AnonymousAuthenticationListener($b, '5da21d6fb1c1d2.71455373', $d, $e), 5 => ${($_ = isset($this->services['security.access_listener']) ? $this->services['security.access_listener'] : $this->getSecurity_AccessListenerService()) && false ?: '_'}), new \Symfony\Component\Security\Http\Firewall\ExceptionListener($b, ${($_ = isset($this->services['security.authentication.trust_resolver']) ? $this->services['security.authentication.trust_resolver'] : $this->getSecurity_Authentication_TrustResolverService()) && false ?: '_'}, $a, 'admin', new \Symfony\Component\Security\Http\EntryPoint\FormAuthenticationEntryPoint($c, $a, '/admin/login', false), NULL, NULL, $d, false), new \Symfony\Bundle\SecurityBundle\Security\FirewallConfig('admin', 'security.user_checker', 'security.request_matcher.6192eb66f667b945c5faa9068fbc96bd7724861bdcab98d92c6625b683ff302aff6d14d1', true, false, 'fos_user.user_provider.username', 'user', 'security.authentication.form_entry_point.admin', NULL, NULL, array(0 => 'logout', 1 => 'form_login', 2 => 'anonymous')));
    }

    /**
     * Gets the public 'security.firewall.map.context.api' shared service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security\FirewallContext
     */
    protected function getSecurity_Firewall_Map_Context_ApiService()
    {
        return $this->services['security.firewall.map.context.api'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallContext(array(0 => ${($_ = isset($this->services['security.channel_listener']) ? $this->services['security.channel_listener'] : $this->getSecurity_ChannelListenerService()) && false ?: '_'}, 1 => ${($_ = isset($this->services['security.authentication.listener.jwt.api']) ? $this->services['security.authentication.listener.jwt.api'] : $this->getSecurity_Authentication_Listener_Jwt_ApiService()) && false ?: '_'}, 2 => ${($_ = isset($this->services['security.access_listener']) ? $this->services['security.access_listener'] : $this->getSecurity_AccessListenerService()) && false ?: '_'}), new \Symfony\Component\Security\Http\Firewall\ExceptionListener(${($_ = isset($this->services['security.token_storage']) ? $this->services['security.token_storage'] : $this->get('security.token_storage')) && false ?: '_'}, ${($_ = isset($this->services['security.authentication.trust_resolver']) ? $this->services['security.authentication.trust_resolver'] : $this->getSecurity_Authentication_TrustResolverService()) && false ?: '_'}, ${($_ = isset($this->services['security.http_utils']) ? $this->services['security.http_utils'] : $this->getSecurity_HttpUtilsService()) && false ?: '_'}, 'api', ${($_ = isset($this->services['lexik_jwt_authentication.security.authentication.entry_point.api']) ? $this->services['lexik_jwt_authentication.security.authentication.entry_point.api'] : $this->getLexikJwtAuthentication_Security_Authentication_EntryPoint_ApiService()) && false ?: '_'}, NULL, NULL, ${($_ = isset($this->services['monolog.logger.security']) ? $this->services['monolog.logger.security'] : $this->get('monolog.logger.security', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, true), new \Symfony\Bundle\SecurityBundle\Security\FirewallConfig('api', 'security.user_checker', 'security.request_matcher.83414b4f59ab53f8865b08d5074e037efbb06e57ccba58ede5e1ed417a9ddcd1b645c11b', true, true, 'fos_user.user_provider.username', NULL, 'lexik_jwt_authentication.security.authentication.entry_point.api', NULL, NULL, array(0 => 'lexik_jwt')));
    }

    /**
     * Gets the public 'security.firewall.map.context.api_docs' shared service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security\FirewallContext
     */
    protected function getSecurity_Firewall_Map_Context_ApiDocsService()
    {
        $a = ${($_ = isset($this->services['security.token_storage']) ? $this->services['security.token_storage'] : $this->get('security.token_storage')) && false ?: '_'};
        $b = ${($_ = isset($this->services['monolog.logger.security']) ? $this->services['monolog.logger.security'] : $this->get('monolog.logger.security', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'};
        $c = ${($_ = isset($this->services['security.authentication.trust_resolver']) ? $this->services['security.authentication.trust_resolver'] : $this->getSecurity_Authentication_TrustResolverService()) && false ?: '_'};

        return $this->services['security.firewall.map.context.api_docs'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallContext(array(0 => ${($_ = isset($this->services['security.channel_listener']) ? $this->services['security.channel_listener'] : $this->getSecurity_ChannelListenerService()) && false ?: '_'}, 1 => new \Symfony\Component\Security\Http\Firewall\ContextListener($a, array(0 => ${($_ = isset($this->services['fos_user.user_provider.username']) ? $this->services['fos_user.user_provider.username'] : $this->getFosUser_UserProvider_UsernameService()) && false ?: '_'}), 'api_docs', $b, ${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, $c), 2 => new \Symfony\Component\Security\Http\Firewall\AnonymousAuthenticationListener($a, '5da21d6fb1c1d2.71455373', $b, ${($_ = isset($this->services['security.authentication.manager']) ? $this->services['security.authentication.manager'] : $this->getSecurity_Authentication_ManagerService()) && false ?: '_'}), 3 => ${($_ = isset($this->services['security.access_listener']) ? $this->services['security.access_listener'] : $this->getSecurity_AccessListenerService()) && false ?: '_'}), new \Symfony\Component\Security\Http\Firewall\ExceptionListener($a, $c, ${($_ = isset($this->services['security.http_utils']) ? $this->services['security.http_utils'] : $this->getSecurity_HttpUtilsService()) && false ?: '_'}, 'api_docs', NULL, NULL, NULL, $b, false), new \Symfony\Bundle\SecurityBundle\Security\FirewallConfig('api_docs', 'security.user_checker', 'security.request_matcher.f3ac44e1614cf5ff5908eb685aac69fdb2e0fb89eced77a37757f1a693fb469818019bc6', true, false, 'fos_user.user_provider.username', 'api_docs', NULL, NULL, NULL, array(0 => 'anonymous')));
    }

    /**
     * Gets the public 'security.firewall.map.context.api_login' shared service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security\FirewallContext
     */
    protected function getSecurity_Firewall_Map_Context_ApiLoginService()
    {
        $a = ${($_ = isset($this->services['security.token_storage']) ? $this->services['security.token_storage'] : $this->get('security.token_storage')) && false ?: '_'};
        $b = ${($_ = isset($this->services['security.authentication.manager']) ? $this->services['security.authentication.manager'] : $this->getSecurity_Authentication_ManagerService()) && false ?: '_'};
        $c = ${($_ = isset($this->services['security.http_utils']) ? $this->services['security.http_utils'] : $this->getSecurity_HttpUtilsService()) && false ?: '_'};
        $d = ${($_ = isset($this->services['monolog.logger.security']) ? $this->services['monolog.logger.security'] : $this->get('monolog.logger.security', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'};

        return $this->services['security.firewall.map.context.api_login'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallContext(array(0 => ${($_ = isset($this->services['security.channel_listener']) ? $this->services['security.channel_listener'] : $this->getSecurity_ChannelListenerService()) && false ?: '_'}, 1 => new \Symfony\Component\Security\Http\Firewall\UsernamePasswordFormAuthenticationListener($a, $b, ${($_ = isset($this->services['security.authentication.session_strategy']) ? $this->services['security.authentication.session_strategy'] : $this->getSecurity_Authentication_SessionStrategyService()) && false ?: '_'}, $c, 'api_login', new \Symfony\Component\Security\Http\Authentication\CustomAuthenticationSuccessHandler(${($_ = isset($this->services['lexik_jwt_authentication.handler.authentication_success']) ? $this->services['lexik_jwt_authentication.handler.authentication_success'] : $this->get('lexik_jwt_authentication.handler.authentication_success')) && false ?: '_'}, array('always_use_default_target_path' => false, 'default_target_path' => '/', 'login_path' => '/login', 'target_path_parameter' => '_target_path', 'use_referer' => false), 'api_login'), new \Symfony\Component\Security\Http\Authentication\CustomAuthenticationFailureHandler(${($_ = isset($this->services['lexik_jwt_authentication.handler.authentication_failure']) ? $this->services['lexik_jwt_authentication.handler.authentication_failure'] : $this->get('lexik_jwt_authentication.handler.authentication_failure')) && false ?: '_'}, array('login_path' => '/login', 'failure_path' => NULL, 'failure_forward' => false, 'failure_path_parameter' => '_failure_path')), array('check_path' => '/api/_login_check', 'require_previous_session' => false, 'username_parameter' => 'username', 'password_parameter' => 'password', 'use_forward' => false, 'csrf_parameter' => '_csrf_token', 'csrf_token_id' => 'authenticate', 'post_only' => true), $d, ${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, NULL), 2 => new \Symfony\Component\Security\Http\Firewall\AnonymousAuthenticationListener($a, '5da21d6fb1c1d2.71455373', $d, $b), 3 => ${($_ = isset($this->services['security.access_listener']) ? $this->services['security.access_listener'] : $this->getSecurity_AccessListenerService()) && false ?: '_'}), new \Symfony\Component\Security\Http\Firewall\ExceptionListener($a, ${($_ = isset($this->services['security.authentication.trust_resolver']) ? $this->services['security.authentication.trust_resolver'] : $this->getSecurity_Authentication_TrustResolverService()) && false ?: '_'}, $c, 'api_login', new \Symfony\Component\Security\Http\EntryPoint\FormAuthenticationEntryPoint(${($_ = isset($this->services['http_kernel']) ? $this->services['http_kernel'] : $this->get('http_kernel')) && false ?: '_'}, $c, '/login', false), NULL, NULL, $d, true), new \Symfony\Bundle\SecurityBundle\Security\FirewallConfig('api_login', 'security.user_checker', 'security.request_matcher.696d471d5730f1bcec02c3783880cea90d37764b964a7f52f71cf02d6f8bacb4f24ccd69', true, true, 'fos_user.user_provider.username', NULL, 'security.authentication.form_entry_point.api_login', NULL, NULL, array(0 => 'form_login', 1 => 'anonymous')));
    }

    /**
     * Gets the public 'security.firewall.map.context.api_token_refresh' shared service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security\FirewallContext
     */
    protected function getSecurity_Firewall_Map_Context_ApiTokenRefreshService()
    {
        $a = ${($_ = isset($this->services['security.token_storage']) ? $this->services['security.token_storage'] : $this->get('security.token_storage')) && false ?: '_'};
        $b = ${($_ = isset($this->services['monolog.logger.security']) ? $this->services['monolog.logger.security'] : $this->get('monolog.logger.security', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'};

        return $this->services['security.firewall.map.context.api_token_refresh'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallContext(array(0 => ${($_ = isset($this->services['security.channel_listener']) ? $this->services['security.channel_listener'] : $this->getSecurity_ChannelListenerService()) && false ?: '_'}, 1 => new \Symfony\Component\Security\Http\Firewall\AnonymousAuthenticationListener($a, '5da21d6fb1c1d2.71455373', $b, ${($_ = isset($this->services['security.authentication.manager']) ? $this->services['security.authentication.manager'] : $this->getSecurity_Authentication_ManagerService()) && false ?: '_'}), 2 => ${($_ = isset($this->services['security.access_listener']) ? $this->services['security.access_listener'] : $this->getSecurity_AccessListenerService()) && false ?: '_'}), new \Symfony\Component\Security\Http\Firewall\ExceptionListener($a, ${($_ = isset($this->services['security.authentication.trust_resolver']) ? $this->services['security.authentication.trust_resolver'] : $this->getSecurity_Authentication_TrustResolverService()) && false ?: '_'}, ${($_ = isset($this->services['security.http_utils']) ? $this->services['security.http_utils'] : $this->getSecurity_HttpUtilsService()) && false ?: '_'}, 'api_token_refresh', NULL, NULL, NULL, $b, true), new \Symfony\Bundle\SecurityBundle\Security\FirewallConfig('api_token_refresh', 'security.user_checker', 'security.request_matcher.bc5225be894e901e543ffcf3380500276da6125173096f94adf786461ce2e0f193452c7f', true, true, 'fos_user.user_provider.username', NULL, NULL, NULL, NULL, array(0 => 'anonymous')));
    }

    /**
     * Gets the public 'security.firewall.map.context.dev' shared service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security\FirewallContext
     */
    protected function getSecurity_Firewall_Map_Context_DevService()
    {
        return $this->services['security.firewall.map.context.dev'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallContext(array(), NULL, new \Symfony\Bundle\SecurityBundle\Security\FirewallConfig('dev', 'security.user_checker', 'security.request_matcher.7ac43c2928bafe5e56041919eb68135d15908028f87b29ff662dd62c7dfc4828c2b84310', false, '', '', '', '', '', '', array()));
    }

    /**
     * Gets the public 'security.firewall.map.context.main' shared service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security\FirewallContext
     */
    protected function getSecurity_Firewall_Map_Context_MainService()
    {
        $a = ${($_ = isset($this->services['security.http_utils']) ? $this->services['security.http_utils'] : $this->getSecurity_HttpUtilsService()) && false ?: '_'};
        $b = ${($_ = isset($this->services['security.token_storage']) ? $this->services['security.token_storage'] : $this->get('security.token_storage')) && false ?: '_'};
        $c = ${($_ = isset($this->services['security.authentication.rememberme.services.simplehash.main']) ? $this->services['security.authentication.rememberme.services.simplehash.main'] : $this->getSecurity_Authentication_Rememberme_Services_Simplehash_MainService()) && false ?: '_'};
        $d = ${($_ = isset($this->services['http_kernel']) ? $this->services['http_kernel'] : $this->get('http_kernel')) && false ?: '_'};
        $e = ${($_ = isset($this->services['monolog.logger.security']) ? $this->services['monolog.logger.security'] : $this->get('monolog.logger.security', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'};
        $f = ${($_ = isset($this->services['security.authentication.manager']) ? $this->services['security.authentication.manager'] : $this->getSecurity_Authentication_ManagerService()) && false ?: '_'};
        $g = ${($_ = isset($this->services['security.authentication.session_strategy']) ? $this->services['security.authentication.session_strategy'] : $this->getSecurity_Authentication_SessionStrategyService()) && false ?: '_'};
        $h = ${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'};

        $i = new \Symfony\Component\Security\Http\Firewall\LogoutListener($b, $a, new \Symfony\Component\Security\Http\Logout\DefaultLogoutSuccessHandler($a, '/'), array('csrf_parameter' => '_csrf_token', 'csrf_token_id' => 'logout', 'logout_path' => '/logout'));
        $i->addHandler(${($_ = isset($this->services['security.logout.handler.session']) ? $this->services['security.logout.handler.session'] : $this->getSecurity_Logout_Handler_SessionService()) && false ?: '_'});
        $i->addHandler($c);

        $j = new \Symfony\Component\Security\Http\Authentication\DefaultAuthenticationSuccessHandler($a, array());
        $j->setOptions(array('login_path' => '/login', 'always_use_default_target_path' => false, 'default_target_path' => '/', 'target_path_parameter' => '_target_path', 'use_referer' => false));
        $j->setProviderKey('main');

        $k = new \Symfony\Component\Security\Http\Authentication\DefaultAuthenticationFailureHandler($d, $a, array(), $e);
        $k->setOptions(array('login_path' => '/login', 'failure_path' => NULL, 'failure_forward' => false, 'failure_path_parameter' => '_failure_path'));

        $l = new \Symfony\Component\Security\Http\Firewall\UsernamePasswordFormAuthenticationListener($b, $f, $g, $a, 'main', $j, $k, array('use_forward' => false, 'check_path' => '/login_check', 'require_previous_session' => true, 'username_parameter' => '_username', 'password_parameter' => '_password', 'csrf_parameter' => '_csrf_token', 'csrf_token_id' => 'authenticate', 'post_only' => true), $e, $h, ${($_ = isset($this->services['security.csrf.token_manager']) ? $this->services['security.csrf.token_manager'] : $this->get('security.csrf.token_manager')) && false ?: '_'});
        $l->setRememberMeServices($c);

        return $this->services['security.firewall.map.context.main'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallContext(array(0 => ${($_ = isset($this->services['security.channel_listener']) ? $this->services['security.channel_listener'] : $this->getSecurity_ChannelListenerService()) && false ?: '_'}, 1 => ${($_ = isset($this->services['security.context_listener.0']) ? $this->services['security.context_listener.0'] : $this->getSecurity_ContextListener_0Service()) && false ?: '_'}, 2 => $i, 3 => $l, 4 => new \Symfony\Component\Security\Http\Firewall\RememberMeListener($b, $c, $f, $e, $h, true, $g), 5 => new \Symfony\Component\Security\Http\Firewall\AnonymousAuthenticationListener($b, '5da21d6fb1c1d2.71455373', $e, $f), 6 => ${($_ = isset($this->services['security.access_listener']) ? $this->services['security.access_listener'] : $this->getSecurity_AccessListenerService()) && false ?: '_'}), new \Symfony\Component\Security\Http\Firewall\ExceptionListener($b, ${($_ = isset($this->services['security.authentication.trust_resolver']) ? $this->services['security.authentication.trust_resolver'] : $this->getSecurity_Authentication_TrustResolverService()) && false ?: '_'}, $a, 'main', new \Symfony\Component\Security\Http\EntryPoint\FormAuthenticationEntryPoint($d, $a, '/login', false), NULL, NULL, $e, false), new \Symfony\Bundle\SecurityBundle\Security\FirewallConfig('main', 'security.user_checker', 'security.request_matcher.7cfa9b08003afaadb4ea3bcbe010a26276dbfcad3be257643ceb6b25a29b80166d7d63fd', true, false, 'fos_user.user_provider.username', 'user', 'security.authentication.form_entry_point.main', NULL, NULL, array(0 => 'logout', 1 => 'form_login', 2 => 'remember_me', 3 => 'anonymous')));
    }

    /**
     * Gets the public 'security.password_encoder' shared service.
     *
     * @return \Symfony\Component\Security\Core\Encoder\UserPasswordEncoder
     */
    protected function getSecurity_PasswordEncoderService()
    {
        return $this->services['security.password_encoder'] = new \Symfony\Component\Security\Core\Encoder\UserPasswordEncoder(${($_ = isset($this->services['security.encoder_factory']) ? $this->services['security.encoder_factory'] : $this->get('security.encoder_factory')) && false ?: '_'});
    }

    /**
     * Gets the public 'security.rememberme.response_listener' shared service.
     *
     * @return \Symfony\Component\Security\Http\RememberMe\ResponseListener
     */
    protected function getSecurity_Rememberme_ResponseListenerService()
    {
        return $this->services['security.rememberme.response_listener'] = new \Symfony\Component\Security\Http\RememberMe\ResponseListener();
    }

    /**
     * Gets the public 'security.role_hierarchy' shared service.
     *
     * @return \Symfony\Component\Security\Core\Role\RoleHierarchy
     */
    protected function getSecurity_RoleHierarchyService()
    {
        return $this->services['security.role_hierarchy'] = new \Symfony\Component\Security\Core\Role\RoleHierarchy(array('SONATA' => array(), 'ROLE_AUDIT_LOGS_ADMIN' => array(0 => 'ROLE_DATA_DOG_AUDIT_ADMIN_AUDIT_LOG_LIST', 1 => 'ROLE_DATA_DOG_AUDIT_ADMIN_AUDIT_LOG_VIEW'), 'ROLE_USER' => array(0 => 'ROLE_API', 1 => 'ROLE_SONATA_ADMIN'), 'ROLE_SONATA_ADMIN' => array(0 => 'ROLE_SONATA_USER_ADMIN_USER_VIEW', 1 => 'ROLE_SONATA_USER_ADMIN_USER_EDIT'), 'ROLE_ADMIN' => array(0 => 'ROLE_USER', 1 => 'ROLE_AUDIT_LOGS_ADMIN'), 'ROLE_SUPER_ADMIN' => array(0 => 'ROLE_USER', 1 => 'ROLE_ADMIN', 2 => 'ROLE_AUDIT_LOGS_ADMIN', 3 => 'ROLE_ALLOWED_TO_SWITCH'), 'ROLE_APP_USER' => array(0 => 'ROLE_USER', 1 => 'ROLE_DASHBOARD_USER'), 'ROLE_APP_ADMIN' => array(0 => 'ROLE_USER', 1 => 'ROLE_ADMIN')));
    }

    /**
     * Gets the public 'security.token_storage' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage
     */
    protected function getSecurity_TokenStorageService()
    {
        return $this->services['security.token_storage'] = new \Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage();
    }

    /**
     * Gets the public 'security.validator.user_password' shared service.
     *
     * @return \Symfony\Component\Security\Core\Validator\Constraints\UserPasswordValidator
     */
    protected function getSecurity_Validator_UserPasswordService()
    {
        return $this->services['security.validator.user_password'] = new \Symfony\Component\Security\Core\Validator\Constraints\UserPasswordValidator(${($_ = isset($this->services['security.token_storage']) ? $this->services['security.token_storage'] : $this->get('security.token_storage')) && false ?: '_'}, ${($_ = isset($this->services['security.encoder_factory']) ? $this->services['security.encoder_factory'] : $this->get('security.encoder_factory')) && false ?: '_'});
    }

    /**
     * Gets the public 'sensio_distribution.security_checker' shared service.
     *
     * @return \SensioLabs\Security\SecurityChecker
     */
    protected function getSensioDistribution_SecurityCheckerService()
    {
        return $this->services['sensio_distribution.security_checker'] = new \SensioLabs\Security\SecurityChecker();
    }

    /**
     * Gets the public 'sensio_distribution.security_checker.command' shared service.
     *
     * @return \SensioLabs\Security\Command\SecurityCheckerCommand
     */
    protected function getSensioDistribution_SecurityChecker_CommandService()
    {
        return $this->services['sensio_distribution.security_checker.command'] = new \SensioLabs\Security\Command\SecurityCheckerCommand(${($_ = isset($this->services['sensio_distribution.security_checker']) ? $this->services['sensio_distribution.security_checker'] : $this->get('sensio_distribution.security_checker')) && false ?: '_'});
    }

    /**
     * Gets the public 'sensio_framework_extra.cache.listener' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\HttpCacheListener
     */
    protected function getSensioFrameworkExtra_Cache_ListenerService()
    {
        return $this->services['sensio_framework_extra.cache.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\HttpCacheListener();
    }

    /**
     * Gets the public 'sensio_framework_extra.controller.listener' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener
     */
    protected function getSensioFrameworkExtra_Controller_ListenerService()
    {
        return $this->services['sensio_framework_extra.controller.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\ControllerListener(${($_ = isset($this->services['annotation_reader']) ? $this->services['annotation_reader'] : $this->get('annotation_reader')) && false ?: '_'});
    }

    /**
     * Gets the public 'sensio_framework_extra.converter.datetime' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DateTimeParamConverter
     */
    protected function getSensioFrameworkExtra_Converter_DatetimeService()
    {
        return $this->services['sensio_framework_extra.converter.datetime'] = new \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DateTimeParamConverter();
    }

    /**
     * Gets the public 'sensio_framework_extra.converter.doctrine.orm' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DoctrineParamConverter
     */
    protected function getSensioFrameworkExtra_Converter_Doctrine_OrmService()
    {
        return $this->services['sensio_framework_extra.converter.doctrine.orm'] = new \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\DoctrineParamConverter(${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the public 'sensio_framework_extra.converter.listener' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\ParamConverterListener
     */
    protected function getSensioFrameworkExtra_Converter_ListenerService()
    {
        return $this->services['sensio_framework_extra.converter.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\ParamConverterListener(${($_ = isset($this->services['sensio_framework_extra.converter.manager']) ? $this->services['sensio_framework_extra.converter.manager'] : $this->get('sensio_framework_extra.converter.manager')) && false ?: '_'}, true);
    }

    /**
     * Gets the public 'sensio_framework_extra.converter.manager' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\ParamConverterManager
     */
    protected function getSensioFrameworkExtra_Converter_ManagerService()
    {
        $this->services['sensio_framework_extra.converter.manager'] = $instance = new \Sensio\Bundle\FrameworkExtraBundle\Request\ParamConverter\ParamConverterManager();

        $instance->add(${($_ = isset($this->services['sensio_framework_extra.converter.doctrine.orm']) ? $this->services['sensio_framework_extra.converter.doctrine.orm'] : $this->get('sensio_framework_extra.converter.doctrine.orm')) && false ?: '_'}, 0, 'doctrine.orm');
        $instance->add(${($_ = isset($this->services['sensio_framework_extra.converter.datetime']) ? $this->services['sensio_framework_extra.converter.datetime'] : $this->get('sensio_framework_extra.converter.datetime')) && false ?: '_'}, 0, 'datetime');

        return $instance;
    }

    /**
     * Gets the public 'sensio_framework_extra.security.listener' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\SecurityListener
     */
    protected function getSensioFrameworkExtra_Security_ListenerService()
    {
        return $this->services['sensio_framework_extra.security.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\SecurityListener(NULL, new \Sensio\Bundle\FrameworkExtraBundle\Security\ExpressionLanguage(), ${($_ = isset($this->services['security.authentication.trust_resolver']) ? $this->services['security.authentication.trust_resolver'] : $this->getSecurity_Authentication_TrustResolverService()) && false ?: '_'}, ${($_ = isset($this->services['security.role_hierarchy']) ? $this->services['security.role_hierarchy'] : $this->get('security.role_hierarchy', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, ${($_ = isset($this->services['security.token_storage']) ? $this->services['security.token_storage'] : $this->get('security.token_storage', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, ${($_ = isset($this->services['security.authorization_checker']) ? $this->services['security.authorization_checker'] : $this->get('security.authorization_checker', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the public 'sensio_framework_extra.view.guesser' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\Templating\TemplateGuesser
     */
    protected function getSensioFrameworkExtra_View_GuesserService()
    {
        return $this->services['sensio_framework_extra.view.guesser'] = new \Sensio\Bundle\FrameworkExtraBundle\Templating\TemplateGuesser(${($_ = isset($this->services['kernel']) ? $this->services['kernel'] : $this->get('kernel')) && false ?: '_'});
    }

    /**
     * Gets the public 'sensio_framework_extra.view.listener' shared service.
     *
     * @return \Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener
     */
    protected function getSensioFrameworkExtra_View_ListenerService()
    {
        return $this->services['sensio_framework_extra.view.listener'] = new \Sensio\Bundle\FrameworkExtraBundle\EventListener\TemplateListener($this);
    }

    /**
     * Gets the public 'session' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Session
     */
    protected function getSessionService()
    {
        return $this->services['session'] = new \Symfony\Component\HttpFoundation\Session\Session(${($_ = isset($this->services['session.storage.native']) ? $this->services['session.storage.native'] : $this->get('session.storage.native')) && false ?: '_'}, new \Symfony\Component\HttpFoundation\Session\Attribute\AttributeBag(), new \Symfony\Component\HttpFoundation\Session\Flash\FlashBag());
    }

    /**
     * Gets the public 'session.handler' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Storage\Handler\NativeFileSessionHandler
     */
    protected function getSession_HandlerService()
    {
        return $this->services['session.handler'] = new \Symfony\Component\HttpFoundation\Session\Storage\Handler\NativeFileSessionHandler(($this->targetDirs[3].'/var/sessions/dev'));
    }

    /**
     * Gets the public 'session.save_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\SaveSessionListener
     */
    protected function getSession_SaveListenerService()
    {
        return $this->services['session.save_listener'] = new \Symfony\Component\HttpKernel\EventListener\SaveSessionListener();
    }

    /**
     * Gets the public 'session.storage.filesystem' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Storage\MockFileSessionStorage
     */
    protected function getSession_Storage_FilesystemService()
    {
        return $this->services['session.storage.filesystem'] = new \Symfony\Component\HttpFoundation\Session\Storage\MockFileSessionStorage((__DIR__.'/sessions'), 'MOCKSESSID', ${($_ = isset($this->services['session.storage.metadata_bag']) ? $this->services['session.storage.metadata_bag'] : $this->getSession_Storage_MetadataBagService()) && false ?: '_'});
    }

    /**
     * Gets the public 'session.storage.native' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage
     */
    protected function getSession_Storage_NativeService()
    {
        return $this->services['session.storage.native'] = new \Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorage(array('cookie_httponly' => true, 'gc_probability' => 1), ${($_ = isset($this->services['session.handler']) ? $this->services['session.handler'] : $this->get('session.handler')) && false ?: '_'}, ${($_ = isset($this->services['session.storage.metadata_bag']) ? $this->services['session.storage.metadata_bag'] : $this->getSession_Storage_MetadataBagService()) && false ?: '_'});
    }

    /**
     * Gets the public 'session.storage.php_bridge' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Storage\PhpBridgeSessionStorage
     */
    protected function getSession_Storage_PhpBridgeService()
    {
        return $this->services['session.storage.php_bridge'] = new \Symfony\Component\HttpFoundation\Session\Storage\PhpBridgeSessionStorage(${($_ = isset($this->services['session.handler']) ? $this->services['session.handler'] : $this->get('session.handler')) && false ?: '_'}, ${($_ = isset($this->services['session.storage.metadata_bag']) ? $this->services['session.storage.metadata_bag'] : $this->getSession_Storage_MetadataBagService()) && false ?: '_'});
    }

    /**
     * Gets the public 'session_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\SessionListener
     */
    protected function getSessionListenerService()
    {
        return $this->services['session_listener'] = new \Symfony\Component\HttpKernel\EventListener\SessionListener(new \Symfony\Component\DependencyInjection\ServiceLocator(array('session' => function () {
            return ${($_ = isset($this->services['session']) ? $this->services['session'] : $this->get('session', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'};
        })));
    }

    /**
     * Gets the public 'sonata.admin.audit.manager' shared service.
     *
     * @return \Sonata\AdminBundle\Model\AuditManager
     */
    protected function getSonata_Admin_Audit_ManagerService()
    {
        return $this->services['sonata.admin.audit.manager'] = new \Sonata\AdminBundle\Model\AuditManager($this);
    }

    /**
     * Gets the public 'sonata.admin.block.admin_list' shared service.
     *
     * @return \Sonata\AdminBundle\Block\AdminListBlockService
     */
    protected function getSonata_Admin_Block_AdminListService()
    {
        return $this->services['sonata.admin.block.admin_list'] = new \Sonata\AdminBundle\Block\AdminListBlockService('sonata.admin.block.admin_list', ${($_ = isset($this->services['sonata.templating']) ? $this->services['sonata.templating'] : $this->get('sonata.templating')) && false ?: '_'}, ${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'}, ${($_ = isset($this->services['sonata.admin.global_template_registry']) ? $this->services['sonata.admin.global_template_registry'] : $this->get('sonata.admin.global_template_registry')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.admin.block.search_result' shared service.
     *
     * @return \Sonata\AdminBundle\Block\AdminSearchBlockService
     */
    protected function getSonata_Admin_Block_SearchResultService()
    {
        return $this->services['sonata.admin.block.search_result'] = new \Sonata\AdminBundle\Block\AdminSearchBlockService('sonata.admin.block.search_result', ${($_ = isset($this->services['sonata.templating']) ? $this->services['sonata.templating'] : $this->get('sonata.templating')) && false ?: '_'}, ${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'}, ${($_ = isset($this->services['sonata.admin.search.handler']) ? $this->services['sonata.admin.search.handler'] : $this->get('sonata.admin.search.handler')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.admin.block.stats' shared service.
     *
     * @return \Sonata\AdminBundle\Block\AdminStatsBlockService
     */
    protected function getSonata_Admin_Block_StatsService()
    {
        return $this->services['sonata.admin.block.stats'] = new \Sonata\AdminBundle\Block\AdminStatsBlockService('sonata.admin.block.stats', ${($_ = isset($this->services['sonata.templating']) ? $this->services['sonata.templating'] : $this->get('sonata.templating')) && false ?: '_'}, ${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.admin.breadcrumbs_builder' shared service.
     *
     * @return \Sonata\AdminBundle\Admin\BreadcrumbsBuilder
     */
    protected function getSonata_Admin_BreadcrumbsBuilderService()
    {
        return $this->services['sonata.admin.breadcrumbs_builder'] = new \Sonata\AdminBundle\Admin\BreadcrumbsBuilder(array('child_admin_route' => 'edit'));
    }

    /**
     * Gets the public 'sonata.admin.builder.filter.factory' shared service.
     *
     * @return \Sonata\AdminBundle\Filter\FilterFactory
     */
    protected function getSonata_Admin_Builder_Filter_FactoryService()
    {
        return $this->services['sonata.admin.builder.filter.factory'] = new \Sonata\AdminBundle\Filter\FilterFactory($this, array('Sonata\\DoctrineORMAdminBundle\\Filter\\BooleanFilter' => 'sonata.admin.orm.filter.type.boolean', 'doctrine_orm_boolean' => 'sonata.admin.orm.filter.type.boolean', 'Sonata\\DoctrineORMAdminBundle\\Filter\\CallbackFilter' => 'sonata.admin.orm.filter.type.callback', 'doctrine_orm_callback' => 'sonata.admin.orm.filter.type.callback', 'Sonata\\DoctrineORMAdminBundle\\Filter\\ChoiceFilter' => 'sonata.admin.orm.filter.type.choice', 'doctrine_orm_choice' => 'sonata.admin.orm.filter.type.choice', 'Sonata\\DoctrineORMAdminBundle\\Filter\\ModelFilter' => 'sonata.admin.orm.filter.type.model', 'doctrine_orm_model' => 'sonata.admin.orm.filter.type.model', 'Sonata\\DoctrineORMAdminBundle\\Filter\\ModelAutocompleteFilter' => 'sonata.admin.orm.filter.type.model_autocomplete', 'doctrine_orm_model_autocomplete' => 'sonata.admin.orm.filter.type.model_autocomplete', 'Sonata\\DoctrineORMAdminBundle\\Filter\\StringFilter' => 'sonata.admin.orm.filter.type.string', 'doctrine_orm_string' => 'sonata.admin.orm.filter.type.string', 'Sonata\\DoctrineORMAdminBundle\\Filter\\NumberFilter' => 'sonata.admin.orm.filter.type.number', 'doctrine_orm_number' => 'sonata.admin.orm.filter.type.number', 'Sonata\\DoctrineORMAdminBundle\\Filter\\DateFilter' => 'sonata.admin.orm.filter.type.date', 'doctrine_orm_date' => 'sonata.admin.orm.filter.type.date', 'Sonata\\DoctrineORMAdminBundle\\Filter\\DateRangeFilter' => 'sonata.admin.orm.filter.type.date_range', 'doctrine_orm_date_range' => 'sonata.admin.orm.filter.type.date_range', 'Sonata\\DoctrineORMAdminBundle\\Filter\\DateTimeFilter' => 'sonata.admin.orm.filter.type.datetime', 'doctrine_orm_datetime' => 'sonata.admin.orm.filter.type.datetime', 'Sonata\\DoctrineORMAdminBundle\\Filter\\TimeFilter' => 'sonata.admin.orm.filter.type.time', 'doctrine_orm_time' => 'sonata.admin.orm.filter.type.time', 'Sonata\\DoctrineORMAdminBundle\\Filter\\DateTimeRangeFilter' => 'sonata.admin.orm.filter.type.datetime_range', 'doctrine_orm_datetime_range' => 'sonata.admin.orm.filter.type.datetime_range', 'Sonata\\DoctrineORMAdminBundle\\Filter\\ClassFilter' => 'sonata.admin.orm.filter.type.class', 'doctrine_orm_class' => 'sonata.admin.orm.filter.type.class'));
    }

    /**
     * Gets the public 'sonata.admin.builder.orm_datagrid' shared service.
     *
     * @return \Sonata\DoctrineORMAdminBundle\Builder\DatagridBuilder
     */
    protected function getSonata_Admin_Builder_OrmDatagridService()
    {
        return $this->services['sonata.admin.builder.orm_datagrid'] = new \Sonata\DoctrineORMAdminBundle\Builder\DatagridBuilder(${($_ = isset($this->services['form.factory']) ? $this->services['form.factory'] : $this->get('form.factory')) && false ?: '_'}, ${($_ = isset($this->services['sonata.admin.builder.filter.factory']) ? $this->services['sonata.admin.builder.filter.factory'] : $this->get('sonata.admin.builder.filter.factory')) && false ?: '_'}, ${($_ = isset($this->services['sonata.admin.guesser.orm_datagrid_chain']) ? $this->services['sonata.admin.guesser.orm_datagrid_chain'] : $this->get('sonata.admin.guesser.orm_datagrid_chain')) && false ?: '_'}, true);
    }

    /**
     * Gets the public 'sonata.admin.builder.orm_form' shared service.
     *
     * @return \Sonata\DoctrineORMAdminBundle\Builder\FormContractor
     */
    protected function getSonata_Admin_Builder_OrmFormService()
    {
        return $this->services['sonata.admin.builder.orm_form'] = new \Sonata\DoctrineORMAdminBundle\Builder\FormContractor(${($_ = isset($this->services['form.factory']) ? $this->services['form.factory'] : $this->get('form.factory')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.admin.builder.orm_list' shared service.
     *
     * @return \Sonata\DoctrineORMAdminBundle\Builder\ListBuilder
     */
    protected function getSonata_Admin_Builder_OrmListService()
    {
        return $this->services['sonata.admin.builder.orm_list'] = new \Sonata\DoctrineORMAdminBundle\Builder\ListBuilder(${($_ = isset($this->services['sonata.admin.guesser.orm_list_chain']) ? $this->services['sonata.admin.guesser.orm_list_chain'] : $this->get('sonata.admin.guesser.orm_list_chain')) && false ?: '_'}, array('array' => '@SonataAdmin/CRUD/list_array.html.twig', 'boolean' => '@SonataAdmin/CRUD/list_boolean.html.twig', 'date' => '@SonataIntl/CRUD/list_date.html.twig', 'time' => '@SonataAdmin/CRUD/list_time.html.twig', 'datetime' => '@SonataIntl/CRUD/list_datetime.html.twig', 'text' => '@SonataAdmin/CRUD/list_string.html.twig', 'textarea' => '@SonataAdmin/CRUD/list_string.html.twig', 'email' => '@SonataAdmin/CRUD/list_email.html.twig', 'trans' => '@SonataAdmin/CRUD/list_trans.html.twig', 'string' => '@SonataAdmin/CRUD/list_string.html.twig', 'smallint' => '@SonataIntl/CRUD/list_decimal.html.twig', 'bigint' => '@SonataIntl/CRUD/list_decimal.html.twig', 'integer' => '@SonataIntl/CRUD/list_decimal.html.twig', 'decimal' => '@SonataIntl/CRUD/list_decimal.html.twig', 'identifier' => '@SonataAdmin/CRUD/list_string.html.twig', 'currency' => '@SonataIntl/CRUD/list_currency.html.twig', 'percent' => '@SonataIntl/CRUD/list_percent.html.twig', 'choice' => '@SonataAdmin/CRUD/list_choice.html.twig', 'url' => '@SonataAdmin/CRUD/list_url.html.twig', 'html' => '@SonataAdmin/CRUD/list_html.html.twig'));
    }

    /**
     * Gets the public 'sonata.admin.builder.orm_show' shared service.
     *
     * @return \Sonata\DoctrineORMAdminBundle\Builder\ShowBuilder
     */
    protected function getSonata_Admin_Builder_OrmShowService()
    {
        return $this->services['sonata.admin.builder.orm_show'] = new \Sonata\DoctrineORMAdminBundle\Builder\ShowBuilder(${($_ = isset($this->services['sonata.admin.guesser.orm_show_chain']) ? $this->services['sonata.admin.guesser.orm_show_chain'] : $this->get('sonata.admin.guesser.orm_show_chain')) && false ?: '_'}, array('array' => '@SonataAdmin/CRUD/show_array.html.twig', 'boolean' => '@SonataAdmin/CRUD/show_boolean.html.twig', 'date' => '@SonataIntl/CRUD/show_date.html.twig', 'time' => '@SonataAdmin/CRUD/show_time.html.twig', 'datetime' => '@SonataIntl/CRUD/show_datetime.html.twig', 'text' => '@SonataAdmin/CRUD/base_show_field.html.twig', 'email' => '@SonataAdmin/CRUD/show_email.html.twig', 'trans' => '@SonataAdmin/CRUD/show_trans.html.twig', 'string' => '@SonataAdmin/CRUD/base_show_field.html.twig', 'smallint' => '@SonataIntl/CRUD/show_decimal.html.twig', 'bigint' => '@SonataIntl/CRUD/show_decimal.html.twig', 'integer' => '@SonataIntl/CRUD/show_decimal.html.twig', 'decimal' => '@SonataIntl/CRUD/show_decimal.html.twig', 'currency' => '@SonataIntl/CRUD/show_currency.html.twig', 'percent' => '@SonataIntl/CRUD/show_percent.html.twig', 'choice' => '@SonataAdmin/CRUD/show_choice.html.twig', 'url' => '@SonataAdmin/CRUD/show_url.html.twig', 'html' => '@SonataAdmin/CRUD/show_html.html.twig'));
    }

    /**
     * Gets the public 'sonata.admin.controller.admin' shared service.
     *
     * @return \Sonata\AdminBundle\Controller\HelperController
     */
    protected function getSonata_Admin_Controller_AdminService()
    {
        return $this->services['sonata.admin.controller.admin'] = new \Sonata\AdminBundle\Controller\HelperController(${($_ = isset($this->services['twig']) ? $this->services['twig'] : $this->get('twig')) && false ?: '_'}, ${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'}, ${($_ = isset($this->services['sonata.admin.helper']) ? $this->services['sonata.admin.helper'] : $this->get('sonata.admin.helper')) && false ?: '_'}, ${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.admin.doctrine_orm.form.type.choice_field_mask' shared service.
     *
     * @return \Sonata\AdminBundle\Form\Type\ChoiceFieldMaskType
     */
    protected function getSonata_Admin_DoctrineOrm_Form_Type_ChoiceFieldMaskService()
    {
        return $this->services['sonata.admin.doctrine_orm.form.type.choice_field_mask'] = new \Sonata\AdminBundle\Form\Type\ChoiceFieldMaskType();
    }

    /**
     * Gets the public 'sonata.admin.event.extension' shared service.
     *
     * @return \Sonata\AdminBundle\Event\AdminEventExtension
     */
    protected function getSonata_Admin_Event_ExtensionService()
    {
        return $this->services['sonata.admin.event.extension'] = new \Sonata\AdminBundle\Event\AdminEventExtension(${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.admin.exporter' shared service.
     *
     * @return \Sonata\AdminBundle\Export\Exporter
     *
     * @deprecated The service "sonata.admin.exporter" is deprecated in favor of the "sonata.exporter.exporter" service since version 3.14 and will be removed in 4.0.
     */
    protected function getSonata_Admin_ExporterService()
    {
        @trigger_error('The service "sonata.admin.exporter" is deprecated in favor of the "sonata.exporter.exporter" service since version 3.14 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['sonata.admin.exporter'] = new \Sonata\AdminBundle\Export\Exporter();
    }

    /**
     * Gets the public 'sonata.admin.filter_persister.session' shared service.
     *
     * @return \Sonata\AdminBundle\Filter\Persister\SessionFilterPersister
     */
    protected function getSonata_Admin_FilterPersister_SessionService()
    {
        return $this->services['sonata.admin.filter_persister.session'] = new \Sonata\AdminBundle\Filter\Persister\SessionFilterPersister(${($_ = isset($this->services['session']) ? $this->services['session'] : $this->get('session')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.admin.form.extension.choice' shared service.
     *
     * @return \Sonata\AdminBundle\Form\Extension\ChoiceTypeExtension
     */
    protected function getSonata_Admin_Form_Extension_ChoiceService()
    {
        return $this->services['sonata.admin.form.extension.choice'] = new \Sonata\AdminBundle\Form\Extension\ChoiceTypeExtension();
    }

    /**
     * Gets the public 'sonata.admin.form.extension.field' shared service.
     *
     * @return \Sonata\AdminBundle\Form\Extension\Field\Type\FormTypeFieldExtension
     */
    protected function getSonata_Admin_Form_Extension_FieldService()
    {
        return $this->services['sonata.admin.form.extension.field'] = new \Sonata\AdminBundle\Form\Extension\Field\Type\FormTypeFieldExtension(array('email' => '', 'textarea' => '', 'text' => '', 'choice' => '', 'integer' => '', 'datetime' => 'sonata-medium-date', 'date' => 'sonata-medium-date', 'Symfony\\Component\\Form\\Extension\\Core\\Type\\ChoiceType' => '', 'Symfony\\Component\\Form\\Extension\\Core\\Type\\DateType' => 'sonata-medium-date', 'Symfony\\Component\\Form\\Extension\\Core\\Type\\DateTimeType' => 'sonata-medium-date', 'Symfony\\Component\\Form\\Extension\\Core\\Type\\EmailType' => '', 'Symfony\\Component\\Form\\Extension\\Core\\Type\\IntegerType' => '', 'Symfony\\Component\\Form\\Extension\\Core\\Type\\TextareaType' => '', 'Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType' => ''), array('title_mode' => 'both', 'html5_validate' => true, 'pager_links' => 5, 'sort_admins' => false, 'confirm_exit' => true, 'use_select2' => true, 'use_icheck' => true, 'use_bootlint' => false, 'use_stickyforms' => true, 'form_type' => 'standard', 'dropdown_number_groups_per_colums' => 2, 'lock_protection' => true, 'enable_jms_di_extra_autoregistration' => true, 'javascripts' => array(0 => 'bundles/sonatacore/vendor/jquery/dist/jquery.js', 1 => 'bundles/sonatacore/vendor/moment/min/moment.min.js', 2 => 'bundles/sonatacore/vendor/bootstrap/dist/js/bootstrap.js', 3 => 'bundles/sonatacore/vendor/select2/select2.js', 4 => 'bundles/sonatacore/vendor/eonasdan-bootstrap-datetimepicker/build/js/bootstrap-datetimepicker.min.js', 5 => 'bundles/sonataadmin/vendor/jqueryui/ui/minified/jquery-ui.min.js', 6 => 'bundles/sonataadmin/vendor/jqueryui/ui/minified/i18n/jquery-ui-i18n.min.js', 7 => 'bundles/sonataadmin/vendor/jquery-form/jquery.form.js', 8 => 'bundles/sonataadmin/jquery/jquery.confirmExit.js', 9 => 'bundles/sonataadmin/vendor/jquery.scrollTo/jquery.scrollTo.js', 10 => 'bundles/sonataadmin/vendor/waypoints/lib/jquery.waypoints.min.js', 11 => 'bundles/sonataadmin/vendor/waypoints/lib/shortcuts/sticky.min.js', 12 => 'bundles/sonataadmin/vendor/x-editable/dist/bootstrap3-editable/js/bootstrap-editable.js', 13 => 'bundles/sonataadmin/vendor/iCheck/icheck.min.js', 14 => 'bundles/sonataadmin/vendor/slimScroll/jquery.slimscroll.min.js', 15 => 'bundles/sonataadmin/vendor/admin-lte/dist/js/app.min.js', 16 => 'bundles/sonataadmin/Admin.js', 17 => 'bundles/sonataadmin/treeview.js', 18 => 'bundles/sonataformatter/vendor/markitup-markitup/markitup/jquery.markitup.js', 19 => 'bundles/sonataformatter/markitup/sets/markdown/set.js', 20 => 'bundles/sonataformatter/markitup/sets/html/set.js', 21 => 'bundles/sonataformatter/markitup/sets/textile/set.js', 22 => 'bundles/sonataformatter/vendor/ckeditor/ckeditor.js', 23 => 'assets/vendor/hinclude/hinclude.js', 24 => 'assets/vendor/bootstrap3-wysihtml5/lib/js/wysihtml5-0.3.0.js', 25 => 'assets/vendor/bootstrap3-wysihtml5/src/bootstrap3-wysihtml5.js', 26 => 'assets/vendor/bootstrap-colorpicker/dist/js/bootstrap-colorpicker.min.js'), 'stylesheets' => array(0 => 'bundles/sonatacore/vendor/bootstrap/dist/css/bootstrap.min.css', 1 => 'bundles/sonatacore/vendor/components-font-awesome/css/font-awesome.min.css', 2 => 'bundles/sonatacore/vendor/ionicons/css/ionicons.min.css', 3 => 'bundles/sonatacore/vendor/eonasdan-bootstrap-datetimepicker/build/css/bootstrap-datetimepicker.min.css', 4 => 'bundles/sonatacore/vendor/select2/select2.css', 5 => 'bundles/sonatacore/vendor/select2/select2-bootstrap.css', 6 => 'bundles/sonataadmin/vendor/jqueryui/themes/base/jquery-ui.css', 7 => 'bundles/sonataadmin/vendor/jqueryui/themes/flick/jquery-ui.min.css', 8 => 'bundles/sonataadmin/vendor/admin-lte/dist/css/AdminLTE.css', 9 => 'bundles/sonataadmin/vendor/iCheck/skins/square/blue.css', 10 => 'bundles/sonataadmin/vendor/x-editable/dist/bootstrap3-editable/css/bootstrap-editable.css', 11 => 'bundles/sonataadmin/css/styles.css', 12 => 'bundles/sonataadmin/css/layout.css', 13 => 'bundles/sonataadmin/css/tree.css', 14 => 'bundles/sonataformatter/markitup/skins/sonata/style.css', 15 => 'bundles/sonataformatter/markitup/sets/markdown/style.css', 16 => 'bundles/sonataformatter/markitup/sets/html/style.css', 17 => 'bundles/sonataformatter/markitup/sets/textile/style.css', 18 => 'bundles/sonataadmin/vendor/admin-lte/dist/css/skins/skin-purple.min.css', 19 => 'bundles/sonataadmin/vendor/admin-lte/dist/css/skins/skin-purple.min.css', 20 => 'assets/vendor/bootstrap3-wysihtml5/src/bootstrap-wysihtml5.css', 21 => 'assets/vendor/bootstrap-colorpicker/dist/css/bootstrap-colorpicker.min.css'), 'role_admin' => 'ROLE_SONATA_ADMIN', 'role_super_admin' => 'ROLE_SUPER_ADMIN', 'search' => true));
    }

    /**
     * Gets the public 'sonata.admin.form.filter.type.choice' shared service.
     *
     * @return \Sonata\AdminBundle\Form\Type\Filter\ChoiceType
     */
    protected function getSonata_Admin_Form_Filter_Type_ChoiceService()
    {
        return $this->services['sonata.admin.form.filter.type.choice'] = new \Sonata\AdminBundle\Form\Type\Filter\ChoiceType(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.admin.form.filter.type.date' shared service.
     *
     * @return \Sonata\AdminBundle\Form\Type\Filter\DateType
     */
    protected function getSonata_Admin_Form_Filter_Type_DateService()
    {
        return $this->services['sonata.admin.form.filter.type.date'] = new \Sonata\AdminBundle\Form\Type\Filter\DateType(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.admin.form.filter.type.daterange' shared service.
     *
     * @return \Sonata\AdminBundle\Form\Type\Filter\DateRangeType
     */
    protected function getSonata_Admin_Form_Filter_Type_DaterangeService()
    {
        return $this->services['sonata.admin.form.filter.type.daterange'] = new \Sonata\AdminBundle\Form\Type\Filter\DateRangeType(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.admin.form.filter.type.datetime' shared service.
     *
     * @return \Sonata\AdminBundle\Form\Type\Filter\DateTimeType
     */
    protected function getSonata_Admin_Form_Filter_Type_DatetimeService()
    {
        return $this->services['sonata.admin.form.filter.type.datetime'] = new \Sonata\AdminBundle\Form\Type\Filter\DateTimeType(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.admin.form.filter.type.datetime_range' shared service.
     *
     * @return \Sonata\AdminBundle\Form\Type\Filter\DateTimeRangeType
     */
    protected function getSonata_Admin_Form_Filter_Type_DatetimeRangeService()
    {
        return $this->services['sonata.admin.form.filter.type.datetime_range'] = new \Sonata\AdminBundle\Form\Type\Filter\DateTimeRangeType(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.admin.form.filter.type.default' shared service.
     *
     * @return \Sonata\AdminBundle\Form\Type\Filter\DefaultType
     */
    protected function getSonata_Admin_Form_Filter_Type_DefaultService()
    {
        return $this->services['sonata.admin.form.filter.type.default'] = new \Sonata\AdminBundle\Form\Type\Filter\DefaultType();
    }

    /**
     * Gets the public 'sonata.admin.form.filter.type.number' shared service.
     *
     * @return \Sonata\AdminBundle\Form\Type\Filter\NumberType
     */
    protected function getSonata_Admin_Form_Filter_Type_NumberService()
    {
        return $this->services['sonata.admin.form.filter.type.number'] = new \Sonata\AdminBundle\Form\Type\Filter\NumberType(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.admin.form.type.admin' shared service.
     *
     * @return \Sonata\AdminBundle\Form\Type\AdminType
     */
    protected function getSonata_Admin_Form_Type_AdminService()
    {
        return $this->services['sonata.admin.form.type.admin'] = new \Sonata\AdminBundle\Form\Type\AdminType();
    }

    /**
     * Gets the public 'sonata.admin.form.type.collection' shared service.
     *
     * @return \Sonata\AdminBundle\Form\Type\CollectionType
     */
    protected function getSonata_Admin_Form_Type_CollectionService()
    {
        return $this->services['sonata.admin.form.type.collection'] = new \Sonata\AdminBundle\Form\Type\CollectionType();
    }

    /**
     * Gets the public 'sonata.admin.form.type.model_autocomplete' shared service.
     *
     * @return \Sonata\AdminBundle\Form\Type\ModelAutocompleteType
     */
    protected function getSonata_Admin_Form_Type_ModelAutocompleteService()
    {
        return $this->services['sonata.admin.form.type.model_autocomplete'] = new \Sonata\AdminBundle\Form\Type\ModelAutocompleteType();
    }

    /**
     * Gets the public 'sonata.admin.form.type.model_choice' shared service.
     *
     * @return \Sonata\AdminBundle\Form\Type\ModelType
     */
    protected function getSonata_Admin_Form_Type_ModelChoiceService()
    {
        return $this->services['sonata.admin.form.type.model_choice'] = new \Sonata\AdminBundle\Form\Type\ModelType(${($_ = isset($this->services['property_accessor']) ? $this->services['property_accessor'] : $this->get('property_accessor')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.admin.form.type.model_hidden' shared service.
     *
     * @return \Sonata\AdminBundle\Form\Type\ModelHiddenType
     */
    protected function getSonata_Admin_Form_Type_ModelHiddenService()
    {
        return $this->services['sonata.admin.form.type.model_hidden'] = new \Sonata\AdminBundle\Form\Type\ModelHiddenType();
    }

    /**
     * Gets the public 'sonata.admin.form.type.model_list' shared service.
     *
     * @return \Sonata\AdminBundle\Form\Type\ModelListType
     */
    protected function getSonata_Admin_Form_Type_ModelListService()
    {
        return $this->services['sonata.admin.form.type.model_list'] = new \Sonata\AdminBundle\Form\Type\ModelListType();
    }

    /**
     * Gets the public 'sonata.admin.form.type.model_reference' shared service.
     *
     * @return \Sonata\AdminBundle\Form\Type\ModelReferenceType
     */
    protected function getSonata_Admin_Form_Type_ModelReferenceService()
    {
        return $this->services['sonata.admin.form.type.model_reference'] = new \Sonata\AdminBundle\Form\Type\ModelReferenceType();
    }

    /**
     * Gets the public 'sonata.admin.global_template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getSonata_Admin_GlobalTemplateRegistryService()
    {
        return $this->services['sonata.admin.global_template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'sonata.admin.guesser.orm_datagrid' shared service.
     *
     * @return \Sonata\DoctrineORMAdminBundle\Guesser\FilterTypeGuesser
     */
    protected function getSonata_Admin_Guesser_OrmDatagridService()
    {
        return $this->services['sonata.admin.guesser.orm_datagrid'] = new \Sonata\DoctrineORMAdminBundle\Guesser\FilterTypeGuesser();
    }

    /**
     * Gets the public 'sonata.admin.guesser.orm_datagrid_chain' shared service.
     *
     * @return \Sonata\AdminBundle\Guesser\TypeGuesserChain
     */
    protected function getSonata_Admin_Guesser_OrmDatagridChainService()
    {
        return $this->services['sonata.admin.guesser.orm_datagrid_chain'] = new \Sonata\AdminBundle\Guesser\TypeGuesserChain(array(0 => ${($_ = isset($this->services['sonata.admin.guesser.orm_datagrid']) ? $this->services['sonata.admin.guesser.orm_datagrid'] : $this->get('sonata.admin.guesser.orm_datagrid')) && false ?: '_'}));
    }

    /**
     * Gets the public 'sonata.admin.guesser.orm_list' shared service.
     *
     * @return \Sonata\DoctrineORMAdminBundle\Guesser\TypeGuesser
     */
    protected function getSonata_Admin_Guesser_OrmListService()
    {
        return $this->services['sonata.admin.guesser.orm_list'] = new \Sonata\DoctrineORMAdminBundle\Guesser\TypeGuesser();
    }

    /**
     * Gets the public 'sonata.admin.guesser.orm_list_chain' shared service.
     *
     * @return \Sonata\AdminBundle\Guesser\TypeGuesserChain
     */
    protected function getSonata_Admin_Guesser_OrmListChainService()
    {
        return $this->services['sonata.admin.guesser.orm_list_chain'] = new \Sonata\AdminBundle\Guesser\TypeGuesserChain(array(0 => ${($_ = isset($this->services['sonata.admin.guesser.orm_list']) ? $this->services['sonata.admin.guesser.orm_list'] : $this->get('sonata.admin.guesser.orm_list')) && false ?: '_'}));
    }

    /**
     * Gets the public 'sonata.admin.guesser.orm_show' shared service.
     *
     * @return \Sonata\DoctrineORMAdminBundle\Guesser\TypeGuesser
     */
    protected function getSonata_Admin_Guesser_OrmShowService()
    {
        return $this->services['sonata.admin.guesser.orm_show'] = new \Sonata\DoctrineORMAdminBundle\Guesser\TypeGuesser();
    }

    /**
     * Gets the public 'sonata.admin.guesser.orm_show_chain' shared service.
     *
     * @return \Sonata\AdminBundle\Guesser\TypeGuesserChain
     */
    protected function getSonata_Admin_Guesser_OrmShowChainService()
    {
        return $this->services['sonata.admin.guesser.orm_show_chain'] = new \Sonata\AdminBundle\Guesser\TypeGuesserChain(array(0 => ${($_ = isset($this->services['sonata.admin.guesser.orm_show']) ? $this->services['sonata.admin.guesser.orm_show'] : $this->get('sonata.admin.guesser.orm_show')) && false ?: '_'}));
    }

    /**
     * Gets the public 'sonata.admin.helper' shared service.
     *
     * @return \Sonata\AdminBundle\Admin\AdminHelper
     */
    protected function getSonata_Admin_HelperService()
    {
        return $this->services['sonata.admin.helper'] = new \Sonata\AdminBundle\Admin\AdminHelper(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.admin.label.strategy.bc' shared service.
     *
     * @return \Sonata\AdminBundle\Translator\BCLabelTranslatorStrategy
     */
    protected function getSonata_Admin_Label_Strategy_BcService()
    {
        return $this->services['sonata.admin.label.strategy.bc'] = new \Sonata\AdminBundle\Translator\BCLabelTranslatorStrategy();
    }

    /**
     * Gets the public 'sonata.admin.label.strategy.form_component' shared service.
     *
     * @return \Sonata\AdminBundle\Translator\FormLabelTranslatorStrategy
     */
    protected function getSonata_Admin_Label_Strategy_FormComponentService()
    {
        return $this->services['sonata.admin.label.strategy.form_component'] = new \Sonata\AdminBundle\Translator\FormLabelTranslatorStrategy();
    }

    /**
     * Gets the public 'sonata.admin.label.strategy.native' shared service.
     *
     * @return \Sonata\AdminBundle\Translator\NativeLabelTranslatorStrategy
     */
    protected function getSonata_Admin_Label_Strategy_NativeService()
    {
        return $this->services['sonata.admin.label.strategy.native'] = new \Sonata\AdminBundle\Translator\NativeLabelTranslatorStrategy();
    }

    /**
     * Gets the public 'sonata.admin.label.strategy.noop' shared service.
     *
     * @return \Sonata\AdminBundle\Translator\NoopLabelTranslatorStrategy
     */
    protected function getSonata_Admin_Label_Strategy_NoopService()
    {
        return $this->services['sonata.admin.label.strategy.noop'] = new \Sonata\AdminBundle\Translator\NoopLabelTranslatorStrategy();
    }

    /**
     * Gets the public 'sonata.admin.label.strategy.underscore' shared service.
     *
     * @return \Sonata\AdminBundle\Translator\UnderscoreLabelTranslatorStrategy
     */
    protected function getSonata_Admin_Label_Strategy_UnderscoreService()
    {
        return $this->services['sonata.admin.label.strategy.underscore'] = new \Sonata\AdminBundle\Translator\UnderscoreLabelTranslatorStrategy();
    }

    /**
     * Gets the public 'sonata.admin.lock.extension' shared service.
     *
     * @return \Sonata\AdminBundle\Admin\Extension\LockExtension
     */
    protected function getSonata_Admin_Lock_ExtensionService()
    {
        return $this->services['sonata.admin.lock.extension'] = new \Sonata\AdminBundle\Admin\Extension\LockExtension();
    }

    /**
     * Gets the public 'sonata.admin.manager.orm' shared service.
     *
     * @return \Sonata\DoctrineORMAdminBundle\Model\ModelManager
     */
    protected function getSonata_Admin_Manager_OrmService()
    {
        return $this->services['sonata.admin.manager.orm'] = new \Sonata\DoctrineORMAdminBundle\Model\ModelManager(${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.admin.manipulator.acl.admin' shared service.
     *
     * @return \Sonata\AdminBundle\Util\AdminAclManipulator
     */
    protected function getSonata_Admin_Manipulator_Acl_AdminService()
    {
        return $this->services['sonata.admin.manipulator.acl.admin'] = new \Sonata\AdminBundle\Util\AdminAclManipulator('Sonata\\AdminBundle\\Security\\Acl\\Permission\\MaskBuilder');
    }

    /**
     * Gets the public 'sonata.admin.manipulator.acl.object.orm' shared service.
     *
     * @return \Sonata\DoctrineORMAdminBundle\Util\ObjectAclManipulator
     */
    protected function getSonata_Admin_Manipulator_Acl_Object_OrmService()
    {
        return $this->services['sonata.admin.manipulator.acl.object.orm'] = new \Sonata\DoctrineORMAdminBundle\Util\ObjectAclManipulator();
    }

    /**
     * Gets the public 'sonata.admin.menu.matcher.voter.active' shared service.
     *
     * @return \Sonata\AdminBundle\Menu\Matcher\Voter\ActiveVoter
     */
    protected function getSonata_Admin_Menu_Matcher_Voter_ActiveService()
    {
        return $this->services['sonata.admin.menu.matcher.voter.active'] = new \Sonata\AdminBundle\Menu\Matcher\Voter\ActiveVoter();
    }

    /**
     * Gets the public 'sonata.admin.menu.matcher.voter.admin' shared service.
     *
     * @return \Sonata\AdminBundle\Menu\Matcher\Voter\AdminVoter
     */
    protected function getSonata_Admin_Menu_Matcher_Voter_AdminService()
    {
        return $this->services['sonata.admin.menu.matcher.voter.admin'] = new \Sonata\AdminBundle\Menu\Matcher\Voter\AdminVoter(${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.admin.menu.matcher.voter.children' shared service.
     *
     * @return \Sonata\AdminBundle\Menu\Matcher\Voter\ChildrenVoter
     *
     * @deprecated The "sonata.admin.menu.matcher.voter.children" service is deprecated since 3.28 and will be removed in 4.0.
     */
    protected function getSonata_Admin_Menu_Matcher_Voter_ChildrenService()
    {
        @trigger_error('The "sonata.admin.menu.matcher.voter.children" service is deprecated since 3.28 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['sonata.admin.menu.matcher.voter.children'] = new \Sonata\AdminBundle\Menu\Matcher\Voter\ChildrenVoter(${($_ = isset($this->services['knp_menu.matcher']) ? $this->services['knp_menu.matcher'] : $this->get('knp_menu.matcher')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.admin.menu_builder' shared service.
     *
     * @return \Sonata\AdminBundle\Menu\MenuBuilder
     */
    protected function getSonata_Admin_MenuBuilderService()
    {
        return $this->services['sonata.admin.menu_builder'] = new \Sonata\AdminBundle\Menu\MenuBuilder(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'}, ${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'}, ${($_ = isset($this->services['knp_menu.menu_provider']) ? $this->services['knp_menu.menu_provider'] : $this->get('knp_menu.menu_provider')) && false ?: '_'}, ${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.admin.object.manipulator.acl.admin' shared service.
     *
     * @return \Sonata\AdminBundle\Util\AdminObjectAclManipulator
     */
    protected function getSonata_Admin_Object_Manipulator_Acl_AdminService()
    {
        return $this->services['sonata.admin.object.manipulator.acl.admin'] = new \Sonata\AdminBundle\Util\AdminObjectAclManipulator(${($_ = isset($this->services['form.factory']) ? $this->services['form.factory'] : $this->get('form.factory')) && false ?: '_'}, 'Sonata\\AdminBundle\\Security\\Acl\\Permission\\MaskBuilder');
    }

    /**
     * Gets the public 'sonata.admin.orm.filter.type.boolean' service.
     *
     * @return \Sonata\DoctrineORMAdminBundle\Filter\BooleanFilter
     */
    protected function getSonata_Admin_Orm_Filter_Type_BooleanService()
    {
        return new \Sonata\DoctrineORMAdminBundle\Filter\BooleanFilter();
    }

    /**
     * Gets the public 'sonata.admin.orm.filter.type.callback' service.
     *
     * @return \Sonata\DoctrineORMAdminBundle\Filter\CallbackFilter
     */
    protected function getSonata_Admin_Orm_Filter_Type_CallbackService()
    {
        return new \Sonata\DoctrineORMAdminBundle\Filter\CallbackFilter();
    }

    /**
     * Gets the public 'sonata.admin.orm.filter.type.choice' service.
     *
     * @return \Sonata\DoctrineORMAdminBundle\Filter\ChoiceFilter
     */
    protected function getSonata_Admin_Orm_Filter_Type_ChoiceService()
    {
        return new \Sonata\DoctrineORMAdminBundle\Filter\ChoiceFilter();
    }

    /**
     * Gets the public 'sonata.admin.orm.filter.type.class' service.
     *
     * @return \Sonata\DoctrineORMAdminBundle\Filter\ClassFilter
     */
    protected function getSonata_Admin_Orm_Filter_Type_ClassService()
    {
        return new \Sonata\DoctrineORMAdminBundle\Filter\ClassFilter();
    }

    /**
     * Gets the public 'sonata.admin.orm.filter.type.date' service.
     *
     * @return \Sonata\DoctrineORMAdminBundle\Filter\DateFilter
     */
    protected function getSonata_Admin_Orm_Filter_Type_DateService()
    {
        return new \Sonata\DoctrineORMAdminBundle\Filter\DateFilter();
    }

    /**
     * Gets the public 'sonata.admin.orm.filter.type.date_range' service.
     *
     * @return \Sonata\DoctrineORMAdminBundle\Filter\DateRangeFilter
     */
    protected function getSonata_Admin_Orm_Filter_Type_DateRangeService()
    {
        return new \Sonata\DoctrineORMAdminBundle\Filter\DateRangeFilter();
    }

    /**
     * Gets the public 'sonata.admin.orm.filter.type.datetime' service.
     *
     * @return \Sonata\DoctrineORMAdminBundle\Filter\DateTimeFilter
     */
    protected function getSonata_Admin_Orm_Filter_Type_DatetimeService()
    {
        return new \Sonata\DoctrineORMAdminBundle\Filter\DateTimeFilter();
    }

    /**
     * Gets the public 'sonata.admin.orm.filter.type.datetime_range' service.
     *
     * @return \Sonata\DoctrineORMAdminBundle\Filter\DateTimeRangeFilter
     */
    protected function getSonata_Admin_Orm_Filter_Type_DatetimeRangeService()
    {
        return new \Sonata\DoctrineORMAdminBundle\Filter\DateTimeRangeFilter();
    }

    /**
     * Gets the public 'sonata.admin.orm.filter.type.model' service.
     *
     * @return \Sonata\DoctrineORMAdminBundle\Filter\ModelFilter
     */
    protected function getSonata_Admin_Orm_Filter_Type_ModelService()
    {
        return new \Sonata\DoctrineORMAdminBundle\Filter\ModelFilter();
    }

    /**
     * Gets the public 'sonata.admin.orm.filter.type.model_autocomplete' service.
     *
     * @return \Sonata\DoctrineORMAdminBundle\Filter\ModelAutocompleteFilter
     */
    protected function getSonata_Admin_Orm_Filter_Type_ModelAutocompleteService()
    {
        return new \Sonata\DoctrineORMAdminBundle\Filter\ModelAutocompleteFilter();
    }

    /**
     * Gets the public 'sonata.admin.orm.filter.type.number' service.
     *
     * @return \Sonata\DoctrineORMAdminBundle\Filter\NumberFilter
     */
    protected function getSonata_Admin_Orm_Filter_Type_NumberService()
    {
        return new \Sonata\DoctrineORMAdminBundle\Filter\NumberFilter();
    }

    /**
     * Gets the public 'sonata.admin.orm.filter.type.string' service.
     *
     * @return \Sonata\DoctrineORMAdminBundle\Filter\StringFilter
     */
    protected function getSonata_Admin_Orm_Filter_Type_StringService()
    {
        return new \Sonata\DoctrineORMAdminBundle\Filter\StringFilter();
    }

    /**
     * Gets the public 'sonata.admin.orm.filter.type.time' service.
     *
     * @return \Sonata\DoctrineORMAdminBundle\Filter\TimeFilter
     */
    protected function getSonata_Admin_Orm_Filter_Type_TimeService()
    {
        return new \Sonata\DoctrineORMAdminBundle\Filter\TimeFilter();
    }

    /**
     * Gets the public 'sonata.admin.pool' shared service.
     *
     * @return \Sonata\AdminBundle\Admin\Pool
     */
    protected function getSonata_Admin_PoolService()
    {
        $this->services['sonata.admin.pool'] = $instance = new \Sonata\AdminBundle\Admin\Pool($this, 'SIUNIC ETECSA', 'logo_etecsa.jpg', array('title_mode' => 'both', 'html5_validate' => true, 'pager_links' => 5, 'sort_admins' => false, 'confirm_exit' => true, 'use_select2' => true, 'use_icheck' => true, 'use_bootlint' => false, 'use_stickyforms' => true, 'form_type' => 'standard', 'dropdown_number_groups_per_colums' => 2, 'lock_protection' => true, 'enable_jms_di_extra_autoregistration' => true, 'javascripts' => array(0 => 'bundles/sonatacore/vendor/jquery/dist/jquery.js', 1 => 'bundles/sonatacore/vendor/moment/min/moment.min.js', 2 => 'bundles/sonatacore/vendor/bootstrap/dist/js/bootstrap.js', 3 => 'bundles/sonatacore/vendor/select2/select2.js', 4 => 'bundles/sonatacore/vendor/eonasdan-bootstrap-datetimepicker/build/js/bootstrap-datetimepicker.min.js', 5 => 'bundles/sonataadmin/vendor/jqueryui/ui/minified/jquery-ui.min.js', 6 => 'bundles/sonataadmin/vendor/jqueryui/ui/minified/i18n/jquery-ui-i18n.min.js', 7 => 'bundles/sonataadmin/vendor/jquery-form/jquery.form.js', 8 => 'bundles/sonataadmin/jquery/jquery.confirmExit.js', 9 => 'bundles/sonataadmin/vendor/jquery.scrollTo/jquery.scrollTo.js', 10 => 'bundles/sonataadmin/vendor/waypoints/lib/jquery.waypoints.min.js', 11 => 'bundles/sonataadmin/vendor/waypoints/lib/shortcuts/sticky.min.js', 12 => 'bundles/sonataadmin/vendor/x-editable/dist/bootstrap3-editable/js/bootstrap-editable.js', 13 => 'bundles/sonataadmin/vendor/iCheck/icheck.min.js', 14 => 'bundles/sonataadmin/vendor/slimScroll/jquery.slimscroll.min.js', 15 => 'bundles/sonataadmin/vendor/admin-lte/dist/js/app.min.js', 16 => 'bundles/sonataadmin/Admin.js', 17 => 'bundles/sonataadmin/treeview.js', 18 => 'bundles/sonataformatter/vendor/markitup-markitup/markitup/jquery.markitup.js', 19 => 'bundles/sonataformatter/markitup/sets/markdown/set.js', 20 => 'bundles/sonataformatter/markitup/sets/html/set.js', 21 => 'bundles/sonataformatter/markitup/sets/textile/set.js', 22 => 'bundles/sonataformatter/vendor/ckeditor/ckeditor.js', 23 => 'assets/vendor/hinclude/hinclude.js', 24 => 'assets/vendor/bootstrap3-wysihtml5/lib/js/wysihtml5-0.3.0.js', 25 => 'assets/vendor/bootstrap3-wysihtml5/src/bootstrap3-wysihtml5.js', 26 => 'assets/vendor/bootstrap-colorpicker/dist/js/bootstrap-colorpicker.min.js'), 'stylesheets' => array(0 => 'bundles/sonatacore/vendor/bootstrap/dist/css/bootstrap.min.css', 1 => 'bundles/sonatacore/vendor/components-font-awesome/css/font-awesome.min.css', 2 => 'bundles/sonatacore/vendor/ionicons/css/ionicons.min.css', 3 => 'bundles/sonatacore/vendor/eonasdan-bootstrap-datetimepicker/build/css/bootstrap-datetimepicker.min.css', 4 => 'bundles/sonatacore/vendor/select2/select2.css', 5 => 'bundles/sonatacore/vendor/select2/select2-bootstrap.css', 6 => 'bundles/sonataadmin/vendor/jqueryui/themes/base/jquery-ui.css', 7 => 'bundles/sonataadmin/vendor/jqueryui/themes/flick/jquery-ui.min.css', 8 => 'bundles/sonataadmin/vendor/admin-lte/dist/css/AdminLTE.css', 9 => 'bundles/sonataadmin/vendor/iCheck/skins/square/blue.css', 10 => 'bundles/sonataadmin/vendor/x-editable/dist/bootstrap3-editable/css/bootstrap-editable.css', 11 => 'bundles/sonataadmin/css/styles.css', 12 => 'bundles/sonataadmin/css/layout.css', 13 => 'bundles/sonataadmin/css/tree.css', 14 => 'bundles/sonataformatter/markitup/skins/sonata/style.css', 15 => 'bundles/sonataformatter/markitup/sets/markdown/style.css', 16 => 'bundles/sonataformatter/markitup/sets/html/style.css', 17 => 'bundles/sonataformatter/markitup/sets/textile/style.css', 18 => 'bundles/sonataadmin/vendor/admin-lte/dist/css/skins/skin-purple.min.css', 19 => 'bundles/sonataadmin/vendor/admin-lte/dist/css/skins/skin-purple.min.css', 20 => 'assets/vendor/bootstrap3-wysihtml5/src/bootstrap-wysihtml5.css', 21 => 'assets/vendor/bootstrap-colorpicker/dist/css/bootstrap-colorpicker.min.css'), 'role_admin' => 'ROLE_SONATA_ADMIN', 'role_super_admin' => 'ROLE_SUPER_ADMIN', 'search' => true), ${($_ = isset($this->services['property_accessor']) ? $this->services['property_accessor'] : $this->get('property_accessor')) && false ?: '_'});

        $instance->setTemplateRegistry(${($_ = isset($this->services['sonata.admin.global_template_registry']) ? $this->services['sonata.admin.global_template_registry'] : $this->get('sonata.admin.global_template_registry')) && false ?: '_'});
        $instance->setAdminServiceIds(array(0 => 'data_dog_audit.admin.audit_log', 1 => 'sonata.user.admin.user', 2 => 'sonata.user.admin.group', 3 => 'sonata.media.admin.media', 4 => 'sonata.media.admin.gallery', 5 => 'sonata.media.admin.gallery_has_media', 6 => 'sonata.classification.admin.category', 7 => 'sonata.classification.admin.tag', 8 => 'sonata.classification.admin.collection', 9 => 'sonata.classification.admin.context', 10 => 'app.admin.empresa', 11 => 'app.admin.organismos', 12 => 'app.admin.personas', 13 => 'app.admin.anexo1.contrato.areas.internet', 14 => 'app.admin.anexo1.contrato.arrendamiento.espacios', 15 => 'app.admin.anexo1.contrato.arrendamiento.pizarras.privadas.pbx', 16 => 'app.admin.anexo1.contrato.arrendamiento.redes', 17 => 'app.admin.anexo1.contrato.compra.venta', 18 => 'app.admin.anexo1.contrato.compra.venta.pizarra', 19 => 'app.admin.anexo1.contrato.contactos.telefonicos', 20 => 'app.admin.anexo1.contrato.mantenimiento.pizarra.pbx', 21 => 'app.admin.anexo2.contrato.areas.internet', 22 => 'app.admin.anexo2.contrato.arrendamiento.redes', 23 => 'app.admin.anexo2.contrato.instalacion.pizarra.pbx', 24 => 'app.admin.anexo2.contrato.recarga.por.pos', 25 => 'app.admin.datos.cuentas.bancarias.etecsa', 26 => 'app.admin.anexo4.contrato.agencia', 27 => 'app.admin.anexo4.arrendamiento.espacios', 28 => 'app.admin.anexo4.contrato.compra.venta', 29 => 'app.admin.anexo4.contrato.recarga.por.pos', 30 => 'app.admin.anexo5.contrato.agencia', 31 => 'app.admin.anexo5.arrendaminto.espacios', 32 => 'app.admin.anexo5.contrato.areas.internet', 33 => 'app.admin.anexocps.conexion.centrales.telefonicas', 34 => 'app.admin.anexocps.levantamiento.redes.tecnicas', 35 => 'app.admin.anexocps.servicios.terceros', 36 => 'app.admin.contrato.agencia.persona.juridica', 37 => 'app.admin.contrato.areas.internet', 38 => 'app.admin.contrato.arrendamiento.espacios', 39 => 'app.admin.contrato.arrendamiento.pizarra.privada.pbx', 40 => 'app.admin.contrato.arrendamiento.redes', 41 => 'app.admin.contrato.compra.venta', 42 => 'app.admin.contrato.instalacion.pizarra.pbx', 43 => 'app.admin.contrato.mantenimiento.pizarra.pbx', 44 => 'app.admin.contrato.prestacion.servicios', 45 => 'app.admin.contrato.recarga.por.pos', 46 => 'app.admin.descripcion.productos.servicios', 47 => 'app.admin.facilidades.del.equipo', 48 => 'app.admin.grupos.electrogenos', 49 => 'app.admin.locales', 50 => 'app.admin.mantenimiento.correctivo', 51 => 'app.admin.mantenimiento.preventivo', 52 => 'app.admin.pizarra.pbx', 53 => 'app.admin.protecciones.tierra', 54 => 'app.admin.relacion.antenas.a4', 55 => 'app.admin.relacion.bastidores', 56 => 'app.admin.relacion.equipos', 57 => 'app.admin.relacion.iluminacion.tomacorriente', 58 => 'app.admin.relacion.mastiles.a4', 59 => 'app.admin.relacion.terminaciones.bastidor', 60 => 'app.admin.relacion.torres.a4', 61 => 'app.admin.relacion.vias', 62 => 'app.admin.sistema.corriente.directa', 63 => 'app.admin.sistema.iluminacion.a5', 64 => 'app.admin.sistemas.corriente.alterna', 65 => 'app.admin.tarifas.espacios.arrendados', 66 => 'app.admin.terminaciones', 67 => 'app.admin.tipos.de.mantenimientos', 68 => 'app.admin.tipos.distancias.arrendadas', 69 => 'app.admin.tipos.mantenimientos.correctivos', 70 => 'app.admin.tomacorrientes', 71 => 'app.admin.descripcion.productos.contratados', 72 => 'app.admin.contrato.contactos.telefonicos', 73 => 'app.admin.equipamiento.gsm.pos', 74 => 'app.admin.tarjetas.sim', 75 => 'app.admin.tarifas.conexion.pizarras', 76 => 'app.admin.contrato.comp.vent.pizarra'));
        $instance->setAdminGroups(array('sonata.admin.group.administration' => array('label' => 'sonata_administration', 'label_catalogue' => 'SonataAdminBundle', 'icon' => '<i class="glyphicon glyphicon-user"></i>', 'items' => array(), 'on_top' => false, 'keep_open' => false, 'item_adds' => array(), 'roles' => array()), 'sonata.admin.group.site_builder' => array('label' => 'sonata_page', 'label_catalogue' => 'SonataPageBundle', 'icon' => '<i class="fa fa-puzzle-piece"></i>', 'items' => array(), 'on_top' => false, 'keep_open' => false, 'item_adds' => array(), 'roles' => array()), 'sonata.admin.group.classification' => array('label' => 'sonata_classification', 'label_catalogue' => 'SonataClassificationBundle', 'icon' => '<i class="fa fa-sitemap"></i>', 'items' => array(), 'on_top' => false, 'keep_open' => false, 'item_adds' => array(), 'roles' => array()), 'sonata.admin.group.content' => array('label' => 'sonata_media', 'label_catalogue' => 'SonataMediaBundle', 'icon' => '<i class="fa fa-th"></i>', 'items' => array(), 'on_top' => false, 'keep_open' => false, 'item_adds' => array(), 'roles' => array()), 'administration' => array('label' => 'sonata_administration', 'label_catalogue' => 'SonataAdminBundle', 'icon' => '<i class="glyphicon glyphicon-user"></i>', 'items' => array(0 => array('admin' => 'sonata.user.admin.user', 'label' => '', 'route' => '', 'route_params' => array(), 'route_absolute' => false, 'roles' => array()), 1 => array('admin' => 'sonata.user.admin.group', 'label' => '', 'route' => '', 'route_params' => array(), 'route_absolute' => false, 'roles' => array()), 2 => array('admin' => 'data_dog_audit.admin.audit_log', 'label' => '', 'route' => '', 'route_params' => array(), 'route_absolute' => false, 'roles' => array())), 'on_top' => false, 'keep_open' => false, 'item_adds' => array(), 'roles' => array()), 'admin' => array('label' => 'admin.dashboard.menu.admin.label', 'label_catalogue' => 'AppBundle', 'icon' => '<i class="fa fa-list-alt"></i>', 'roles' => array(0 => 'ROLE_ADMIN'), 'items' => array(), 'on_top' => false, 'keep_open' => false, 'item_adds' => array()), 'general' => array('label' => 'Datos Generales', 'label_catalogue' => 'AppBundle', 'icon' => '<i class="fa fa-list-alt"></i>', 'roles' => array(0 => 'ROLE_ADMIN', 1 => 'ROLE_USER'), 'items' => array(0 => array('admin' => 'app.admin.empresa', 'label' => 'Empresa', 'route' => '', 'route_params' => array(), 'route_absolute' => false), 1 => array('admin' => 'app.admin.organismos', 'label' => 'Organismos', 'route' => '', 'route_params' => array(), 'route_absolute' => false), 2 => array('admin' => 'app.admin.personas', 'label' => 'Personas', 'route' => '', 'route_params' => array(), 'route_absolute' => false), 3 => array('admin' => 'app.admin.pizarra.pbx', 'label' => 'Pizarras PBX', 'route' => '', 'route_params' => array(), 'route_absolute' => false)), 'on_top' => false, 'keep_open' => false, 'item_adds' => array()), 'contrato_agencia' => array('label' => 'Contratos Agencia Persona Jurídica', 'label_catalogue' => 'AppBundle', 'icon' => '<i class="fa fa-list-alt"></i>', 'roles' => array(0 => 'ROLE_USER'), 'items' => array(0 => array('admin' => 'app.admin.datos.cuentas.bancarias.etecsa', 'label' => 'Datos de las Cuentas Bancarias de ETECSA', 'route' => '', 'route_params' => array(), 'route_absolute' => false), 1 => array('admin' => 'app.admin.anexo4.contrato.agencia', 'label' => 'Puntos de atencion al agente', 'route' => '', 'route_params' => array(), 'route_absolute' => false), 2 => array('admin' => 'app.admin.anexo5.contrato.agencia', 'label' => 'Puntos de comercialización del agente', 'route' => '', 'route_params' => array(), 'route_absolute' => false), 3 => array('admin' => 'app.admin.contrato.agencia.persona.juridica', 'label' => 'Contratos Agencia Persona Juridica', 'route' => '', 'route_params' => array(), 'route_absolute' => false)), 'on_top' => false, 'keep_open' => false, 'item_adds' => array()), 'contrato_areas' => array('label' => 'Contratos Áreas de Internet', 'label_catalogue' => 'AppBundle', 'icon' => '<i class="fa fa-list-alt"></i>', 'roles' => array(0 => 'ROLE_USER'), 'items' => array(0 => array('admin' => 'app.admin.anexo1.contrato.areas.internet', 'label' => 'Tarifas y Distribución de Ingresos.', 'route' => '', 'route_params' => array(), 'route_absolute' => false), 1 => array('admin' => 'app.admin.anexo2.contrato.areas.internet', 'label' => 'Aportes de las Partes', 'route' => '', 'route_params' => array(), 'route_absolute' => false), 2 => array('admin' => 'app.admin.anexo5.contrato.areas.internet', 'label' => 'Punto de comercialización.', 'route' => '', 'route_params' => array(), 'route_absolute' => false), 3 => array('admin' => 'app.admin.contrato.areas.internet', 'label' => 'Contratos Areas Internet', 'route' => '', 'route_params' => array(), 'route_absolute' => false)), 'on_top' => false, 'keep_open' => false, 'item_adds' => array()), 'contrato_arrendamiento_pizarra' => array('label' => 'Contratos Arrendamiento de Pizarras', 'label_catalogue' => 'AppBundle', 'icon' => '<i class="fa fa-list-alt"></i>', 'roles' => array(0 => 'ROLE_USER'), 'items' => array(0 => array('admin' => 'app.admin.anexo1.contrato.arrendamiento.pizarras.privadas.pbx', 'label' => 'Anexo 1 Contrato Arrendamiento Pizarras', 'route' => '', 'route_params' => array(), 'route_absolute' => false), 1 => array('admin' => 'app.admin.contrato.arrendamiento.pizarra.privada.pbx', 'label' => 'Contratos Arrendamiento Pizarras Privadas', 'route' => '', 'route_params' => array(), 'route_absolute' => false)), 'on_top' => false, 'keep_open' => false, 'item_adds' => array()), 'contrato_arrendamiento_redes' => array('label' => 'Contratos Arrendamiento de Redes', 'label_catalogue' => 'AppBundle', 'icon' => '<i class="fa fa-list-alt"></i>', 'roles' => array(0 => 'ROLE_USER'), 'items' => array(0 => array('admin' => 'app.admin.anexo1.contrato.arrendamiento.redes', 'label' => 'Tarifas para el arrendamiento de Redes', 'route' => '', 'route_params' => array(), 'route_absolute' => false), 1 => array('admin' => 'app.admin.anexo2.contrato.arrendamiento.redes', 'label' => 'Relación de tramos de Redes', 'route' => '', 'route_params' => array(), 'route_absolute' => false), 2 => array('admin' => 'app.admin.contrato.arrendamiento.redes', 'label' => 'Contratos Arrendamiento de Redes', 'route' => '', 'route_params' => array(), 'route_absolute' => false), 3 => array('admin' => 'app.admin.tipos.distancias.arrendadas', 'label' => 'Tipos de distancias arrendadas', 'route' => '', 'route_params' => array(), 'route_absolute' => false)), 'on_top' => false, 'keep_open' => false, 'item_adds' => array()), 'contrato_compra_venta_pizarra' => array('label' => 'Contratos Compra Venta Pizarras', 'label_catalogue' => 'AppBundle', 'icon' => '<i class="fa fa-list-alt"></i>', 'roles' => array(0 => 'ROLE_USER'), 'items' => array(0 => array('admin' => 'app.admin.anexo1.contrato.compra.venta.pizarra', 'label' => 'Anexo 1 Contrato Compra Venta Pizarra', 'route' => '', 'route_params' => array(), 'route_absolute' => false), 1 => array('admin' => 'app.admin.descripcion.productos.contratados', 'label' => 'Descripción Productos Contratados', 'route' => '', 'route_params' => array(), 'route_absolute' => false), 2 => array('admin' => 'app.admin.contrato.comp.vent.pizarra', 'label' => 'Contratos Compra Venta de Pizarras', 'route' => '', 'route_params' => array(), 'route_absolute' => false)), 'on_top' => false, 'keep_open' => false, 'item_adds' => array()), 'contrato_compra_venta' => array('label' => 'Contratos Compra Venta', 'label_catalogue' => 'AppBundle', 'icon' => '<i class="fa fa-list-alt"></i>', 'roles' => array(0 => 'ROLE_USER'), 'items' => array(0 => array('admin' => 'app.admin.anexo1.contrato.compra.venta', 'label' => 'Descripción de los productos', 'route' => '', 'route_params' => array(), 'route_absolute' => false), 1 => array('admin' => 'app.admin.anexo4.contrato.compra.venta', 'label' => 'Puntos de Comercialización por ETECSA', 'route' => '', 'route_params' => array(), 'route_absolute' => false), 2 => array('admin' => 'app.admin.contrato.compra.venta', 'label' => 'Contratos Compra Venta', 'route' => '', 'route_params' => array(), 'route_absolute' => false)), 'on_top' => false, 'keep_open' => false, 'item_adds' => array()), 'contrato_instalacion_pizarra' => array('label' => 'Contratos Instalacion de Pizarras', 'label_catalogue' => 'AppBundle', 'icon' => '<i class="fa fa-list-alt"></i>', 'roles' => array(0 => 'ROLE_USER'), 'items' => array(0 => array('admin' => 'app.admin.anexo2.contrato.instalacion.pizarra.pbx', 'label' => 'Equipos Contratados', 'route' => '', 'route_params' => array(), 'route_absolute' => false), 1 => array('admin' => 'app.admin.contrato.instalacion.pizarra.pbx', 'label' => 'Contratos Instalacion Pizarra', 'route' => '', 'route_params' => array(), 'route_absolute' => false)), 'on_top' => false, 'keep_open' => false, 'item_adds' => array()), 'contrato_mantenimiento_pizarra' => array('label' => 'Contratos Mantenimiento de Pizarras', 'label_catalogue' => 'AppBundle', 'icon' => '<i class="fa fa-list-alt"></i>', 'roles' => array(0 => 'ROLE_USER'), 'items' => array(0 => array('admin' => 'app.admin.anexo1.contrato.mantenimiento.pizarra.pbx', 'label' => 'Anexo 1 Contrato Mantenimiento Pizarras', 'route' => '', 'route_params' => array(), 'route_absolute' => false), 1 => array('admin' => 'app.admin.contrato.mantenimiento.pizarra.pbx', 'label' => 'Contratos Mantenimiento Pizarra', 'route' => '', 'route_params' => array(), 'route_absolute' => false), 2 => array('admin' => 'app.admin.mantenimiento.correctivo', 'label' => 'Mantenimiento Correctivo', 'route' => '', 'route_params' => array(), 'route_absolute' => false), 3 => array('admin' => 'app.admin.mantenimiento.preventivo', 'label' => 'Mantenimiento Preventivo', 'route' => '', 'route_params' => array(), 'route_absolute' => false), 4 => array('admin' => 'app.admin.tipos.de.mantenimientos', 'label' => 'Tipos de Mantenimientos', 'route' => '', 'route_params' => array(), 'route_absolute' => false), 5 => array('admin' => 'app.admin.tipos.mantenimientos.correctivos', 'label' => 'Tipos Mantenimientos Correctivos', 'route' => '', 'route_params' => array(), 'route_absolute' => false)), 'on_top' => false, 'keep_open' => false, 'item_adds' => array()), 'contrato_prestacion_servicios_ct' => array('label' => 'Contratos Prestacion de Servicios CT', 'label_catalogue' => 'AppBundle', 'icon' => '<i class="fa fa-list-alt"></i>', 'roles' => array(0 => 'ROLE_USER'), 'items' => array(0 => array('admin' => 'app.admin.anexo1.contrato.contactos.telefonicos', 'label' => 'Especificaciones del Servicio', 'route' => '', 'route_params' => array(), 'route_absolute' => false), 1 => array('admin' => 'app.admin.contrato.contactos.telefonicos', 'label' => 'Contratos Contactos Telefonicos', 'route' => '', 'route_params' => array(), 'route_absolute' => false)), 'on_top' => false, 'keep_open' => false, 'item_adds' => array()), 'contrato_prestacion_servicios' => array('label' => 'Contratos Prestacion de Servicios', 'label_catalogue' => 'AppBundle', 'icon' => '<i class="fa fa-list-alt"></i>', 'roles' => array(0 => 'ROLE_USER'), 'items' => array(0 => array('admin' => 'app.admin.anexocps.conexion.centrales.telefonicas', 'label' => 'Conexion Centrales Telefonicos', 'route' => '', 'route_params' => array(), 'route_absolute' => false), 1 => array('admin' => 'app.admin.anexocps.levantamiento.redes.tecnicas', 'label' => 'Levantamiento Redes Tecnicas', 'route' => '', 'route_params' => array(), 'route_absolute' => false), 2 => array('admin' => 'app.admin.anexocps.servicios.terceros', 'label' => 'Servicios a Terceros', 'route' => '', 'route_params' => array(), 'route_absolute' => false), 3 => array('admin' => 'app.admin.contrato.prestacion.servicios', 'label' => 'Contratos Prestacion Servicios', 'route' => '', 'route_params' => array(), 'route_absolute' => false), 4 => array('admin' => 'app.admin.tarifas.conexion.pizarras', 'label' => 'Tarifas Conexion Pizarras', 'route' => '', 'route_params' => array(), 'route_absolute' => false)), 'on_top' => false, 'keep_open' => false, 'item_adds' => array()), 'contrato_recarga_pos' => array('label' => 'Contratos Recarga por POS', 'label_catalogue' => 'AppBundle', 'icon' => '<i class="fa fa-list-alt"></i>', 'roles' => array(0 => 'ROLE_USER'), 'items' => array(0 => array('admin' => 'app.admin.anexo2.contrato.recarga.por.pos', 'label' => 'Puntos de Ventas del Cliente', 'route' => '', 'route_params' => array(), 'route_absolute' => false), 1 => array('admin' => 'app.admin.anexo4.contrato.recarga.por.pos', 'label' => 'Acta de Entrega', 'route' => '', 'route_params' => array(), 'route_absolute' => false), 2 => array('admin' => 'app.admin.contrato.recarga.por.pos', 'label' => 'Contratos Recarga por POS', 'route' => '', 'route_params' => array(), 'route_absolute' => false), 3 => array('admin' => 'app.admin.equipamiento.gsm.pos', 'label' => 'Equipamiento GSM', 'route' => '', 'route_params' => array(), 'route_absolute' => false), 4 => array('admin' => 'app.admin.tarjetas.sim', 'label' => 'Tarjetas SIM', 'route' => '', 'route_params' => array(), 'route_absolute' => false)), 'on_top' => false, 'keep_open' => false, 'item_adds' => array()), 'user' => array('label' => 'admin.dashboard.menu.user.label', 'label_catalogue' => 'AppBundle', 'icon' => '<i class="fa fa-list-alt"></i>', 'roles' => array(0 => 'ROLE_USER'), 'items' => array(), 'on_top' => false, 'keep_open' => false, 'item_adds' => array())));
        $instance->setAdminClasses(array('DataDog\\AuditBundle\\Entity\\AuditLog' => array(0 => 'data_dog_audit.admin.audit_log'), 'AppBundle\\Entity\\User\\User' => array(0 => 'sonata.user.admin.user'), 'AppBundle\\Entity\\User\\Group' => array(0 => 'sonata.user.admin.group'), 'AppBundle\\Entity\\Media\\Media' => array(0 => 'sonata.media.admin.media'), 'AppBundle\\Entity\\Media\\Gallery' => array(0 => 'sonata.media.admin.gallery'), 'AppBundle\\Entity\\Media\\GalleryHasMedia' => array(0 => 'sonata.media.admin.gallery_has_media'), 'AppBundle\\Entity\\Classification\\Category' => array(0 => 'sonata.classification.admin.category'), 'AppBundle\\Entity\\Classification\\Tag' => array(0 => 'sonata.classification.admin.tag'), 'AppBundle\\Entity\\Classification\\Collection' => array(0 => 'sonata.classification.admin.collection'), 'AppBundle\\Entity\\Classification\\Context' => array(0 => 'sonata.classification.admin.context'), 'AppBundle\\Entity\\Empresa' => array(0 => 'app.admin.empresa'), 'AppBundle\\Entity\\Organismos' => array(0 => 'app.admin.organismos'), 'AppBundle\\Entity\\Personas' => array(0 => 'app.admin.personas'), 'AppBundle\\Entity\\anexo1_contrato_areas_internet' => array(0 => 'app.admin.anexo1.contrato.areas.internet'), 'AppBundle\\Entity\\anexo1_contrato_arrendamiento_espacios' => array(0 => 'app.admin.anexo1.contrato.arrendamiento.espacios'), 'AppBundle\\Entity\\anexo1_contrato_arrendamiento_pizarras_privadas_pbx' => array(0 => 'app.admin.anexo1.contrato.arrendamiento.pizarras.privadas.pbx'), 'AppBundle\\Entity\\anexo1_contrato_arrendamiento_redes' => array(0 => 'app.admin.anexo1.contrato.arrendamiento.redes'), 'AppBundle\\Entity\\anexo1_contrato_compra_venta' => array(0 => 'app.admin.anexo1.contrato.compra.venta'), 'AppBundle\\Entity\\anexo1_contrato_compra_venta_pizarra' => array(0 => 'app.admin.anexo1.contrato.compra.venta.pizarra'), 'AppBundle\\Entity\\anexo1_contrato_contactos_telefonicos' => array(0 => 'app.admin.anexo1.contrato.contactos.telefonicos'), 'AppBundle\\Entity\\anexo1_contrato_mantenimiento_pizarra_pbx' => array(0 => 'app.admin.anexo1.contrato.mantenimiento.pizarra.pbx'), 'AppBundle\\Entity\\anexo2_contrato_areas_internet' => array(0 => 'app.admin.anexo2.contrato.areas.internet'), 'AppBundle\\Entity\\anexo2_contrato_arrendamiento_redes' => array(0 => 'app.admin.anexo2.contrato.arrendamiento.redes'), 'AppBundle\\Entity\\anexo2_contrato_instalacion_pizarra_pbx' => array(0 => 'app.admin.anexo2.contrato.instalacion.pizarra.pbx'), 'AppBundle\\Entity\\anexo2_contrato_recarga_por_pos' => array(0 => 'app.admin.anexo2.contrato.recarga.por.pos'), 'AppBundle\\Entity\\datos_cuentas_bancarias_etecsa' => array(0 => 'app.admin.datos.cuentas.bancarias.etecsa'), 'AppBundle\\Entity\\anexo4_contrato_agencia' => array(0 => 'app.admin.anexo4.contrato.agencia'), 'AppBundle\\Entity\\anexo4_arrendamiento_espacios' => array(0 => 'app.admin.anexo4.arrendamiento.espacios'), 'AppBundle\\Entity\\anexo4_contrato_compra_venta' => array(0 => 'app.admin.anexo4.contrato.compra.venta'), 'AppBundle\\Entity\\anexo4_contrato_recarga_por_pos' => array(0 => 'app.admin.anexo4.contrato.recarga.por.pos'), 'AppBundle\\Entity\\anexo5_contrato_agencia' => array(0 => 'app.admin.anexo5.contrato.agencia'), 'AppBundle\\Entity\\anexo5_arrendaminto_espacios' => array(0 => 'app.admin.anexo5.arrendaminto.espacios'), 'AppBundle\\Entity\\anexo5_contrato_areas_internet' => array(0 => 'app.admin.anexo5.contrato.areas.internet'), 'AppBundle\\Entity\\anexocps_conexion_centrales_telefonicas' => array(0 => 'app.admin.anexocps.conexion.centrales.telefonicas'), 'AppBundle\\Entity\\anexocps_levantamiento_redes_tecnicas' => array(0 => 'app.admin.anexocps.levantamiento.redes.tecnicas'), 'AppBundle\\Entity\\anexocps_servicios_terceros' => array(0 => 'app.admin.anexocps.servicios.terceros'), 'AppBundle\\Entity\\contrato_agencia_persona_juridica' => array(0 => 'app.admin.contrato.agencia.persona.juridica'), 'AppBundle\\Entity\\contrato_areas_internet' => array(0 => 'app.admin.contrato.areas.internet'), 'AppBundle\\Entity\\contrato_arrendamiento_espacios' => array(0 => 'app.admin.contrato.arrendamiento.espacios'), 'AppBundle\\Entity\\contrato_arrendamiento_pizarra_privada_pbx' => array(0 => 'app.admin.contrato.arrendamiento.pizarra.privada.pbx'), 'AppBundle\\Entity\\contrato_arrendamiento_redes' => array(0 => 'app.admin.contrato.arrendamiento.redes'), 'AppBundle\\Entity\\contrato_compra_venta' => array(0 => 'app.admin.contrato.compra.venta'), 'AppBundle\\Entity\\contrato_instalacion_pizarra_pbx' => array(0 => 'app.admin.contrato.instalacion.pizarra.pbx'), 'AppBundle\\Entity\\contrato_mantenimiento_pizarra_pbx' => array(0 => 'app.admin.contrato.mantenimiento.pizarra.pbx'), 'AppBundle\\Entity\\contrato_prestacion_servicios' => array(0 => 'app.admin.contrato.prestacion.servicios'), 'AppBundle\\Entity\\contrato_recarga_por_pos' => array(0 => 'app.admin.contrato.recarga.por.pos'), 'AppBundle\\Entity\\descripcion_productos_servicios' => array(0 => 'app.admin.descripcion.productos.servicios'), 'AppBundle\\Entity\\facilidades_del_equipo' => array(0 => 'app.admin.facilidades.del.equipo'), 'AppBundle\\Entity\\grupos_electrogenos' => array(0 => 'app.admin.grupos.electrogenos'), 'AppBundle\\Entity\\locales' => array(0 => 'app.admin.locales'), 'AppBundle\\Entity\\mantenimiento_correctivo' => array(0 => 'app.admin.mantenimiento.correctivo'), 'AppBundle\\Entity\\mantenimiento_preventivo' => array(0 => 'app.admin.mantenimiento.preventivo'), 'AppBundle\\Entity\\pizarra_pbx' => array(0 => 'app.admin.pizarra.pbx'), 'AppBundle\\Entity\\protecciones_tierra' => array(0 => 'app.admin.protecciones.tierra'), 'AppBundle\\Entity\\relacion_antenas_a4' => array(0 => 'app.admin.relacion.antenas.a4'), 'AppBundle\\Entity\\relacion_bastidores' => array(0 => 'app.admin.relacion.bastidores'), 'AppBundle\\Entity\\relacion_equipos' => array(0 => 'app.admin.relacion.equipos'), 'AppBundle\\Entity\\relacion_iluminacion_tomacorriente' => array(0 => 'app.admin.relacion.iluminacion.tomacorriente'), 'AppBundle\\Entity\\relacion_mastiles_a4' => array(0 => 'app.admin.relacion.mastiles.a4'), 'AppBundle\\Entity\\relacion_terminaciones_bastidor' => array(0 => 'app.admin.relacion.terminaciones.bastidor'), 'AppBundle\\Entity\\relacion_torres_a4' => array(0 => 'app.admin.relacion.torres.a4'), 'AppBundle\\Entity\\relacion_vias' => array(0 => 'app.admin.relacion.vias'), 'AppBundle\\Entity\\sistema_corriente_directa' => array(0 => 'app.admin.sistema.corriente.directa'), 'AppBundle\\Entity\\sistema_iluminacion_a5' => array(0 => 'app.admin.sistema.iluminacion.a5'), 'AppBundle\\Entity\\sistemas_corriente_alterna' => array(0 => 'app.admin.sistemas.corriente.alterna'), 'AppBundle\\Entity\\tarifas_espacios_arrendados' => array(0 => 'app.admin.tarifas.espacios.arrendados'), 'AppBundle\\Entity\\terminaciones' => array(0 => 'app.admin.terminaciones'), 'AppBundle\\Entity\\tipos_de_mantenimientos' => array(0 => 'app.admin.tipos.de.mantenimientos'), 'AppBundle\\Entity\\tipos_distancias_arrendadas' => array(0 => 'app.admin.tipos.distancias.arrendadas'), 'AppBundle\\Entity\\tipos_mantenimientos_correctivos' => array(0 => 'app.admin.tipos.mantenimientos.correctivos'), 'AppBundle\\Entity\\tomacorrientes' => array(0 => 'app.admin.tomacorrientes'), 'AppBundle\\Entity\\descripcion_productos_contratados' => array(0 => 'app.admin.descripcion.productos.contratados'), 'AppBundle\\Entity\\contrato_contactos_telefonicos' => array(0 => 'app.admin.contrato.contactos.telefonicos'), 'AppBundle\\Entity\\equipamiento_gsm_pos' => array(0 => 'app.admin.equipamiento.gsm.pos'), 'AppBundle\\Entity\\tarjetas_sim' => array(0 => 'app.admin.tarjetas.sim'), 'AppBundle\\Entity\\tarifas_conexion_pizarras' => array(0 => 'app.admin.tarifas.conexion.pizarras'), 'AppBundle\\Entity\\contrato_comp_vent_pizarra' => array(0 => 'app.admin.contrato.comp.vent.pizarra')));

        return $instance;
    }

    /**
     * Gets the public 'sonata.admin.route.cache' shared service.
     *
     * @return \Sonata\AdminBundle\Route\RoutesCache
     */
    protected function getSonata_Admin_Route_CacheService()
    {
        return $this->services['sonata.admin.route.cache'] = new \Sonata\AdminBundle\Route\RoutesCache((__DIR__.'/sonata/admin'), true);
    }

    /**
     * Gets the public 'sonata.admin.route.cache_warmup' shared service.
     *
     * @return \Sonata\AdminBundle\Route\RoutesCacheWarmUp
     */
    protected function getSonata_Admin_Route_CacheWarmupService()
    {
        return $this->services['sonata.admin.route.cache_warmup'] = new \Sonata\AdminBundle\Route\RoutesCacheWarmUp(${($_ = isset($this->services['sonata.admin.route.cache']) ? $this->services['sonata.admin.route.cache'] : $this->get('sonata.admin.route.cache')) && false ?: '_'}, ${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.admin.route.default_generator' shared service.
     *
     * @return \Sonata\AdminBundle\Route\DefaultRouteGenerator
     */
    protected function getSonata_Admin_Route_DefaultGeneratorService()
    {
        return $this->services['sonata.admin.route.default_generator'] = new \Sonata\AdminBundle\Route\DefaultRouteGenerator(${($_ = isset($this->services['router']) ? $this->services['router'] : $this->get('router')) && false ?: '_'}, ${($_ = isset($this->services['sonata.admin.route.cache']) ? $this->services['sonata.admin.route.cache'] : $this->get('sonata.admin.route.cache')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.admin.route.path_info' shared service.
     *
     * @return \Sonata\AdminBundle\Route\PathInfoBuilder
     */
    protected function getSonata_Admin_Route_PathInfoService()
    {
        return $this->services['sonata.admin.route.path_info'] = new \Sonata\AdminBundle\Route\PathInfoBuilder(${($_ = isset($this->services['sonata.admin.audit.manager']) ? $this->services['sonata.admin.audit.manager'] : $this->get('sonata.admin.audit.manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.admin.route.query_string' shared service.
     *
     * @return \Sonata\AdminBundle\Route\QueryStringBuilder
     */
    protected function getSonata_Admin_Route_QueryStringService()
    {
        return $this->services['sonata.admin.route.query_string'] = new \Sonata\AdminBundle\Route\QueryStringBuilder(${($_ = isset($this->services['sonata.admin.audit.manager']) ? $this->services['sonata.admin.audit.manager'] : $this->get('sonata.admin.audit.manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.admin.route_loader' shared service.
     *
     * @return \Sonata\AdminBundle\Route\AdminPoolLoader
     */
    protected function getSonata_Admin_RouteLoaderService()
    {
        return $this->services['sonata.admin.route_loader'] = new \Sonata\AdminBundle\Route\AdminPoolLoader(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'}, array(0 => 'data_dog_audit.admin.audit_log', 1 => 'sonata.user.admin.user', 2 => 'sonata.user.admin.group', 3 => 'sonata.media.admin.media', 4 => 'sonata.media.admin.gallery', 5 => 'sonata.media.admin.gallery_has_media', 6 => 'sonata.classification.admin.category', 7 => 'sonata.classification.admin.tag', 8 => 'sonata.classification.admin.collection', 9 => 'sonata.classification.admin.context', 10 => 'app.admin.empresa', 11 => 'app.admin.organismos', 12 => 'app.admin.personas', 13 => 'app.admin.anexo1.contrato.areas.internet', 14 => 'app.admin.anexo1.contrato.arrendamiento.espacios', 15 => 'app.admin.anexo1.contrato.arrendamiento.pizarras.privadas.pbx', 16 => 'app.admin.anexo1.contrato.arrendamiento.redes', 17 => 'app.admin.anexo1.contrato.compra.venta', 18 => 'app.admin.anexo1.contrato.compra.venta.pizarra', 19 => 'app.admin.anexo1.contrato.contactos.telefonicos', 20 => 'app.admin.anexo1.contrato.mantenimiento.pizarra.pbx', 21 => 'app.admin.anexo2.contrato.areas.internet', 22 => 'app.admin.anexo2.contrato.arrendamiento.redes', 23 => 'app.admin.anexo2.contrato.instalacion.pizarra.pbx', 24 => 'app.admin.anexo2.contrato.recarga.por.pos', 25 => 'app.admin.datos.cuentas.bancarias.etecsa', 26 => 'app.admin.anexo4.contrato.agencia', 27 => 'app.admin.anexo4.arrendamiento.espacios', 28 => 'app.admin.anexo4.contrato.compra.venta', 29 => 'app.admin.anexo4.contrato.recarga.por.pos', 30 => 'app.admin.anexo5.contrato.agencia', 31 => 'app.admin.anexo5.arrendaminto.espacios', 32 => 'app.admin.anexo5.contrato.areas.internet', 33 => 'app.admin.anexocps.conexion.centrales.telefonicas', 34 => 'app.admin.anexocps.levantamiento.redes.tecnicas', 35 => 'app.admin.anexocps.servicios.terceros', 36 => 'app.admin.contrato.agencia.persona.juridica', 37 => 'app.admin.contrato.areas.internet', 38 => 'app.admin.contrato.arrendamiento.espacios', 39 => 'app.admin.contrato.arrendamiento.pizarra.privada.pbx', 40 => 'app.admin.contrato.arrendamiento.redes', 41 => 'app.admin.contrato.compra.venta', 42 => 'app.admin.contrato.instalacion.pizarra.pbx', 43 => 'app.admin.contrato.mantenimiento.pizarra.pbx', 44 => 'app.admin.contrato.prestacion.servicios', 45 => 'app.admin.contrato.recarga.por.pos', 46 => 'app.admin.descripcion.productos.servicios', 47 => 'app.admin.facilidades.del.equipo', 48 => 'app.admin.grupos.electrogenos', 49 => 'app.admin.locales', 50 => 'app.admin.mantenimiento.correctivo', 51 => 'app.admin.mantenimiento.preventivo', 52 => 'app.admin.pizarra.pbx', 53 => 'app.admin.protecciones.tierra', 54 => 'app.admin.relacion.antenas.a4', 55 => 'app.admin.relacion.bastidores', 56 => 'app.admin.relacion.equipos', 57 => 'app.admin.relacion.iluminacion.tomacorriente', 58 => 'app.admin.relacion.mastiles.a4', 59 => 'app.admin.relacion.terminaciones.bastidor', 60 => 'app.admin.relacion.torres.a4', 61 => 'app.admin.relacion.vias', 62 => 'app.admin.sistema.corriente.directa', 63 => 'app.admin.sistema.iluminacion.a5', 64 => 'app.admin.sistemas.corriente.alterna', 65 => 'app.admin.tarifas.espacios.arrendados', 66 => 'app.admin.terminaciones', 67 => 'app.admin.tipos.de.mantenimientos', 68 => 'app.admin.tipos.distancias.arrendadas', 69 => 'app.admin.tipos.mantenimientos.correctivos', 70 => 'app.admin.tomacorrientes', 71 => 'app.admin.descripcion.productos.contratados', 72 => 'app.admin.contrato.contactos.telefonicos', 73 => 'app.admin.equipamiento.gsm.pos', 74 => 'app.admin.tarjetas.sim', 75 => 'app.admin.tarifas.conexion.pizarras', 76 => 'app.admin.contrato.comp.vent.pizarra'), $this);
    }

    /**
     * Gets the public 'sonata.admin.search.handler' shared service.
     *
     * @return \Sonata\AdminBundle\Search\SearchHandler
     */
    protected function getSonata_Admin_Search_HandlerService()
    {
        return $this->services['sonata.admin.search.handler'] = new \Sonata\AdminBundle\Search\SearchHandler(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.admin.security.handler' shared service.
     *
     * @return \Sonata\AdminBundle\Security\Handler\RoleSecurityHandler
     */
    protected function getSonata_Admin_Security_HandlerService()
    {
        return $this->services['sonata.admin.security.handler'] = new \Sonata\AdminBundle\Security\Handler\RoleSecurityHandler(${($_ = isset($this->services['security.authorization_checker']) ? $this->services['security.authorization_checker'] : $this->get('security.authorization_checker')) && false ?: '_'}, array(0 => 'ROLE_SUPER_ADMIN'));
    }

    /**
     * Gets the public 'sonata.admin.sidebar_menu' shared service.
     *
     * @return \Knp\Menu\MenuItem
     */
    protected function getSonata_Admin_SidebarMenuService()
    {
        return $this->services['sonata.admin.sidebar_menu'] = ${($_ = isset($this->services['sonata.admin.menu_builder']) ? $this->services['sonata.admin.menu_builder'] : $this->get('sonata.admin.menu_builder')) && false ?: '_'}->createSidebarMenu();
    }

    /**
     * Gets the public 'sonata.admin.twig.extension' shared service.
     *
     * @return \Sonata\AdminBundle\Twig\Extension\SonataAdminExtension
     */
    protected function getSonata_Admin_Twig_ExtensionService()
    {
        $this->services['sonata.admin.twig.extension'] = $instance = new \Sonata\AdminBundle\Twig\Extension\SonataAdminExtension(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'}, ${($_ = isset($this->services['logger']) ? $this->services['logger'] : $this->get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, ${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, $this);

        $instance->setXEditableTypeMapping(array('choice' => 'select', 'boolean' => 'select', 'text' => 'text', 'textarea' => 'textarea', 'html' => 'textarea', 'email' => 'email', 'string' => 'text', 'smallint' => 'text', 'bigint' => 'text', 'integer' => 'number', 'decimal' => 'number', 'currency' => 'number', 'percent' => 'number', 'url' => 'url', 'date' => 'date'));

        return $instance;
    }

    /**
     * Gets the public 'sonata.admin.twig.global' shared service.
     *
     * @return \Sonata\AdminBundle\Twig\GlobalVariables
     */
    protected function getSonata_Admin_Twig_GlobalService()
    {
        return $this->services['sonata.admin.twig.global'] = new \Sonata\AdminBundle\Twig\GlobalVariables(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.admin.validator.inline' shared service.
     *
     * @return \Sonata\CoreBundle\Validator\InlineValidator
     */
    protected function getSonata_Admin_Validator_InlineService()
    {
        return $this->services['sonata.admin.validator.inline'] = new \Sonata\CoreBundle\Validator\InlineValidator($this, ${($_ = isset($this->services['validator.validator_factory']) ? $this->services['validator.validator_factory'] : $this->getValidator_ValidatorFactoryService()) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.block.cache.handler.default' shared service.
     *
     * @return \Sonata\BlockBundle\Cache\HttpCacheHandler
     */
    protected function getSonata_Block_Cache_Handler_DefaultService()
    {
        return $this->services['sonata.block.cache.handler.default'] = new \Sonata\BlockBundle\Cache\HttpCacheHandler();
    }

    /**
     * Gets the public 'sonata.block.cache.handler.noop' shared service.
     *
     * @return \Sonata\BlockBundle\Cache\NoopHttpCacheHandler
     */
    protected function getSonata_Block_Cache_Handler_NoopService()
    {
        return $this->services['sonata.block.cache.handler.noop'] = new \Sonata\BlockBundle\Cache\NoopHttpCacheHandler();
    }

    /**
     * Gets the public 'sonata.block.context_manager.default' shared service.
     *
     * @return \Sonata\BlockBundle\Block\BlockContextManager
     */
    protected function getSonata_Block_ContextManager_DefaultService()
    {
        return $this->services['sonata.block.context_manager.default'] = new \Sonata\BlockBundle\Block\BlockContextManager(${($_ = isset($this->services['sonata.block.loader.chain']) ? $this->services['sonata.block.loader.chain'] : $this->get('sonata.block.loader.chain')) && false ?: '_'}, ${($_ = isset($this->services['sonata.block.manager']) ? $this->services['sonata.block.manager'] : $this->get('sonata.block.manager')) && false ?: '_'}, array('by_type' => array('sonata.admin.block.stats' => 'sonata.cache.noop', 'sonata.admin.block.admin_list' => 'sonata.cache.noop', 'sonata.block.service.text' => 'sonata.cache.noop', 'sonata.block.service.container' => 'sonata.cache.noop', 'sonata.block.service.rss' => 'sonata.cache.noop', 'sonata.block.service.menu' => 'sonata.cache.noop', 'sonata.block.service.template' => 'sonata.cache.noop', 'sonata.page.block.container' => 'sonata.cache.noop', 'sonata.page.block.children_pages' => 'sonata.cache.noop', 'sonata.page.block.ajax' => 'sonata.cache.noop', 'sonata.page.block.context_manager' => 'sonata.cache.noop', 'sonata.page.block.breadcrumb' => 'sonata.cache.noop', 'sonata.page.block.shared_block' => 'sonata.cache.noop', 'sonata.page.block.pagelist' => 'sonata.cache.noop', 'sonata.media.block.media' => 'sonata.cache.noop', 'sonata.media.block.gallery' => 'sonata.cache.noop', 'sonata.media.block.feature_media' => 'sonata.cache.noop', 'sonata.media.block.gallery_list' => 'sonata.cache.noop', 'sonata.user.block.account' => 'sonata.page.cache.js_async', 'sonata.user.block.menu' => 'sonata.cache.noop', 'sonata.user.block.breadcrumb_index' => 'sonata.cache.noop', 'sonata.user.block.breadcrumb_profile' => 'sonata.cache.noop', 'sonata.seo.block.email.share_button' => 'sonata.cache.noop', 'sonata.seo.block.facebook.like_box' => 'sonata.cache.noop', 'sonata.seo.block.facebook.like_button' => 'sonata.cache.noop', 'sonata.seo.block.facebook.send_button' => 'sonata.cache.noop', 'sonata.seo.block.facebook.share_button' => 'sonata.cache.noop', 'sonata.seo.block.pinterest.pin_button' => 'sonata.cache.noop', 'sonata.seo.block.twitter.share_button' => 'sonata.cache.noop', 'sonata.seo.block.twitter.follow_button' => 'sonata.cache.noop', 'sonata.seo.block.twitter.hashtag_button' => 'sonata.cache.noop', 'sonata.seo.block.twitter.mention_button' => 'sonata.cache.noop', 'sonata.seo.block.twitter.embed' => 'sonata.cache.noop', 'sonata.formatter.block.formatter' => 'sonata.cache.noop', 'sonata.seo.block.breadcrumb.homepage' => 'sonata.cache.noop', 'sonata.admin.block.search_result' => 'sonata.cache.noop')), ${($_ = isset($this->services['logger']) ? $this->services['logger'] : $this->get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.block.exception.filter.debug_only' shared service.
     *
     * @return \Sonata\BlockBundle\Exception\Filter\DebugOnlyFilter
     */
    protected function getSonata_Block_Exception_Filter_DebugOnlyService()
    {
        return $this->services['sonata.block.exception.filter.debug_only'] = new \Sonata\BlockBundle\Exception\Filter\DebugOnlyFilter(true);
    }

    /**
     * Gets the public 'sonata.block.exception.filter.ignore_block_exception' shared service.
     *
     * @return \Sonata\BlockBundle\Exception\Filter\IgnoreClassFilter
     */
    protected function getSonata_Block_Exception_Filter_IgnoreBlockExceptionService()
    {
        return $this->services['sonata.block.exception.filter.ignore_block_exception'] = new \Sonata\BlockBundle\Exception\Filter\IgnoreClassFilter('Sonata\\BlockBundle\\Exception\\BlockExceptionInterface');
    }

    /**
     * Gets the public 'sonata.block.exception.filter.keep_all' shared service.
     *
     * @return \Sonata\BlockBundle\Exception\Filter\KeepAllFilter
     */
    protected function getSonata_Block_Exception_Filter_KeepAllService()
    {
        return $this->services['sonata.block.exception.filter.keep_all'] = new \Sonata\BlockBundle\Exception\Filter\KeepAllFilter();
    }

    /**
     * Gets the public 'sonata.block.exception.filter.keep_none' shared service.
     *
     * @return \Sonata\BlockBundle\Exception\Filter\KeepNoneFilter
     */
    protected function getSonata_Block_Exception_Filter_KeepNoneService()
    {
        return $this->services['sonata.block.exception.filter.keep_none'] = new \Sonata\BlockBundle\Exception\Filter\KeepNoneFilter();
    }

    /**
     * Gets the public 'sonata.block.exception.renderer.inline' shared service.
     *
     * @return \Sonata\BlockBundle\Exception\Renderer\InlineRenderer
     */
    protected function getSonata_Block_Exception_Renderer_InlineService()
    {
        return $this->services['sonata.block.exception.renderer.inline'] = new \Sonata\BlockBundle\Exception\Renderer\InlineRenderer(${($_ = isset($this->services['sonata.templating']) ? $this->services['sonata.templating'] : $this->get('sonata.templating')) && false ?: '_'}, '@SonataBlock/Block/block_exception.html.twig');
    }

    /**
     * Gets the public 'sonata.block.exception.renderer.inline_debug' shared service.
     *
     * @return \Sonata\BlockBundle\Exception\Renderer\InlineDebugRenderer
     */
    protected function getSonata_Block_Exception_Renderer_InlineDebugService()
    {
        return $this->services['sonata.block.exception.renderer.inline_debug'] = new \Sonata\BlockBundle\Exception\Renderer\InlineDebugRenderer(${($_ = isset($this->services['sonata.templating']) ? $this->services['sonata.templating'] : $this->get('sonata.templating')) && false ?: '_'}, '@SonataBlock/Block/block_exception_debug.html.twig', true, true);
    }

    /**
     * Gets the public 'sonata.block.exception.renderer.throw' shared service.
     *
     * @return \Sonata\BlockBundle\Exception\Renderer\MonkeyThrowRenderer
     */
    protected function getSonata_Block_Exception_Renderer_ThrowService()
    {
        return $this->services['sonata.block.exception.renderer.throw'] = new \Sonata\BlockBundle\Exception\Renderer\MonkeyThrowRenderer();
    }

    /**
     * Gets the public 'sonata.block.exception.strategy.manager' shared service.
     *
     * @return \Sonata\BlockBundle\Exception\Strategy\StrategyManager
     */
    protected function getSonata_Block_Exception_Strategy_ManagerService()
    {
        $this->services['sonata.block.exception.strategy.manager'] = $instance = new \Sonata\BlockBundle\Exception\Strategy\StrategyManager($this, array('debug_only' => 'sonata.block.exception.filter.debug_only', 'ignore_block_exception' => 'sonata.block.exception.filter.ignore_block_exception', 'keep_all' => 'sonata.block.exception.filter.keep_all', 'keep_none' => 'sonata.block.exception.filter.keep_none'), array('inline' => 'sonata.block.exception.renderer.inline', 'inline_debug' => 'sonata.block.exception.renderer.inline_debug', 'throw' => 'sonata.block.exception.renderer.throw'), array(), array());

        $instance->setDefaultFilter('debug_only');
        $instance->setDefaultRenderer('throw');

        return $instance;
    }

    /**
     * Gets the public 'sonata.block.form.type.block' shared service.
     *
     * @return \Sonata\BlockBundle\Form\Type\ServiceListType
     */
    protected function getSonata_Block_Form_Type_BlockService()
    {
        return $this->services['sonata.block.form.type.block'] = new \Sonata\BlockBundle\Form\Type\ServiceListType(${($_ = isset($this->services['sonata.block.manager']) ? $this->services['sonata.block.manager'] : $this->get('sonata.block.manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.block.form.type.container_template' shared service.
     *
     * @return \Sonata\BlockBundle\Form\Type\ContainerTemplateType
     */
    protected function getSonata_Block_Form_Type_ContainerTemplateService()
    {
        return $this->services['sonata.block.form.type.container_template'] = new \Sonata\BlockBundle\Form\Type\ContainerTemplateType(array('@SonataBlock/Block/block_container.html.twig' => 'SonataBlockBundle default template'));
    }

    /**
     * Gets the public 'sonata.block.loader.chain' shared service.
     *
     * @return \Sonata\BlockBundle\Block\BlockLoaderChain
     */
    protected function getSonata_Block_Loader_ChainService()
    {
        return $this->services['sonata.block.loader.chain'] = new \Sonata\BlockBundle\Block\BlockLoaderChain(array(0 => ${($_ = isset($this->services['sonata.block.loader.service']) ? $this->services['sonata.block.loader.service'] : $this->get('sonata.block.loader.service')) && false ?: '_'}));
    }

    /**
     * Gets the public 'sonata.block.loader.service' shared service.
     *
     * @return \Sonata\BlockBundle\Block\Loader\ServiceLoader
     */
    protected function getSonata_Block_Loader_ServiceService()
    {
        return $this->services['sonata.block.loader.service'] = new \Sonata\BlockBundle\Block\Loader\ServiceLoader(array(0 => 'sonata.admin.block.stats', 1 => 'sonata.admin.block.admin_list', 2 => 'sonata.block.service.text', 3 => 'sonata.block.service.container', 4 => 'sonata.block.service.rss', 5 => 'sonata.block.service.menu', 6 => 'sonata.block.service.template', 7 => 'sonata.page.block.container', 8 => 'sonata.page.block.children_pages', 9 => 'sonata.page.block.ajax', 10 => 'sonata.page.block.context_manager', 11 => 'sonata.page.block.breadcrumb', 12 => 'sonata.page.block.shared_block', 13 => 'sonata.page.block.pagelist', 14 => 'sonata.media.block.media', 15 => 'sonata.media.block.gallery', 16 => 'sonata.media.block.feature_media', 17 => 'sonata.media.block.gallery_list', 18 => 'sonata.user.block.account', 19 => 'sonata.user.block.menu', 20 => 'sonata.user.block.breadcrumb_index', 21 => 'sonata.user.block.breadcrumb_profile', 22 => 'sonata.seo.block.email.share_button', 23 => 'sonata.seo.block.facebook.like_box', 24 => 'sonata.seo.block.facebook.like_button', 25 => 'sonata.seo.block.facebook.send_button', 26 => 'sonata.seo.block.facebook.share_button', 27 => 'sonata.seo.block.pinterest.pin_button', 28 => 'sonata.seo.block.twitter.share_button', 29 => 'sonata.seo.block.twitter.follow_button', 30 => 'sonata.seo.block.twitter.hashtag_button', 31 => 'sonata.seo.block.twitter.mention_button', 32 => 'sonata.seo.block.twitter.embed', 33 => 'sonata.formatter.block.formatter', 34 => 'sonata.seo.block.breadcrumb.homepage', 35 => 'sonata.admin.block.search_result'));
    }

    /**
     * Gets the public 'sonata.block.manager' shared service.
     *
     * @return \Sonata\BlockBundle\Block\BlockServiceManager
     */
    protected function getSonata_Block_ManagerService()
    {
        $this->services['sonata.block.manager'] = $instance = new \Sonata\BlockBundle\Block\BlockServiceManager($this, true, ${($_ = isset($this->services['logger']) ? $this->services['logger'] : $this->get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});

        $instance->add('sonata.user.block.menu', 'sonata.user.block.menu', array(0 => 'user', 1 => 'sonata_page_bundle'));
        $instance->add('sonata.user.block.account', 'sonata.user.block.account', array(0 => 'user', 1 => 'sonata_page_bundle'));
        $instance->add('sonata.media.block.media', 'sonata.media.block.media', array(0 => 'sonata_page_bundle'));
        $instance->add('sonata.media.block.feature_media', 'sonata.media.block.feature_media', array(0 => 'sonata_page_bundle'));
        $instance->add('sonata.media.block.gallery', 'sonata.media.block.gallery', array(0 => 'sonata_page_bundle'));
        $instance->add('sonata.media.block.gallery_list', 'sonata.media.block.gallery_list', array(0 => 'sonata_page_bundle'));
        $instance->add('sonata.admin.block.admin_list', 'sonata.admin.block.admin_list', array(0 => 'admin'));
        $instance->add('sonata.admin.block.search_result', 'sonata.admin.block.search_result', array(0 => 'admin'));
        $instance->add('sonata.admin.block.stats', 'sonata.admin.block.stats', array(0 => 'admin'));
        $instance->add('sonata.formatter.block.formatter', 'sonata.formatter.block.formatter', array(0 => 'sonata_page_bundle'));
        $instance->add('sonata.block.service.container', 'sonata.block.service.container', array(0 => 'sonata_page_bundle'));
        $instance->add('sonata.block.service.empty', 'sonata.block.service.empty', array());
        $instance->add('sonata.block.service.text', 'sonata.block.service.text', array(0 => 'sonata_page_bundle'));
        $instance->add('sonata.block.service.rss', 'sonata.block.service.rss', array(0 => 'sonata_page_bundle'));
        $instance->add('sonata.block.service.menu', 'sonata.block.service.menu', array(0 => 'sonata_page_bundle'));
        $instance->add('sonata.block.service.template', 'sonata.block.service.template', array(0 => 'sonata_page_bundle'));

        return $instance;
    }

    /**
     * Gets the public 'sonata.block.menu.registry' shared service.
     *
     * @return \Sonata\BlockBundle\Menu\MenuRegistry
     */
    protected function getSonata_Block_Menu_RegistryService()
    {
        $this->services['sonata.block.menu.registry'] = $instance = new \Sonata\BlockBundle\Menu\MenuRegistry(array());

        $instance->add('sonata_admin_sidebar');

        return $instance;
    }

    /**
     * Gets the public 'sonata.block.renderer.default' shared service.
     *
     * @return \Sonata\BlockBundle\Block\BlockRenderer
     */
    protected function getSonata_Block_Renderer_DefaultService()
    {
        return $this->services['sonata.block.renderer.default'] = new \Sonata\BlockBundle\Block\BlockRenderer(${($_ = isset($this->services['sonata.block.manager']) ? $this->services['sonata.block.manager'] : $this->get('sonata.block.manager')) && false ?: '_'}, ${($_ = isset($this->services['sonata.block.exception.strategy.manager']) ? $this->services['sonata.block.exception.strategy.manager'] : $this->get('sonata.block.exception.strategy.manager')) && false ?: '_'}, ${($_ = isset($this->services['logger']) ? $this->services['logger'] : $this->get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, true);
    }

    /**
     * Gets the public 'sonata.block.service.container' shared service.
     *
     * @return \Sonata\BlockBundle\Block\Service\ContainerBlockService
     */
    protected function getSonata_Block_Service_ContainerService()
    {
        return $this->services['sonata.block.service.container'] = new \Sonata\BlockBundle\Block\Service\ContainerBlockService('sonata.block.container', ${($_ = isset($this->services['sonata.templating']) ? $this->services['sonata.templating'] : $this->get('sonata.templating')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.block.service.empty' shared service.
     *
     * @return \Sonata\BlockBundle\Block\Service\EmptyBlockService
     */
    protected function getSonata_Block_Service_EmptyService()
    {
        return $this->services['sonata.block.service.empty'] = new \Sonata\BlockBundle\Block\Service\EmptyBlockService('sonata.block.empty', ${($_ = isset($this->services['sonata.templating']) ? $this->services['sonata.templating'] : $this->get('sonata.templating')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.block.service.menu' shared service.
     *
     * @return \Sonata\BlockBundle\Block\Service\MenuBlockService
     */
    protected function getSonata_Block_Service_MenuService()
    {
        return $this->services['sonata.block.service.menu'] = new \Sonata\BlockBundle\Block\Service\MenuBlockService('sonata.block.menu', ${($_ = isset($this->services['sonata.templating']) ? $this->services['sonata.templating'] : $this->get('sonata.templating')) && false ?: '_'}, ${($_ = isset($this->services['knp_menu.menu_provider']) ? $this->services['knp_menu.menu_provider'] : $this->get('knp_menu.menu_provider')) && false ?: '_'}, ${($_ = isset($this->services['sonata.block.menu.registry']) ? $this->services['sonata.block.menu.registry'] : $this->get('sonata.block.menu.registry')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.block.service.rss' shared service.
     *
     * @return \Sonata\BlockBundle\Block\Service\RssBlockService
     */
    protected function getSonata_Block_Service_RssService()
    {
        return $this->services['sonata.block.service.rss'] = new \Sonata\BlockBundle\Block\Service\RssBlockService('sonata.block.rss', ${($_ = isset($this->services['sonata.templating']) ? $this->services['sonata.templating'] : $this->get('sonata.templating')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.block.service.template' shared service.
     *
     * @return \Sonata\BlockBundle\Block\Service\TemplateBlockService
     */
    protected function getSonata_Block_Service_TemplateService()
    {
        return $this->services['sonata.block.service.template'] = new \Sonata\BlockBundle\Block\Service\TemplateBlockService('sonata.block.template', ${($_ = isset($this->services['sonata.templating']) ? $this->services['sonata.templating'] : $this->get('sonata.templating')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.block.service.text' shared service.
     *
     * @return \Sonata\BlockBundle\Block\Service\TextBlockService
     */
    protected function getSonata_Block_Service_TextService()
    {
        return $this->services['sonata.block.service.text'] = new \Sonata\BlockBundle\Block\Service\TextBlockService('sonata.block.text', ${($_ = isset($this->services['sonata.templating']) ? $this->services['sonata.templating'] : $this->get('sonata.templating')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.block.templating.helper' shared service.
     *
     * @return \Sonata\BlockBundle\Templating\Helper\BlockHelper
     */
    protected function getSonata_Block_Templating_HelperService()
    {
        return $this->services['sonata.block.templating.helper'] = new \Sonata\BlockBundle\Templating\Helper\BlockHelper(${($_ = isset($this->services['sonata.block.manager']) ? $this->services['sonata.block.manager'] : $this->get('sonata.block.manager')) && false ?: '_'}, array('by_type' => array('sonata.admin.block.stats' => 'sonata.cache.noop', 'sonata.admin.block.admin_list' => 'sonata.cache.noop', 'sonata.block.service.text' => 'sonata.cache.noop', 'sonata.block.service.container' => 'sonata.cache.noop', 'sonata.block.service.rss' => 'sonata.cache.noop', 'sonata.block.service.menu' => 'sonata.cache.noop', 'sonata.block.service.template' => 'sonata.cache.noop', 'sonata.page.block.container' => 'sonata.cache.noop', 'sonata.page.block.children_pages' => 'sonata.cache.noop', 'sonata.page.block.ajax' => 'sonata.cache.noop', 'sonata.page.block.context_manager' => 'sonata.cache.noop', 'sonata.page.block.breadcrumb' => 'sonata.cache.noop', 'sonata.page.block.shared_block' => 'sonata.cache.noop', 'sonata.page.block.pagelist' => 'sonata.cache.noop', 'sonata.media.block.media' => 'sonata.cache.noop', 'sonata.media.block.gallery' => 'sonata.cache.noop', 'sonata.media.block.feature_media' => 'sonata.cache.noop', 'sonata.media.block.gallery_list' => 'sonata.cache.noop', 'sonata.user.block.account' => 'sonata.page.cache.js_async', 'sonata.user.block.menu' => 'sonata.cache.noop', 'sonata.user.block.breadcrumb_index' => 'sonata.cache.noop', 'sonata.user.block.breadcrumb_profile' => 'sonata.cache.noop', 'sonata.seo.block.email.share_button' => 'sonata.cache.noop', 'sonata.seo.block.facebook.like_box' => 'sonata.cache.noop', 'sonata.seo.block.facebook.like_button' => 'sonata.cache.noop', 'sonata.seo.block.facebook.send_button' => 'sonata.cache.noop', 'sonata.seo.block.facebook.share_button' => 'sonata.cache.noop', 'sonata.seo.block.pinterest.pin_button' => 'sonata.cache.noop', 'sonata.seo.block.twitter.share_button' => 'sonata.cache.noop', 'sonata.seo.block.twitter.follow_button' => 'sonata.cache.noop', 'sonata.seo.block.twitter.hashtag_button' => 'sonata.cache.noop', 'sonata.seo.block.twitter.mention_button' => 'sonata.cache.noop', 'sonata.seo.block.twitter.embed' => 'sonata.cache.noop', 'sonata.formatter.block.formatter' => 'sonata.cache.noop', 'sonata.seo.block.breadcrumb.homepage' => 'sonata.cache.noop', 'sonata.admin.block.search_result' => 'sonata.cache.noop')), ${($_ = isset($this->services['sonata.block.renderer.default']) ? $this->services['sonata.block.renderer.default'] : $this->get('sonata.block.renderer.default')) && false ?: '_'}, ${($_ = isset($this->services['sonata.block.context_manager.default']) ? $this->services['sonata.block.context_manager.default'] : $this->get('sonata.block.context_manager.default')) && false ?: '_'}, ${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher')) && false ?: '_'}, NULL, ${($_ = isset($this->services['sonata.block.cache.handler.default']) ? $this->services['sonata.block.cache.handler.default'] : $this->get('sonata.block.cache.handler.default', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, ${($_ = isset($this->services['debug.stopwatch']) ? $this->services['debug.stopwatch'] : $this->get('debug.stopwatch', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.block.twig.global' shared service.
     *
     * @return \Sonata\BlockBundle\Twig\GlobalVariables
     */
    protected function getSonata_Block_Twig_GlobalService()
    {
        return $this->services['sonata.block.twig.global'] = new \Sonata\BlockBundle\Twig\GlobalVariables(array('block_base' => '@SonataBlock/Block/block_base.html.twig', 'block_container' => '@SonataBlock/Block/block_container.html.twig'));
    }

    /**
     * Gets the public 'sonata.classification.admin.category' service.
     *
     * @return \Sonata\ClassificationBundle\Admin\CategoryAdmin
     */
    protected function getSonata_Classification_Admin_CategoryService()
    {
        $instance = new \Sonata\ClassificationBundle\Admin\CategoryAdmin('sonata.classification.admin.category', 'AppBundle\\Entity\\Classification\\Category', 'SonataClassificationBundle:CategoryAdmin', ${($_ = isset($this->services['sonata.classification.manager.context']) ? $this->services['sonata.classification.manager.context'] : $this->get('sonata.classification.manager.context')) && false ?: '_'});

        $instance->setTranslationDomain('SonataClassificationBundle');
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.underscore']) ? $this->services['sonata.admin.label.strategy.underscore'] : $this->get('sonata.admin.label.strategy.underscore')) && false ?: '_'});
        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('label_categories');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['sonata.classification.admin.category.template_registry']) ? $this->services['sonata.classification.admin.category.template_registry'] : $this->get('sonata.classification.admin.category.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'sonata.classification.admin.category.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getSonata_Classification_Admin_Category_TemplateRegistryService()
    {
        return $this->services['sonata.classification.admin.category.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => '@SonataClassification/CategoryAdmin/list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig', 'tree' => '@SonataClassification/CategoryAdmin/tree.html.twig'));
    }

    /**
     * Gets the public 'sonata.classification.admin.collection' service.
     *
     * @return \Sonata\ClassificationBundle\Admin\CollectionAdmin
     */
    protected function getSonata_Classification_Admin_CollectionService()
    {
        $instance = new \Sonata\ClassificationBundle\Admin\CollectionAdmin('sonata.classification.admin.collection', 'AppBundle\\Entity\\Classification\\Collection', 'SonataAdminBundle:CRUD', ${($_ = isset($this->services['sonata.classification.manager.context']) ? $this->services['sonata.classification.manager.context'] : $this->get('sonata.classification.manager.context')) && false ?: '_'});

        $instance->setTranslationDomain('SonataClassificationBundle');
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.underscore']) ? $this->services['sonata.admin.label.strategy.underscore'] : $this->get('sonata.admin.label.strategy.underscore')) && false ?: '_'});
        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('label_collections');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['sonata.classification.admin.collection.template_registry']) ? $this->services['sonata.classification.admin.collection.template_registry'] : $this->get('sonata.classification.admin.collection.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'sonata.classification.admin.collection.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getSonata_Classification_Admin_Collection_TemplateRegistryService()
    {
        return $this->services['sonata.classification.admin.collection.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'sonata.classification.admin.context' service.
     *
     * @return \Sonata\ClassificationBundle\Admin\ContextAdmin
     */
    protected function getSonata_Classification_Admin_ContextService()
    {
        $instance = new \Sonata\ClassificationBundle\Admin\ContextAdmin('sonata.classification.admin.context', 'AppBundle\\Entity\\Classification\\Context', 'SonataAdminBundle:CRUD');

        $instance->setTranslationDomain('SonataClassificationBundle');
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.underscore']) ? $this->services['sonata.admin.label.strategy.underscore'] : $this->get('sonata.admin.label.strategy.underscore')) && false ?: '_'});
        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('label_contexts');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['sonata.classification.admin.context.template_registry']) ? $this->services['sonata.classification.admin.context.template_registry'] : $this->get('sonata.classification.admin.context.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'sonata.classification.admin.context.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getSonata_Classification_Admin_Context_TemplateRegistryService()
    {
        return $this->services['sonata.classification.admin.context.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'sonata.classification.admin.tag' service.
     *
     * @return \Sonata\ClassificationBundle\Admin\TagAdmin
     */
    protected function getSonata_Classification_Admin_TagService()
    {
        $instance = new \Sonata\ClassificationBundle\Admin\TagAdmin('sonata.classification.admin.tag', 'AppBundle\\Entity\\Classification\\Tag', 'SonataAdminBundle:CRUD', ${($_ = isset($this->services['sonata.classification.manager.context']) ? $this->services['sonata.classification.manager.context'] : $this->get('sonata.classification.manager.context')) && false ?: '_'});

        $instance->setTranslationDomain('SonataClassificationBundle');
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.underscore']) ? $this->services['sonata.admin.label.strategy.underscore'] : $this->get('sonata.admin.label.strategy.underscore')) && false ?: '_'});
        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('label_tags');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['sonata.classification.admin.tag.template_registry']) ? $this->services['sonata.classification.admin.tag.template_registry'] : $this->get('sonata.classification.admin.tag.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'sonata.classification.admin.tag.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getSonata_Classification_Admin_Tag_TemplateRegistryService()
    {
        return $this->services['sonata.classification.admin.tag.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'sonata.classification.api.form.type.category' shared service.
     *
     * @return \Sonata\ClassificationBundle\Form\Type\ApiCategoryType
     */
    protected function getSonata_Classification_Api_Form_Type_CategoryService()
    {
        return $this->services['sonata.classification.api.form.type.category'] = new \Sonata\ClassificationBundle\Form\Type\ApiCategoryType(${($_ = isset($this->services['jms_serializer.metadata_factory']) ? $this->services['jms_serializer.metadata_factory'] : $this->getJmsSerializer_MetadataFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'}, 'sonata_classification_api_form_category', 'AppBundle\\Entity\\Classification\\Category', 'sonata_api_write');
    }

    /**
     * Gets the public 'sonata.classification.api.form.type.collection' shared service.
     *
     * @return \Sonata\ClassificationBundle\Form\Type\ApiCollectionType
     */
    protected function getSonata_Classification_Api_Form_Type_CollectionService()
    {
        return $this->services['sonata.classification.api.form.type.collection'] = new \Sonata\ClassificationBundle\Form\Type\ApiCollectionType(${($_ = isset($this->services['jms_serializer.metadata_factory']) ? $this->services['jms_serializer.metadata_factory'] : $this->getJmsSerializer_MetadataFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'}, 'sonata_classification_api_form_collection', 'AppBundle\\Entity\\Classification\\Collection', 'sonata_api_write');
    }

    /**
     * Gets the public 'sonata.classification.api.form.type.context' shared service.
     *
     * @return \Sonata\ClassificationBundle\Form\Type\ApiContextType
     */
    protected function getSonata_Classification_Api_Form_Type_ContextService()
    {
        return $this->services['sonata.classification.api.form.type.context'] = new \Sonata\ClassificationBundle\Form\Type\ApiContextType(${($_ = isset($this->services['jms_serializer.metadata_factory']) ? $this->services['jms_serializer.metadata_factory'] : $this->getJmsSerializer_MetadataFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'}, 'sonata_classification_api_form_context', 'AppBundle\\Entity\\Classification\\Context', 'sonata_api_write', true);
    }

    /**
     * Gets the public 'sonata.classification.api.form.type.tag' shared service.
     *
     * @return \Sonata\ClassificationBundle\Form\Type\ApiTagType
     */
    protected function getSonata_Classification_Api_Form_Type_TagService()
    {
        return $this->services['sonata.classification.api.form.type.tag'] = new \Sonata\ClassificationBundle\Form\Type\ApiTagType(${($_ = isset($this->services['jms_serializer.metadata_factory']) ? $this->services['jms_serializer.metadata_factory'] : $this->getJmsSerializer_MetadataFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'}, 'sonata_classification_api_form_tag', 'AppBundle\\Entity\\Classification\\Tag', 'sonata_api_write');
    }

    /**
     * Gets the public 'sonata.classification.controller.api.category' shared service.
     *
     * @return \Sonata\ClassificationBundle\Controller\Api\CategoryController
     */
    protected function getSonata_Classification_Controller_Api_CategoryService()
    {
        return $this->services['sonata.classification.controller.api.category'] = new \Sonata\ClassificationBundle\Controller\Api\CategoryController(${($_ = isset($this->services['sonata.classification.manager.category']) ? $this->services['sonata.classification.manager.category'] : $this->get('sonata.classification.manager.category')) && false ?: '_'}, ${($_ = isset($this->services['form.factory']) ? $this->services['form.factory'] : $this->get('form.factory')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.classification.controller.api.collection' shared service.
     *
     * @return \Sonata\ClassificationBundle\Controller\Api\CollectionController
     */
    protected function getSonata_Classification_Controller_Api_CollectionService()
    {
        return $this->services['sonata.classification.controller.api.collection'] = new \Sonata\ClassificationBundle\Controller\Api\CollectionController(${($_ = isset($this->services['sonata.classification.manager.collection']) ? $this->services['sonata.classification.manager.collection'] : $this->get('sonata.classification.manager.collection')) && false ?: '_'}, ${($_ = isset($this->services['form.factory']) ? $this->services['form.factory'] : $this->get('form.factory')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.classification.controller.api.context' shared service.
     *
     * @return \Sonata\ClassificationBundle\Controller\Api\ContextController
     */
    protected function getSonata_Classification_Controller_Api_ContextService()
    {
        return $this->services['sonata.classification.controller.api.context'] = new \Sonata\ClassificationBundle\Controller\Api\ContextController(${($_ = isset($this->services['sonata.classification.manager.context']) ? $this->services['sonata.classification.manager.context'] : $this->get('sonata.classification.manager.context')) && false ?: '_'}, ${($_ = isset($this->services['form.factory']) ? $this->services['form.factory'] : $this->get('form.factory')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.classification.controller.api.tag' shared service.
     *
     * @return \Sonata\ClassificationBundle\Controller\Api\TagController
     */
    protected function getSonata_Classification_Controller_Api_TagService()
    {
        return $this->services['sonata.classification.controller.api.tag'] = new \Sonata\ClassificationBundle\Controller\Api\TagController(${($_ = isset($this->services['sonata.classification.manager.tag']) ? $this->services['sonata.classification.manager.tag'] : $this->get('sonata.classification.manager.tag')) && false ?: '_'}, ${($_ = isset($this->services['form.factory']) ? $this->services['form.factory'] : $this->get('form.factory')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.classification.form.type.category_selector' shared service.
     *
     * @return \Sonata\ClassificationBundle\Form\Type\CategorySelectorType
     */
    protected function getSonata_Classification_Form_Type_CategorySelectorService()
    {
        return $this->services['sonata.classification.form.type.category_selector'] = new \Sonata\ClassificationBundle\Form\Type\CategorySelectorType(${($_ = isset($this->services['sonata.classification.manager.category']) ? $this->services['sonata.classification.manager.category'] : $this->get('sonata.classification.manager.category')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.classification.manager.category' shared service.
     *
     * @return \Sonata\ClassificationBundle\Entity\CategoryManager
     */
    protected function getSonata_Classification_Manager_CategoryService()
    {
        return $this->services['sonata.classification.manager.category'] = new \Sonata\ClassificationBundle\Entity\CategoryManager('AppBundle\\Entity\\Classification\\Category', ${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'}, ${($_ = isset($this->services['sonata.classification.manager.context']) ? $this->services['sonata.classification.manager.context'] : $this->get('sonata.classification.manager.context')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.classification.manager.collection' shared service.
     *
     * @return \Sonata\ClassificationBundle\Entity\CollectionManager
     */
    protected function getSonata_Classification_Manager_CollectionService()
    {
        return $this->services['sonata.classification.manager.collection'] = new \Sonata\ClassificationBundle\Entity\CollectionManager('AppBundle\\Entity\\Classification\\Collection', ${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.classification.manager.context' shared service.
     *
     * @return \Sonata\ClassificationBundle\Entity\ContextManager
     */
    protected function getSonata_Classification_Manager_ContextService()
    {
        return $this->services['sonata.classification.manager.context'] = new \Sonata\ClassificationBundle\Entity\ContextManager('AppBundle\\Entity\\Classification\\Context', ${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.classification.manager.tag' shared service.
     *
     * @return \Sonata\ClassificationBundle\Entity\TagManager
     */
    protected function getSonata_Classification_Manager_TagService()
    {
        return $this->services['sonata.classification.manager.tag'] = new \Sonata\ClassificationBundle\Entity\TagManager('AppBundle\\Entity\\Classification\\Tag', ${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.classification.serializer.handler.category' shared service.
     *
     * @return \Sonata\ClassificationBundle\Serializer\CategorySerializerHandler
     */
    protected function getSonata_Classification_Serializer_Handler_CategoryService()
    {
        return $this->services['sonata.classification.serializer.handler.category'] = new \Sonata\ClassificationBundle\Serializer\CategorySerializerHandler(${($_ = isset($this->services['sonata.classification.manager.category']) ? $this->services['sonata.classification.manager.category'] : $this->get('sonata.classification.manager.category')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.classification.serializer.handler.collection' shared service.
     *
     * @return \Sonata\ClassificationBundle\Serializer\CollectionSerializerHandler
     */
    protected function getSonata_Classification_Serializer_Handler_CollectionService()
    {
        return $this->services['sonata.classification.serializer.handler.collection'] = new \Sonata\ClassificationBundle\Serializer\CollectionSerializerHandler(${($_ = isset($this->services['sonata.classification.manager.collection']) ? $this->services['sonata.classification.manager.collection'] : $this->get('sonata.classification.manager.collection')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.classification.serializer.handler.context' shared service.
     *
     * @return \Sonata\ClassificationBundle\Serializer\ContextSerializerHandler
     */
    protected function getSonata_Classification_Serializer_Handler_ContextService()
    {
        return $this->services['sonata.classification.serializer.handler.context'] = new \Sonata\ClassificationBundle\Serializer\ContextSerializerHandler(${($_ = isset($this->services['sonata.classification.manager.context']) ? $this->services['sonata.classification.manager.context'] : $this->get('sonata.classification.manager.context')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.classification.serializer.handler.tag' shared service.
     *
     * @return \Sonata\ClassificationBundle\Serializer\TagSerializerHandler
     */
    protected function getSonata_Classification_Serializer_Handler_TagService()
    {
        return $this->services['sonata.classification.serializer.handler.tag'] = new \Sonata\ClassificationBundle\Serializer\TagSerializerHandler(${($_ = isset($this->services['sonata.classification.manager.tag']) ? $this->services['sonata.classification.manager.tag'] : $this->get('sonata.classification.manager.tag')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.core.date.moment_format_converter' shared service.
     *
     * @return \Sonata\CoreBundle\Date\MomentFormatConverter
     */
    protected function getSonata_Core_Date_MomentFormatConverterService()
    {
        return $this->services['sonata.core.date.moment_format_converter'] = new \Sonata\CoreBundle\Date\MomentFormatConverter();
    }

    /**
     * Gets the public 'sonata.core.flashmessage.manager' shared service.
     *
     * @return \Sonata\CoreBundle\FlashMessage\FlashManager
     */
    protected function getSonata_Core_Flashmessage_ManagerService()
    {
        return $this->services['sonata.core.flashmessage.manager'] = new \Sonata\CoreBundle\FlashMessage\FlashManager(${($_ = isset($this->services['session']) ? $this->services['session'] : $this->get('session')) && false ?: '_'}, ${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, array('error' => array(), 'success' => array('success' => array('domain' => 'SonataCoreBundle'), 'sonata_flash_success' => array('domain' => 'SonataAdminBundle'), 'sonata_user_success' => array('domain' => 'SonataUserBundle'), 'fos_user_success' => array('domain' => 'FOSUserBundle')), 'warning' => array('warning' => array('domain' => 'SonataCoreBundle'), 'sonata_flash_info' => array('domain' => 'SonataAdminBundle')), 'danger' => array('error' => array('domain' => 'SonataCoreBundle'), 'sonata_flash_error' => array('domain' => 'SonataAdminBundle'), 'sonata_user_error' => array('domain' => 'SonataUserBundle'))), array('error' => 'danger', 'success' => 'success', 'warning' => 'warning', 'danger' => 'danger'));
    }

    /**
     * Gets the public 'sonata.core.flashmessage.twig.extension' shared service.
     *
     * @return \Sonata\CoreBundle\Twig\Extension\FlashMessageExtension
     */
    protected function getSonata_Core_Flashmessage_Twig_ExtensionService()
    {
        return $this->services['sonata.core.flashmessage.twig.extension'] = new \Sonata\CoreBundle\Twig\Extension\FlashMessageExtension(${($_ = isset($this->services['sonata.core.flashmessage.manager']) ? $this->services['sonata.core.flashmessage.manager'] : $this->get('sonata.core.flashmessage.manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.core.form.type.array' shared service.
     *
     * @return \Sonata\CoreBundle\Form\Type\ImmutableArrayType
     */
    protected function getSonata_Core_Form_Type_ArrayService()
    {
        return $this->services['sonata.core.form.type.array'] = new \Sonata\CoreBundle\Form\Type\ImmutableArrayType();
    }

    /**
     * Gets the public 'sonata.core.form.type.boolean' shared service.
     *
     * @return \Sonata\CoreBundle\Form\Type\BooleanType
     */
    protected function getSonata_Core_Form_Type_BooleanService()
    {
        return $this->services['sonata.core.form.type.boolean'] = new \Sonata\CoreBundle\Form\Type\BooleanType();
    }

    /**
     * Gets the public 'sonata.core.form.type.collection' shared service.
     *
     * @return \Sonata\CoreBundle\Form\Type\CollectionType
     */
    protected function getSonata_Core_Form_Type_CollectionService()
    {
        return $this->services['sonata.core.form.type.collection'] = new \Sonata\CoreBundle\Form\Type\CollectionType();
    }

    /**
     * Gets the public 'sonata.core.form.type.color' shared service.
     *
     * @return \Sonata\CoreBundle\Form\Type\ColorType
     */
    protected function getSonata_Core_Form_Type_ColorService()
    {
        return $this->services['sonata.core.form.type.color'] = new \Sonata\CoreBundle\Form\Type\ColorType();
    }

    /**
     * Gets the public 'sonata.core.form.type.color_selector' shared service.
     *
     * @return \Sonata\CoreBundle\Form\Type\ColorSelectorType
     *
     * @deprecated The "sonata.core.form.type.color_selector" service is deprecated since 3.5 and will be removed in 4.0.
     */
    protected function getSonata_Core_Form_Type_ColorSelectorService()
    {
        @trigger_error('The "sonata.core.form.type.color_selector" service is deprecated since 3.5 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['sonata.core.form.type.color_selector'] = new \Sonata\CoreBundle\Form\Type\ColorSelectorType();
    }

    /**
     * Gets the public 'sonata.core.form.type.date_picker' shared service.
     *
     * @return \Sonata\CoreBundle\Form\Type\DatePickerType
     */
    protected function getSonata_Core_Form_Type_DatePickerService()
    {
        return $this->services['sonata.core.form.type.date_picker'] = new \Sonata\CoreBundle\Form\Type\DatePickerType(${($_ = isset($this->services['sonata.core.date.moment_format_converter']) ? $this->services['sonata.core.date.moment_format_converter'] : $this->get('sonata.core.date.moment_format_converter')) && false ?: '_'}, ${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.core.form.type.date_range' shared service.
     *
     * @return \Sonata\CoreBundle\Form\Type\DateRangeType
     */
    protected function getSonata_Core_Form_Type_DateRangeService()
    {
        return $this->services['sonata.core.form.type.date_range'] = new \Sonata\CoreBundle\Form\Type\DateRangeType(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.core.form.type.date_range_picker' shared service.
     *
     * @return \Sonata\CoreBundle\Form\Type\DateRangePickerType
     */
    protected function getSonata_Core_Form_Type_DateRangePickerService()
    {
        return $this->services['sonata.core.form.type.date_range_picker'] = new \Sonata\CoreBundle\Form\Type\DateRangePickerType(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.core.form.type.datetime_picker' shared service.
     *
     * @return \Sonata\CoreBundle\Form\Type\DateTimePickerType
     */
    protected function getSonata_Core_Form_Type_DatetimePickerService()
    {
        return $this->services['sonata.core.form.type.datetime_picker'] = new \Sonata\CoreBundle\Form\Type\DateTimePickerType(${($_ = isset($this->services['sonata.core.date.moment_format_converter']) ? $this->services['sonata.core.date.moment_format_converter'] : $this->get('sonata.core.date.moment_format_converter')) && false ?: '_'}, ${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.core.form.type.datetime_range' shared service.
     *
     * @return \Sonata\CoreBundle\Form\Type\DateTimeRangeType
     */
    protected function getSonata_Core_Form_Type_DatetimeRangeService()
    {
        return $this->services['sonata.core.form.type.datetime_range'] = new \Sonata\CoreBundle\Form\Type\DateTimeRangeType(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.core.form.type.datetime_range_picker' shared service.
     *
     * @return \Sonata\CoreBundle\Form\Type\DateTimeRangePickerType
     */
    protected function getSonata_Core_Form_Type_DatetimeRangePickerService()
    {
        return $this->services['sonata.core.form.type.datetime_range_picker'] = new \Sonata\CoreBundle\Form\Type\DateTimeRangePickerType(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.core.form.type.equal' shared service.
     *
     * @return \Sonata\CoreBundle\Form\Type\EqualType
     */
    protected function getSonata_Core_Form_Type_EqualService()
    {
        return $this->services['sonata.core.form.type.equal'] = new \Sonata\CoreBundle\Form\Type\EqualType(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.core.form.type.translatable_choice' shared service.
     *
     * @return \Sonata\CoreBundle\Form\Type\TranslatableChoiceType
     *
     * @deprecated The "sonata.core.form.type.translatable_choice" service is deprecated since 2.2.0 and will be removed in 4.0.
     */
    protected function getSonata_Core_Form_Type_TranslatableChoiceService()
    {
        @trigger_error('The "sonata.core.form.type.translatable_choice" service is deprecated since 2.2.0 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['sonata.core.form.type.translatable_choice'] = new \Sonata\CoreBundle\Form\Type\TranslatableChoiceType(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.core.model.adapter.chain' shared service.
     *
     * @return \Sonata\CoreBundle\Model\Adapter\AdapterChain
     */
    protected function getSonata_Core_Model_Adapter_ChainService()
    {
        $this->services['sonata.core.model.adapter.chain'] = $instance = new \Sonata\CoreBundle\Model\Adapter\AdapterChain();

        $instance->addAdapter(new \Sonata\CoreBundle\Model\Adapter\DoctrineORMAdapter(${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}));

        return $instance;
    }

    /**
     * Gets the public 'sonata.core.slugify.cocur' shared service.
     *
     * @return \Cocur\Slugify\Slugify
     *
     * @deprecated The "sonata.core.slugify.cocur" service is deprecated. You should stop using it, as it will soon be removed.
     */
    protected function getSonata_Core_Slugify_CocurService()
    {
        @trigger_error('The "sonata.core.slugify.cocur" service is deprecated. You should stop using it, as it will soon be removed.', E_USER_DEPRECATED);

        return $this->services['sonata.core.slugify.cocur'] = new \Cocur\Slugify\Slugify();
    }

    /**
     * Gets the public 'sonata.core.slugify.native' shared service.
     *
     * @return \Sonata\CoreBundle\Component\NativeSlugify
     *
     * @deprecated The "sonata.core.slugify.native" service is deprecated since 2.3 and will be removed in 4.0.
     */
    protected function getSonata_Core_Slugify_NativeService()
    {
        @trigger_error('The "sonata.core.slugify.native" service is deprecated since 2.3 and will be removed in 4.0.', E_USER_DEPRECATED);

        return $this->services['sonata.core.slugify.native'] = new \Sonata\CoreBundle\Component\NativeSlugify();
    }

    /**
     * Gets the public 'sonata.core.twig.deprecated_template_extension' shared service.
     *
     * @return \Sonata\CoreBundle\Twig\Extension\DeprecatedTemplateExtension
     */
    protected function getSonata_Core_Twig_DeprecatedTemplateExtensionService()
    {
        return $this->services['sonata.core.twig.deprecated_template_extension'] = new \Sonata\CoreBundle\Twig\Extension\DeprecatedTemplateExtension();
    }

    /**
     * Gets the public 'sonata.core.twig.extension.text' shared service.
     *
     * @return \Sonata\CoreBundle\Twig\Extension\DeprecatedTextExtension
     */
    protected function getSonata_Core_Twig_Extension_TextService()
    {
        return $this->services['sonata.core.twig.extension.text'] = new \Sonata\CoreBundle\Twig\Extension\DeprecatedTextExtension();
    }

    /**
     * Gets the public 'sonata.core.twig.extension.wrapping' shared service.
     *
     * @return \Sonata\CoreBundle\Twig\Extension\FormTypeExtension
     */
    protected function getSonata_Core_Twig_Extension_WrappingService()
    {
        return $this->services['sonata.core.twig.extension.wrapping'] = new \Sonata\CoreBundle\Twig\Extension\FormTypeExtension('standard');
    }

    /**
     * Gets the public 'sonata.core.twig.status_extension' shared service.
     *
     * @return \Sonata\CoreBundle\Twig\Extension\StatusExtension
     */
    protected function getSonata_Core_Twig_StatusExtensionService()
    {
        $this->services['sonata.core.twig.status_extension'] = $instance = new \Sonata\CoreBundle\Twig\Extension\StatusExtension();

        $instance->addStatusService(${($_ = isset($this->services['sonata.core.flashmessage.manager']) ? $this->services['sonata.core.flashmessage.manager'] : $this->get('sonata.core.flashmessage.manager')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'sonata.core.twig.template_extension' shared service.
     *
     * @return \Sonata\CoreBundle\Twig\Extension\TemplateExtension
     */
    protected function getSonata_Core_Twig_TemplateExtensionService()
    {
        return $this->services['sonata.core.twig.template_extension'] = new \Sonata\CoreBundle\Twig\Extension\TemplateExtension(true, ${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, ${($_ = isset($this->services['sonata.core.model.adapter.chain']) ? $this->services['sonata.core.model.adapter.chain'] : $this->get('sonata.core.model.adapter.chain')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.core.validator.inline' shared service.
     *
     * @return \Sonata\CoreBundle\Validator\InlineValidator
     */
    protected function getSonata_Core_Validator_InlineService()
    {
        return $this->services['sonata.core.validator.inline'] = new \Sonata\CoreBundle\Validator\InlineValidator($this, ${($_ = isset($this->services['validator.validator_factory']) ? $this->services['validator.validator_factory'] : $this->getValidator_ValidatorFactoryService()) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.easy_extends.doctrine.mapper' shared service.
     *
     * @return \Sonata\EasyExtendsBundle\Mapper\DoctrineORMMapper
     */
    protected function getSonata_EasyExtends_Doctrine_MapperService()
    {
        $this->services['sonata.easy_extends.doctrine.mapper'] = $instance = new \Sonata\EasyExtendsBundle\Mapper\DoctrineORMMapper(${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'}, array());

        $instance->addAssociation('AppBundle\\Entity\\User\\User', 'mapManyToMany', array(0 => array('fieldName' => 'groups', 'targetEntity' => 'AppBundle\\Entity\\User\\Group', 'cascade' => array(), 'joinTable' => array('name' => 'security__user_group', 'joinColumns' => array(0 => array('name' => 'user_id', 'referencedColumnName' => 'id', 'onDelete' => 'CASCADE')), 'inverseJoinColumns' => array(0 => array('name' => 'group_id', 'referencedColumnName' => 'id', 'onDelete' => 'CASCADE'))))));
        $instance->addAssociation('AppBundle\\Entity\\Media\\Media', 'mapOneToMany', array(0 => array('fieldName' => 'galleryHasMedias', 'targetEntity' => 'AppBundle\\Entity\\Media\\GalleryHasMedia', 'cascade' => array(0 => 'persist'), 'mappedBy' => 'media', 'orphanRemoval' => false)));
        $instance->addAssociation('AppBundle\\Entity\\Media\\Media', 'mapManyToOne', array(0 => array('fieldName' => 'category', 'targetEntity' => 'AppBundle\\Entity\\Classification\\Category', 'cascade' => array(0 => 'persist'), 'mappedBy' => NULL, 'inversedBy' => NULL, 'joinColumns' => array(0 => array('name' => 'category_id', 'referencedColumnName' => 'id', 'onDelete' => 'SET NULL')), 'orphanRemoval' => false)));
        $instance->addAssociation('AppBundle\\Entity\\Media\\GalleryHasMedia', 'mapManyToOne', array(0 => array('fieldName' => 'gallery', 'targetEntity' => 'AppBundle\\Entity\\Media\\Gallery', 'cascade' => array(0 => 'persist'), 'mappedBy' => NULL, 'inversedBy' => 'galleryHasMedias', 'joinColumns' => array(0 => array('name' => 'gallery_id', 'referencedColumnName' => 'id', 'onDelete' => 'CASCADE')), 'orphanRemoval' => false), 1 => array('fieldName' => 'media', 'targetEntity' => 'AppBundle\\Entity\\Media\\Media', 'cascade' => array(0 => 'persist'), 'mappedBy' => NULL, 'inversedBy' => 'galleryHasMedias', 'joinColumns' => array(0 => array('name' => 'media_id', 'referencedColumnName' => 'id', 'onDelete' => 'CASCADE')), 'orphanRemoval' => false)));
        $instance->addAssociation('AppBundle\\Entity\\Media\\Gallery', 'mapOneToMany', array(0 => array('fieldName' => 'galleryHasMedias', 'targetEntity' => 'AppBundle\\Entity\\Media\\GalleryHasMedia', 'cascade' => array(0 => 'persist'), 'mappedBy' => 'gallery', 'orphanRemoval' => true, 'orderBy' => array('position' => 'ASC'))));
        $instance->addAssociation('AppBundle\\Entity\\Classification\\Category', 'mapOneToMany', array(0 => array('fieldName' => 'children', 'targetEntity' => 'AppBundle\\Entity\\Classification\\Category', 'cascade' => array(0 => 'persist'), 'mappedBy' => 'parent', 'orphanRemoval' => true, 'orderBy' => array('position' => 'ASC'))));
        $instance->addAssociation('AppBundle\\Entity\\Classification\\Category', 'mapManyToOne', array(0 => array('fieldName' => 'parent', 'targetEntity' => 'AppBundle\\Entity\\Classification\\Category', 'cascade' => array(0 => 'persist', 1 => 'refresh', 2 => 'merge', 3 => 'detach'), 'mappedBy' => NULL, 'inversedBy' => 'children', 'joinColumns' => array(0 => array('name' => 'parent_id', 'referencedColumnName' => 'id', 'onDelete' => 'CASCADE')), 'orphanRemoval' => false), 1 => array('fieldName' => 'context', 'targetEntity' => 'AppBundle\\Entity\\Classification\\Context', 'cascade' => array(0 => 'persist'), 'mappedBy' => NULL, 'inversedBy' => NULL, 'joinColumns' => array(0 => array('name' => 'context', 'referencedColumnName' => 'id')), 'orphanRemoval' => false), 2 => array('fieldName' => 'media', 'targetEntity' => 'AppBundle\\Entity\\Media\\Media', 'cascade' => array(0 => 'persist'), 'mappedBy' => NULL, 'inversedBy' => NULL, 'joinColumns' => array(0 => array('name' => 'media_id', 'referencedColumnName' => 'id', 'onDelete' => 'SET NULL')), 'orphanRemoval' => false)));
        $instance->addAssociation('AppBundle\\Entity\\Classification\\Tag', 'mapManyToOne', array(0 => array('fieldName' => 'context', 'targetEntity' => 'AppBundle\\Entity\\Classification\\Context', 'cascade' => array(0 => 'persist'), 'mappedBy' => NULL, 'inversedBy' => NULL, 'joinColumns' => array(0 => array('name' => 'context', 'referencedColumnName' => 'id')), 'orphanRemoval' => false)));
        $instance->addAssociation('AppBundle\\Entity\\Classification\\Collection', 'mapManyToOne', array(0 => array('fieldName' => 'context', 'targetEntity' => 'AppBundle\\Entity\\Classification\\Context', 'cascade' => array(0 => 'persist'), 'mappedBy' => NULL, 'inversedBy' => NULL, 'joinColumns' => array(0 => array('name' => 'context', 'referencedColumnName' => 'id')), 'orphanRemoval' => false), 1 => array('fieldName' => 'media', 'targetEntity' => 'AppBundle\\Entity\\Media\\Media', 'cascade' => array(0 => 'persist'), 'mappedBy' => NULL, 'inversedBy' => NULL, 'joinColumns' => array(0 => array('name' => 'media_id', 'referencedColumnName' => 'id', 'onDelete' => 'SET NULL')), 'orphanRemoval' => false)));
        $instance->addUnique('AppBundle\\Entity\\Classification\\Tag', 'tag_context', array(0 => 'slug', 1 => 'context'));
        $instance->addUnique('AppBundle\\Entity\\Classification\\Collection', 'tag_collection', array(0 => 'slug', 1 => 'context'));

        return $instance;
    }

    /**
     * Gets the public 'sonata.easy_extends.generator.bundle' shared service.
     *
     * @return \Sonata\EasyExtendsBundle\Generator\BundleGenerator
     */
    protected function getSonata_EasyExtends_Generator_BundleService()
    {
        return $this->services['sonata.easy_extends.generator.bundle'] = new \Sonata\EasyExtendsBundle\Generator\BundleGenerator();
    }

    /**
     * Gets the public 'sonata.easy_extends.generator.odm' shared service.
     *
     * @return \Sonata\EasyExtendsBundle\Generator\OdmGenerator
     */
    protected function getSonata_EasyExtends_Generator_OdmService()
    {
        return $this->services['sonata.easy_extends.generator.odm'] = new \Sonata\EasyExtendsBundle\Generator\OdmGenerator();
    }

    /**
     * Gets the public 'sonata.easy_extends.generator.orm' shared service.
     *
     * @return \Sonata\EasyExtendsBundle\Generator\OrmGenerator
     */
    protected function getSonata_EasyExtends_Generator_OrmService()
    {
        return $this->services['sonata.easy_extends.generator.orm'] = new \Sonata\EasyExtendsBundle\Generator\OrmGenerator();
    }

    /**
     * Gets the public 'sonata.easy_extends.generator.phpcr' shared service.
     *
     * @return \Sonata\EasyExtendsBundle\Generator\PHPCRGenerator
     */
    protected function getSonata_EasyExtends_Generator_PhpcrService()
    {
        return $this->services['sonata.easy_extends.generator.phpcr'] = new \Sonata\EasyExtendsBundle\Generator\PHPCRGenerator();
    }

    /**
     * Gets the public 'sonata.easy_extends.generator.serializer' shared service.
     *
     * @return \Sonata\EasyExtendsBundle\Generator\SerializerGenerator
     */
    protected function getSonata_EasyExtends_Generator_SerializerService()
    {
        return $this->services['sonata.easy_extends.generator.serializer'] = new \Sonata\EasyExtendsBundle\Generator\SerializerGenerator();
    }

    /**
     * Gets the public 'sonata.formatter.block.formatter' shared service.
     *
     * @return \Sonata\FormatterBundle\Block\FormatterBlockService
     */
    protected function getSonata_Formatter_Block_FormatterService()
    {
        return $this->services['sonata.formatter.block.formatter'] = new \Sonata\FormatterBundle\Block\FormatterBlockService('sonata.formatter.block.formatter', ${($_ = isset($this->services['sonata.templating']) ? $this->services['sonata.templating'] : $this->get('sonata.templating')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.formatter.ckeditor.extension' shared service.
     *
     * @return \Sonata\FormatterBundle\Admin\CkeditorAdminExtension
     */
    protected function getSonata_Formatter_Ckeditor_ExtensionService()
    {
        return $this->services['sonata.formatter.ckeditor.extension'] = new \Sonata\FormatterBundle\Admin\CkeditorAdminExtension();
    }

    /**
     * Gets the public 'sonata.formatter.form.type.selector' shared service.
     *
     * @return \Sonata\FormatterBundle\Form\Type\FormatterType
     */
    protected function getSonata_Formatter_Form_Type_SelectorService()
    {
        return $this->services['sonata.formatter.form.type.selector'] = new \Sonata\FormatterBundle\Form\Type\FormatterType(${($_ = isset($this->services['sonata.formatter.pool']) ? $this->services['sonata.formatter.pool'] : $this->get('sonata.formatter.pool')) && false ?: '_'}, ${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, ${($_ = isset($this->services['ivory_ck_editor.config_manager']) ? $this->services['ivory_ck_editor.config_manager'] : $this->get('ivory_ck_editor.config_manager')) && false ?: '_'}, ${($_ = isset($this->services['ivory_ck_editor.plugin_manager']) ? $this->services['ivory_ck_editor.plugin_manager'] : $this->get('ivory_ck_editor.plugin_manager')) && false ?: '_'}, ${($_ = isset($this->services['ivory_ck_editor.template_manager']) ? $this->services['ivory_ck_editor.template_manager'] : $this->get('ivory_ck_editor.template_manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.formatter.form.type.simple' shared service.
     *
     * @return \Sonata\FormatterBundle\Form\Type\SimpleFormatterType
     */
    protected function getSonata_Formatter_Form_Type_SimpleService()
    {
        return $this->services['sonata.formatter.form.type.simple'] = new \Sonata\FormatterBundle\Form\Type\SimpleFormatterType(${($_ = isset($this->services['ivory_ck_editor.config_manager']) ? $this->services['ivory_ck_editor.config_manager'] : $this->get('ivory_ck_editor.config_manager')) && false ?: '_'}, ${($_ = isset($this->services['ivory_ck_editor.plugin_manager']) ? $this->services['ivory_ck_editor.plugin_manager'] : $this->get('ivory_ck_editor.plugin_manager')) && false ?: '_'}, ${($_ = isset($this->services['ivory_ck_editor.template_manager']) ? $this->services['ivory_ck_editor.template_manager'] : $this->get('ivory_ck_editor.template_manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.formatter.pool' shared service.
     *
     * @return \Sonata\FormatterBundle\Formatter\Pool
     */
    protected function getSonata_Formatter_PoolService()
    {
        $a = ${($_ = isset($this->services['sonata.formatter.text.raw']) ? $this->services['sonata.formatter.text.raw'] : $this->get('sonata.formatter.text.raw')) && false ?: '_'};

        $this->services['sonata.formatter.pool'] = $instance = new \Sonata\FormatterBundle\Formatter\Pool('markdown');

        $instance->setLogger(${($_ = isset($this->services['logger']) ? $this->services['logger'] : $this->get('logger')) && false ?: '_'});
        $instance->add('markdown', ${($_ = isset($this->services['sonata.formatter.text.markdown']) ? $this->services['sonata.formatter.text.markdown'] : $this->get('sonata.formatter.text.markdown')) && false ?: '_'}, ${($_ = isset($this->services['sonata.formatter.twig.env.markdown']) ? $this->services['sonata.formatter.twig.env.markdown'] : $this->getSonata_Formatter_Twig_Env_MarkdownService()) && false ?: '_'});
        $instance->add('text', ${($_ = isset($this->services['sonata.formatter.text.text']) ? $this->services['sonata.formatter.text.text'] : $this->get('sonata.formatter.text.text')) && false ?: '_'}, ${($_ = isset($this->services['sonata.formatter.twig.env.text']) ? $this->services['sonata.formatter.twig.env.text'] : $this->getSonata_Formatter_Twig_Env_TextService()) && false ?: '_'});
        $instance->add('rawhtml', $a, ${($_ = isset($this->services['sonata.formatter.twig.env.rawhtml']) ? $this->services['sonata.formatter.twig.env.rawhtml'] : $this->getSonata_Formatter_Twig_Env_RawhtmlService()) && false ?: '_'});
        $instance->add('richhtml', $a, ${($_ = isset($this->services['sonata.formatter.twig.env.richhtml']) ? $this->services['sonata.formatter.twig.env.richhtml'] : $this->getSonata_Formatter_Twig_Env_RichhtmlService()) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'sonata.formatter.text.markdown' shared service.
     *
     * @return \Sonata\FormatterBundle\Formatter\MarkdownFormatter
     */
    protected function getSonata_Formatter_Text_MarkdownService()
    {
        return $this->services['sonata.formatter.text.markdown'] = new \Sonata\FormatterBundle\Formatter\MarkdownFormatter(${($_ = isset($this->services['markdown.parser']) ? $this->services['markdown.parser'] : $this->get('markdown.parser')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.formatter.text.raw' shared service.
     *
     * @return \Sonata\FormatterBundle\Formatter\RawFormatter
     */
    protected function getSonata_Formatter_Text_RawService()
    {
        return $this->services['sonata.formatter.text.raw'] = new \Sonata\FormatterBundle\Formatter\RawFormatter();
    }

    /**
     * Gets the public 'sonata.formatter.text.text' shared service.
     *
     * @return \Sonata\FormatterBundle\Formatter\TextFormatter
     */
    protected function getSonata_Formatter_Text_TextService()
    {
        return $this->services['sonata.formatter.text.text'] = new \Sonata\FormatterBundle\Formatter\TextFormatter();
    }

    /**
     * Gets the public 'sonata.formatter.text.twigengine' shared service.
     *
     * @return \Sonata\FormatterBundle\Formatter\TwigFormatter
     */
    protected function getSonata_Formatter_Text_TwigengineService()
    {
        return $this->services['sonata.formatter.text.twigengine'] = new \Sonata\FormatterBundle\Formatter\TwigFormatter(${($_ = isset($this->services['twig']) ? $this->services['twig'] : $this->get('twig')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.formatter.twig.control_flow' shared service.
     *
     * @return \Sonata\FormatterBundle\Extension\ControlFlowExtension
     */
    protected function getSonata_Formatter_Twig_ControlFlowService()
    {
        return $this->services['sonata.formatter.twig.control_flow'] = new \Sonata\FormatterBundle\Extension\ControlFlowExtension();
    }

    /**
     * Gets the public 'sonata.formatter.twig.gist' shared service.
     *
     * @return \Sonata\FormatterBundle\Extension\GistExtension
     */
    protected function getSonata_Formatter_Twig_GistService()
    {
        return $this->services['sonata.formatter.twig.gist'] = new \Sonata\FormatterBundle\Extension\GistExtension();
    }

    /**
     * Gets the public 'sonata.formatter.validator.formatter' shared service.
     *
     * @return \Sonata\FormatterBundle\Validator\Constraints\FormatterValidator
     */
    protected function getSonata_Formatter_Validator_FormatterService()
    {
        return $this->services['sonata.formatter.validator.formatter'] = new \Sonata\FormatterBundle\Validator\Constraints\FormatterValidator(${($_ = isset($this->services['sonata.formatter.pool']) ? $this->services['sonata.formatter.pool'] : $this->get('sonata.formatter.pool')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.intl.locale_detector.request_stack' shared service.
     *
     * @return \Sonata\IntlBundle\Locale\RequestStackDetector
     */
    protected function getSonata_Intl_LocaleDetector_RequestStackService()
    {
        return $this->services['sonata.intl.locale_detector.request_stack'] = new \Sonata\IntlBundle\Locale\RequestStackDetector(${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'}, 'es');
    }

    /**
     * Gets the public 'sonata.intl.templating.helper.datetime' shared service.
     *
     * @return \Sonata\IntlBundle\Templating\Helper\DateTimeHelper
     */
    protected function getSonata_Intl_Templating_Helper_DatetimeService()
    {
        return $this->services['sonata.intl.templating.helper.datetime'] = new \Sonata\IntlBundle\Templating\Helper\DateTimeHelper(${($_ = isset($this->services['sonata.intl.timezone_detector.chain']) ? $this->services['sonata.intl.timezone_detector.chain'] : $this->get('sonata.intl.timezone_detector.chain')) && false ?: '_'}, 'UTF-8', ${($_ = isset($this->services['sonata.intl.locale_detector.request_stack']) ? $this->services['sonata.intl.locale_detector.request_stack'] : $this->get('sonata.intl.locale_detector.request_stack')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.intl.templating.helper.locale' shared service.
     *
     * @return \Sonata\IntlBundle\Templating\Helper\LocaleHelper
     */
    protected function getSonata_Intl_Templating_Helper_LocaleService()
    {
        return $this->services['sonata.intl.templating.helper.locale'] = new \Sonata\IntlBundle\Templating\Helper\LocaleHelper('UTF-8', ${($_ = isset($this->services['sonata.intl.locale_detector.request_stack']) ? $this->services['sonata.intl.locale_detector.request_stack'] : $this->get('sonata.intl.locale_detector.request_stack')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.intl.templating.helper.number' shared service.
     *
     * @return \Sonata\IntlBundle\Templating\Helper\NumberHelper
     */
    protected function getSonata_Intl_Templating_Helper_NumberService()
    {
        return $this->services['sonata.intl.templating.helper.number'] = new \Sonata\IntlBundle\Templating\Helper\NumberHelper('UTF-8', ${($_ = isset($this->services['sonata.intl.locale_detector.request_stack']) ? $this->services['sonata.intl.locale_detector.request_stack'] : $this->get('sonata.intl.locale_detector.request_stack')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.intl.timezone_detector.chain' shared service.
     *
     * @return \Sonata\IntlBundle\Timezone\ChainTimezoneDetector
     */
    protected function getSonata_Intl_TimezoneDetector_ChainService()
    {
        $this->services['sonata.intl.timezone_detector.chain'] = $instance = new \Sonata\IntlBundle\Timezone\ChainTimezoneDetector('Europe/Berlin');

        $instance->addDetector(${($_ = isset($this->services['sonata.intl.timezone_detector.user']) ? $this->services['sonata.intl.timezone_detector.user'] : $this->get('sonata.intl.timezone_detector.user')) && false ?: '_'});
        $instance->addDetector(${($_ = isset($this->services['sonata.intl.timezone_detector.locale']) ? $this->services['sonata.intl.timezone_detector.locale'] : $this->get('sonata.intl.timezone_detector.locale')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'sonata.intl.timezone_detector.locale' shared service.
     *
     * @return \Sonata\IntlBundle\Timezone\LocaleBasedTimezoneDetector
     */
    protected function getSonata_Intl_TimezoneDetector_LocaleService()
    {
        return $this->services['sonata.intl.timezone_detector.locale'] = new \Sonata\IntlBundle\Timezone\LocaleBasedTimezoneDetector(${($_ = isset($this->services['sonata.intl.locale_detector.request_stack']) ? $this->services['sonata.intl.locale_detector.request_stack'] : $this->get('sonata.intl.locale_detector.request_stack')) && false ?: '_'}, array());
    }

    /**
     * Gets the public 'sonata.intl.timezone_detector.user' shared service.
     *
     * @return \Sonata\IntlBundle\Timezone\UserBasedTimezoneDetector
     */
    protected function getSonata_Intl_TimezoneDetector_UserService()
    {
        return $this->services['sonata.intl.timezone_detector.user'] = new \Sonata\IntlBundle\Timezone\UserBasedTimezoneDetector(${($_ = isset($this->services['security.token_storage']) ? $this->services['security.token_storage'] : $this->get('security.token_storage')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.media.adapter.filesystem.local' shared service.
     *
     * @return \Sonata\MediaBundle\Filesystem\Local
     */
    protected function getSonata_Media_Adapter_Filesystem_LocalService()
    {
        return $this->services['sonata.media.adapter.filesystem.local'] = new \Sonata\MediaBundle\Filesystem\Local(($this->targetDirs[3].'\\app/../web/uploads/media'), true);
    }

    /**
     * Gets the public 'sonata.media.adapter.image.gd' shared service.
     *
     * @return \Imagine\Gd\Imagine
     */
    protected function getSonata_Media_Adapter_Image_GdService()
    {
        return $this->services['sonata.media.adapter.image.gd'] = new \Imagine\Gd\Imagine();
    }

    /**
     * Gets the public 'sonata.media.adapter.image.gmagick' shared service.
     *
     * @return \Imagine\Gmagick\Imagine
     */
    protected function getSonata_Media_Adapter_Image_GmagickService()
    {
        return $this->services['sonata.media.adapter.image.gmagick'] = new \Imagine\Gmagick\Imagine();
    }

    /**
     * Gets the public 'sonata.media.adapter.image.imagick' shared service.
     *
     * @return \Imagine\Imagick\Imagine
     */
    protected function getSonata_Media_Adapter_Image_ImagickService()
    {
        return $this->services['sonata.media.adapter.image.imagick'] = new \Imagine\Imagick\Imagine();
    }

    /**
     * Gets the public 'sonata.media.adapter.service.s3' shared service.
     *
     * @return \Aws\S3\S3Client
     */
    protected function getSonata_Media_Adapter_Service_S3Service()
    {
        return $this->services['sonata.media.adapter.service.s3'] = \Aws\S3\S3Client::factory(array());
    }

    /**
     * Gets the public 'sonata.media.admin.gallery' service.
     *
     * @return \Sonata\MediaBundle\Admin\GalleryAdmin
     */
    protected function getSonata_Media_Admin_GalleryService()
    {
        $instance = new \Sonata\MediaBundle\Admin\GalleryAdmin('sonata.media.admin.gallery', 'AppBundle\\Entity\\Media\\Gallery', 'SonataMediaBundle:GalleryAdmin', ${($_ = isset($this->services['sonata.media.pool']) ? $this->services['sonata.media.pool'] : $this->get('sonata.media.pool')) && false ?: '_'});

        $instance->setTranslationDomain('SonataMediaBundle');
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.underscore']) ? $this->services['sonata.admin.label.strategy.underscore'] : $this->get('sonata.admin.label.strategy.underscore')) && false ?: '_'});
        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('gallery');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['sonata.media.admin.gallery.template_registry']) ? $this->services['sonata.media.admin.gallery.template_registry'] : $this->get('sonata.media.admin.gallery.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'sonata.media.admin.gallery.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getSonata_Media_Admin_Gallery_TemplateRegistryService()
    {
        return $this->services['sonata.media.admin.gallery.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => '@SonataMedia/GalleryAdmin/list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'sonata.media.admin.gallery_has_media' service.
     *
     * @return \Sonata\MediaBundle\Admin\GalleryHasMediaAdmin
     */
    protected function getSonata_Media_Admin_GalleryHasMediaService()
    {
        $instance = new \Sonata\MediaBundle\Admin\GalleryHasMediaAdmin('sonata.media.admin.gallery_has_media', 'AppBundle\\Entity\\Media\\GalleryHasMedia', 'SonataAdminBundle:CRUD');

        $instance->setTranslationDomain('SonataMediaBundle');
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.underscore']) ? $this->services['sonata.admin.label.strategy.underscore'] : $this->get('sonata.admin.label.strategy.underscore')) && false ?: '_'});
        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('gallery_has_media');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['sonata.media.admin.gallery_has_media.template_registry']) ? $this->services['sonata.media.admin.gallery_has_media.template_registry'] : $this->get('sonata.media.admin.gallery_has_media.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'sonata.media.admin.gallery_has_media.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getSonata_Media_Admin_GalleryHasMedia_TemplateRegistryService()
    {
        return $this->services['sonata.media.admin.gallery_has_media.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'sonata.media.admin.media' service.
     *
     * @return \Sonata\MediaBundle\Admin\ORM\MediaAdmin
     */
    protected function getSonata_Media_Admin_MediaService()
    {
        $instance = new \Sonata\MediaBundle\Admin\ORM\MediaAdmin('sonata.media.admin.media', 'AppBundle\\Entity\\Media\\Media', 'SonataMediaBundle:MediaAdmin', ${($_ = isset($this->services['sonata.media.pool']) ? $this->services['sonata.media.pool'] : $this->get('sonata.media.pool')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.manager.category.default']) ? $this->services['sonata.media.manager.category.default'] : $this->get('sonata.media.manager.category.default', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});

        $instance->setModelManager(${($_ = isset($this->services['sonata.media.admin.media.manager']) ? $this->services['sonata.media.admin.media.manager'] : $this->get('sonata.media.admin.media.manager')) && false ?: '_'});
        $instance->setTranslationDomain('SonataMediaBundle');
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.underscore']) ? $this->services['sonata.admin.label.strategy.underscore'] : $this->get('sonata.admin.label.strategy.underscore')) && false ?: '_'});
        $instance->setManagerType('orm');
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('media');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['sonata.media.admin.media.template_registry']) ? $this->services['sonata.media.admin.media.template_registry'] : $this->get('sonata.media.admin.media.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.formatter.ckeditor.extension']) ? $this->services['sonata.formatter.ckeditor.extension'] : $this->get('sonata.formatter.ckeditor.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'sonata.media.admin.media.manager' shared service.
     *
     * @return \Sonata\DoctrineORMAdminBundle\Model\ModelManager
     */
    protected function getSonata_Media_Admin_Media_ManagerService()
    {
        return $this->services['sonata.media.admin.media.manager'] = new \Sonata\DoctrineORMAdminBundle\Model\ModelManager(${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.media.admin.media.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getSonata_Media_Admin_Media_TemplateRegistryService()
    {
        return $this->services['sonata.media.admin.media.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => '@SonataMedia/MediaAdmin/list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => '@SonataMedia/MediaAdmin/edit.html.twig', 'base_list_field' => '@SonataAdmin/CRUD/base_list_flat_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataMedia/MediaAdmin/inner_row_media.html.twig', 'outer_list_rows_mosaic' => '@SonataMedia/MediaAdmin/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'sonata.media.api.form.type.doctrine.media' shared service.
     *
     * @return \Sonata\MediaBundle\Form\Type\ApiDoctrineMediaType
     */
    protected function getSonata_Media_Api_Form_Type_Doctrine_MediaService()
    {
        return $this->services['sonata.media.api.form.type.doctrine.media'] = new \Sonata\MediaBundle\Form\Type\ApiDoctrineMediaType(${($_ = isset($this->services['jms_serializer.metadata_factory']) ? $this->services['jms_serializer.metadata_factory'] : $this->getJmsSerializer_MetadataFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'}, 'sonata_media_api_form_doctrine_media', 'AppBundle\\Entity\\Media\\Media', 'sonata_api_write');
    }

    /**
     * Gets the public 'sonata.media.api.form.type.gallery' shared service.
     *
     * @return \Sonata\MediaBundle\Form\Type\ApiGalleryType
     */
    protected function getSonata_Media_Api_Form_Type_GalleryService()
    {
        return $this->services['sonata.media.api.form.type.gallery'] = new \Sonata\MediaBundle\Form\Type\ApiGalleryType(${($_ = isset($this->services['jms_serializer.metadata_factory']) ? $this->services['jms_serializer.metadata_factory'] : $this->getJmsSerializer_MetadataFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'}, 'sonata_media_api_form_gallery', 'AppBundle\\Entity\\Media\\Gallery', 'sonata_api_write');
    }

    /**
     * Gets the public 'sonata.media.api.form.type.gallery_has_media' shared service.
     *
     * @return \Sonata\MediaBundle\Form\Type\ApiGalleryHasMediaType
     */
    protected function getSonata_Media_Api_Form_Type_GalleryHasMediaService()
    {
        return $this->services['sonata.media.api.form.type.gallery_has_media'] = new \Sonata\MediaBundle\Form\Type\ApiGalleryHasMediaType(${($_ = isset($this->services['jms_serializer.metadata_factory']) ? $this->services['jms_serializer.metadata_factory'] : $this->getJmsSerializer_MetadataFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'}, 'sonata_media_api_form_gallery_has_media', 'AppBundle\\Entity\\Media\\GalleryHasMedia', 'sonata_api_write');
    }

    /**
     * Gets the public 'sonata.media.api.form.type.media' shared service.
     *
     * @return \Sonata\MediaBundle\Form\Type\ApiMediaType
     */
    protected function getSonata_Media_Api_Form_Type_MediaService()
    {
        $this->services['sonata.media.api.form.type.media'] = $instance = new \Sonata\MediaBundle\Form\Type\ApiMediaType(${($_ = isset($this->services['sonata.media.pool']) ? $this->services['sonata.media.pool'] : $this->get('sonata.media.pool')) && false ?: '_'}, 'AppBundle\\Entity\\Media\\Media');

        if ($this->has('logger')) {
            $instance->setLogger(${($_ = isset($this->services['logger']) ? $this->services['logger'] : $this->get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
        }

        return $instance;
    }

    /**
     * Gets the public 'sonata.media.block.feature_media' shared service.
     *
     * @return \Sonata\MediaBundle\Block\FeatureMediaBlockService
     */
    protected function getSonata_Media_Block_FeatureMediaService()
    {
        return $this->services['sonata.media.block.feature_media'] = new \Sonata\MediaBundle\Block\FeatureMediaBlockService('sonata.media.block.feature_media', ${($_ = isset($this->services['sonata.templating']) ? $this->services['sonata.templating'] : $this->get('sonata.templating')) && false ?: '_'}, $this, ${($_ = isset($this->services['sonata.media.manager.media']) ? $this->services['sonata.media.manager.media'] : $this->get('sonata.media.manager.media')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.media.block.gallery' shared service.
     *
     * @return \Sonata\MediaBundle\Block\GalleryBlockService
     */
    protected function getSonata_Media_Block_GalleryService()
    {
        return $this->services['sonata.media.block.gallery'] = new \Sonata\MediaBundle\Block\GalleryBlockService('sonata.media.block.gallery', ${($_ = isset($this->services['sonata.templating']) ? $this->services['sonata.templating'] : $this->get('sonata.templating')) && false ?: '_'}, $this, ${($_ = isset($this->services['sonata.media.manager.gallery']) ? $this->services['sonata.media.manager.gallery'] : $this->get('sonata.media.manager.gallery')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.media.block.gallery_list' shared service.
     *
     * @return \Sonata\MediaBundle\Block\GalleryListBlockService
     */
    protected function getSonata_Media_Block_GalleryListService()
    {
        return $this->services['sonata.media.block.gallery_list'] = new \Sonata\MediaBundle\Block\GalleryListBlockService('sonata.media.block.gallery_list', ${($_ = isset($this->services['sonata.templating']) ? $this->services['sonata.templating'] : $this->get('sonata.templating')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.manager.gallery']) ? $this->services['sonata.media.manager.gallery'] : $this->get('sonata.media.manager.gallery')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.pool']) ? $this->services['sonata.media.pool'] : $this->get('sonata.media.pool')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.media.block.media' shared service.
     *
     * @return \Sonata\MediaBundle\Block\MediaBlockService
     */
    protected function getSonata_Media_Block_MediaService()
    {
        return $this->services['sonata.media.block.media'] = new \Sonata\MediaBundle\Block\MediaBlockService('sonata.media.block.media', ${($_ = isset($this->services['sonata.templating']) ? $this->services['sonata.templating'] : $this->get('sonata.templating')) && false ?: '_'}, $this, ${($_ = isset($this->services['sonata.media.manager.media']) ? $this->services['sonata.media.manager.media'] : $this->get('sonata.media.manager.media')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.media.buzz.browser' shared service.
     *
     * @return \Buzz\Browser
     */
    protected function getSonata_Media_Buzz_BrowserService()
    {
        return $this->services['sonata.media.buzz.browser'] = new \Buzz\Browser(${($_ = isset($this->services['sonata.media.buzz.connector.curl']) ? $this->services['sonata.media.buzz.connector.curl'] : $this->get('sonata.media.buzz.connector.curl')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.media.buzz.connector.curl' shared service.
     *
     * @return \Buzz\Client\Curl
     */
    protected function getSonata_Media_Buzz_Connector_CurlService()
    {
        $this->services['sonata.media.buzz.connector.curl'] = $instance = new \Buzz\Client\Curl();

        $instance->setIgnoreErrors(true);
        $instance->setMaxRedirects(5);
        $instance->setTimeout(5);
        $instance->setVerifyPeer(true);
        $instance->setProxy(NULL);

        return $instance;
    }

    /**
     * Gets the public 'sonata.media.buzz.connector.file_get_contents' shared service.
     *
     * @return \Buzz\Client\FileGetContents
     */
    protected function getSonata_Media_Buzz_Connector_FileGetContentsService()
    {
        $this->services['sonata.media.buzz.connector.file_get_contents'] = $instance = new \Buzz\Client\FileGetContents();

        $instance->setIgnoreErrors(true);
        $instance->setMaxRedirects(5);
        $instance->setTimeout(5);
        $instance->setVerifyPeer(true);
        $instance->setProxy(NULL);

        return $instance;
    }

    /**
     * Gets the public 'sonata.media.cdn.server' shared service.
     *
     * @return \Sonata\MediaBundle\CDN\Server
     */
    protected function getSonata_Media_Cdn_ServerService()
    {
        return $this->services['sonata.media.cdn.server'] = new \Sonata\MediaBundle\CDN\Server('/uploads/media');
    }

    /**
     * Gets the public 'sonata.media.controller.api.gallery' shared service.
     *
     * @return \Sonata\MediaBundle\Controller\Api\GalleryController
     */
    protected function getSonata_Media_Controller_Api_GalleryService()
    {
        return $this->services['sonata.media.controller.api.gallery'] = new \Sonata\MediaBundle\Controller\Api\GalleryController(${($_ = isset($this->services['sonata.media.manager.gallery']) ? $this->services['sonata.media.manager.gallery'] : $this->get('sonata.media.manager.gallery')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.manager.media']) ? $this->services['sonata.media.manager.media'] : $this->get('sonata.media.manager.media')) && false ?: '_'}, ${($_ = isset($this->services['form.factory']) ? $this->services['form.factory'] : $this->get('form.factory')) && false ?: '_'}, 'AppBundle\\Entity\\Media\\GalleryHasMedia');
    }

    /**
     * Gets the public 'sonata.media.controller.api.media' shared service.
     *
     * @return \Sonata\MediaBundle\Controller\Api\MediaController
     */
    protected function getSonata_Media_Controller_Api_MediaService()
    {
        return $this->services['sonata.media.controller.api.media'] = new \Sonata\MediaBundle\Controller\Api\MediaController(${($_ = isset($this->services['sonata.media.manager.media']) ? $this->services['sonata.media.manager.media'] : $this->get('sonata.media.manager.media')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.pool']) ? $this->services['sonata.media.pool'] : $this->get('sonata.media.pool')) && false ?: '_'}, ${($_ = isset($this->services['form.factory']) ? $this->services['form.factory'] : $this->get('form.factory')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.media.doctrine.event_subscriber' shared service.
     *
     * @return \Sonata\MediaBundle\Listener\ORM\MediaEventSubscriber
     */
    protected function getSonata_Media_Doctrine_EventSubscriberService()
    {
        return $this->services['sonata.media.doctrine.event_subscriber'] = new \Sonata\MediaBundle\Listener\ORM\MediaEventSubscriber($this);
    }

    /**
     * Gets the public 'sonata.media.extra.pixlr' shared service.
     *
     * @return \Sonata\MediaBundle\Extra\Pixlr
     */
    protected function getSonata_Media_Extra_PixlrService()
    {
        return $this->services['sonata.media.extra.pixlr'] = new \Sonata\MediaBundle\Extra\Pixlr('Project', '84c575361242bf2cdfc2129a0af5d9d14ffbdae9', ${($_ = isset($this->services['sonata.media.pool']) ? $this->services['sonata.media.pool'] : $this->get('sonata.media.pool')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.manager.media']) ? $this->services['sonata.media.manager.media'] : $this->get('sonata.media.manager.media')) && false ?: '_'}, ${($_ = isset($this->services['router']) ? $this->services['router'] : $this->get('router')) && false ?: '_'}, ${($_ = isset($this->services['sonata.templating']) ? $this->services['sonata.templating'] : $this->get('sonata.templating')) && false ?: '_'}, $this);
    }

    /**
     * Gets the public 'sonata.media.filesystem.local' shared service.
     *
     * @return \Gaufrette\Filesystem
     */
    protected function getSonata_Media_Filesystem_LocalService()
    {
        return $this->services['sonata.media.filesystem.local'] = new \Gaufrette\Filesystem(${($_ = isset($this->services['sonata.media.adapter.filesystem.local']) ? $this->services['sonata.media.adapter.filesystem.local'] : $this->get('sonata.media.adapter.filesystem.local')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.media.form.type.media' shared service.
     *
     * @return \Sonata\MediaBundle\Form\Type\MediaType
     */
    protected function getSonata_Media_Form_Type_MediaService()
    {
        $this->services['sonata.media.form.type.media'] = $instance = new \Sonata\MediaBundle\Form\Type\MediaType(${($_ = isset($this->services['sonata.media.pool']) ? $this->services['sonata.media.pool'] : $this->get('sonata.media.pool')) && false ?: '_'}, 'AppBundle\\Entity\\Media\\Media');

        if ($this->has('logger')) {
            $instance->setLogger(${($_ = isset($this->services['logger']) ? $this->services['logger'] : $this->get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
        }

        return $instance;
    }

    /**
     * Gets the public 'sonata.media.formatter.twig' shared service.
     *
     * @return \Sonata\MediaBundle\Twig\Extension\FormatterMediaExtension
     */
    protected function getSonata_Media_Formatter_TwigService()
    {
        return $this->services['sonata.media.formatter.twig'] = new \Sonata\MediaBundle\Twig\Extension\FormatterMediaExtension(${($_ = isset($this->services['sonata.media.twig.extension']) ? $this->services['sonata.media.twig.extension'] : $this->get('sonata.media.twig.extension')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.media.generator.default' shared service.
     *
     * @return \Sonata\MediaBundle\Generator\DefaultGenerator
     */
    protected function getSonata_Media_Generator_DefaultService()
    {
        return $this->services['sonata.media.generator.default'] = new \Sonata\MediaBundle\Generator\DefaultGenerator();
    }

    /**
     * Gets the public 'sonata.media.manager.category.default' shared service.
     *
     * @return \Sonata\MediaBundle\Model\CategoryManager
     */
    protected function getSonata_Media_Manager_Category_DefaultService()
    {
        return $this->services['sonata.media.manager.category.default'] = new \Sonata\MediaBundle\Model\CategoryManager(${($_ = isset($this->services['sonata.classification.manager.category']) ? $this->services['sonata.classification.manager.category'] : $this->get('sonata.classification.manager.category', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.media.manager.gallery' shared service.
     *
     * @return \Sonata\MediaBundle\Entity\GalleryManager
     */
    protected function getSonata_Media_Manager_GalleryService()
    {
        return $this->services['sonata.media.manager.gallery'] = new \Sonata\MediaBundle\Entity\GalleryManager('AppBundle\\Entity\\Media\\Gallery', ${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.media.manager.media' shared service.
     *
     * @return \Sonata\MediaBundle\Entity\MediaManager
     */
    protected function getSonata_Media_Manager_MediaService()
    {
        return $this->services['sonata.media.manager.media'] = new \Sonata\MediaBundle\Entity\MediaManager('AppBundle\\Entity\\Media\\Media', ${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.media.metadata.amazon' shared service.
     *
     * @return \Sonata\MediaBundle\Metadata\AmazonMetadataBuilder
     */
    protected function getSonata_Media_Metadata_AmazonService()
    {
        return $this->services['sonata.media.metadata.amazon'] = new \Sonata\MediaBundle\Metadata\AmazonMetadataBuilder();
    }

    /**
     * Gets the public 'sonata.media.metadata.noop' shared service.
     *
     * @return \Sonata\MediaBundle\Metadata\NoopMetadataBuilder
     */
    protected function getSonata_Media_Metadata_NoopService()
    {
        return $this->services['sonata.media.metadata.noop'] = new \Sonata\MediaBundle\Metadata\NoopMetadataBuilder();
    }

    /**
     * Gets the public 'sonata.media.metadata.proxy' shared service.
     *
     * @return \Sonata\MediaBundle\Metadata\ProxyMetadataBuilder
     */
    protected function getSonata_Media_Metadata_ProxyService()
    {
        return $this->services['sonata.media.metadata.proxy'] = new \Sonata\MediaBundle\Metadata\ProxyMetadataBuilder($this);
    }

    /**
     * Gets the public 'sonata.media.pool' shared service.
     *
     * @return \Sonata\MediaBundle\Provider\Pool
     */
    protected function getSonata_Media_PoolService()
    {
        $this->services['sonata.media.pool'] = $instance = new \Sonata\MediaBundle\Provider\Pool('default');

        $instance->addContext('default', array(0 => 'sonata.media.provider.dailymotion', 1 => 'sonata.media.provider.youtube', 2 => 'sonata.media.provider.image', 3 => 'sonata.media.provider.file', 4 => 'sonata.media.provider.vimeo'), array('default_small' => array('width' => 100, 'quality' => 100, 'height' => false, 'format' => 'jpg', 'constraint' => true), 'default_big' => array('width' => 970, 'quality' => 100, 'height' => false, 'format' => 'jpg', 'constraint' => true)), array('mode' => 'http', 'strategy' => 'sonata.media.security.superadmin_strategy'));
        $instance->addContext('users', array(0 => 'sonata.media.provider.image'), array('users_admin' => array('width' => 75, 'quality' => 75, 'height' => false, 'format' => 'jpg', 'constraint' => true), 'users_avatar' => array('width' => 100, 'quality' => 100, 'height' => false, 'format' => 'jpg', 'constraint' => true), 'users_small' => array('width' => 300, 'quality' => 100, 'height' => false, 'format' => 'jpg', 'constraint' => true), 'users_large' => array('width' => 750, 'quality' => 100, 'height' => false, 'format' => 'jpg', 'constraint' => true), 'users_wide' => array('width' => 820, 'quality' => 100, 'height' => false, 'format' => 'jpg', 'constraint' => true)), array('strategy' => 'sonata.media.security.superadmin_strategy', 'mode' => 'http'));
        $instance->addContext('sonata_collection', array(0 => 'sonata.media.provider.image'), array('sonata_collection_preview' => array('width' => 100, 'quality' => 100, 'height' => false, 'format' => 'jpg', 'constraint' => true), 'sonata_collection_wide' => array('width' => 820, 'quality' => 100, 'height' => false, 'format' => 'jpg', 'constraint' => true)), array('strategy' => 'sonata.media.security.superadmin_strategy', 'mode' => 'http'));
        $instance->addContext('sonata_category', array(0 => 'sonata.media.provider.image'), array('sonata_category_preview' => array('width' => 100, 'quality' => 100, 'height' => false, 'format' => 'jpg', 'constraint' => true), 'sonata_category_wide' => array('width' => 820, 'quality' => 100, 'height' => false, 'format' => 'jpg', 'constraint' => true)), array('strategy' => 'sonata.media.security.superadmin_strategy', 'mode' => 'http'));
        $instance->addDownloadStrategy('sonata.media.security.superadmin_strategy', ${($_ = isset($this->services['sonata.media.security.superadmin_strategy']) ? $this->services['sonata.media.security.superadmin_strategy'] : $this->get('sonata.media.security.superadmin_strategy')) && false ?: '_'});
        $instance->addProvider('sonata.media.provider.image', ${($_ = isset($this->services['sonata.media.provider.image']) ? $this->services['sonata.media.provider.image'] : $this->get('sonata.media.provider.image')) && false ?: '_'});
        $instance->addProvider('sonata.media.provider.file', ${($_ = isset($this->services['sonata.media.provider.file']) ? $this->services['sonata.media.provider.file'] : $this->get('sonata.media.provider.file')) && false ?: '_'});
        $instance->addProvider('sonata.media.provider.youtube', ${($_ = isset($this->services['sonata.media.provider.youtube']) ? $this->services['sonata.media.provider.youtube'] : $this->get('sonata.media.provider.youtube')) && false ?: '_'});
        $instance->addProvider('sonata.media.provider.dailymotion', ${($_ = isset($this->services['sonata.media.provider.dailymotion']) ? $this->services['sonata.media.provider.dailymotion'] : $this->get('sonata.media.provider.dailymotion')) && false ?: '_'});
        $instance->addProvider('sonata.media.provider.vimeo', ${($_ = isset($this->services['sonata.media.provider.vimeo']) ? $this->services['sonata.media.provider.vimeo'] : $this->get('sonata.media.provider.vimeo')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'sonata.media.provider.dailymotion' shared service.
     *
     * @return \Sonata\MediaBundle\Provider\DailyMotionProvider
     */
    protected function getSonata_Media_Provider_DailymotionService()
    {
        $this->services['sonata.media.provider.dailymotion'] = $instance = new \Sonata\MediaBundle\Provider\DailyMotionProvider('sonata.media.provider.dailymotion', ${($_ = isset($this->services['sonata.media.filesystem.local']) ? $this->services['sonata.media.filesystem.local'] : $this->get('sonata.media.filesystem.local')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.cdn.server']) ? $this->services['sonata.media.cdn.server'] : $this->get('sonata.media.cdn.server')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.generator.default']) ? $this->services['sonata.media.generator.default'] : $this->get('sonata.media.generator.default')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.thumbnail.format']) ? $this->services['sonata.media.thumbnail.format'] : $this->get('sonata.media.thumbnail.format')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.buzz.browser']) ? $this->services['sonata.media.buzz.browser'] : $this->get('sonata.media.buzz.browser')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.metadata.proxy']) ? $this->services['sonata.media.metadata.proxy'] : $this->get('sonata.media.metadata.proxy')) && false ?: '_'});

        $instance->setTemplates(array('helper_thumbnail' => '@SonataMedia/Provider/thumbnail.html.twig', 'helper_view' => '@SonataMedia/Provider/view_dailymotion.html.twig'));
        $instance->addFormat('default_small', array('width' => 100, 'quality' => 100, 'height' => false, 'format' => 'jpg', 'constraint' => true));
        $instance->addFormat('default_big', array('width' => 970, 'quality' => 100, 'height' => false, 'format' => 'jpg', 'constraint' => true));
        $instance->setResizer(${($_ = isset($this->services['sonata.media.resizer.simple']) ? $this->services['sonata.media.resizer.simple'] : $this->get('sonata.media.resizer.simple')) && false ?: '_'});
        $instance->addFormat('admin', array('width' => 200, 'height' => false, 'quality' => 90, 'format' => 'jpg', 'constraint' => true));

        return $instance;
    }

    /**
     * Gets the public 'sonata.media.provider.file' shared service.
     *
     * @return \Sonata\MediaBundle\Provider\FileProvider
     */
    protected function getSonata_Media_Provider_FileService()
    {
        $this->services['sonata.media.provider.file'] = $instance = new \Sonata\MediaBundle\Provider\FileProvider('sonata.media.provider.file', ${($_ = isset($this->services['sonata.media.filesystem.local']) ? $this->services['sonata.media.filesystem.local'] : $this->get('sonata.media.filesystem.local')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.cdn.server']) ? $this->services['sonata.media.cdn.server'] : $this->get('sonata.media.cdn.server')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.generator.default']) ? $this->services['sonata.media.generator.default'] : $this->get('sonata.media.generator.default')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.thumbnail.format']) ? $this->services['sonata.media.thumbnail.format'] : $this->get('sonata.media.thumbnail.format')) && false ?: '_'}, array(0 => 'pdf', 1 => 'txt', 2 => 'rtf', 3 => 'doc', 4 => 'docx', 5 => 'xls', 6 => 'xlsx', 7 => 'ppt', 8 => 'pptx', 9 => 'odt', 10 => 'odg', 11 => 'odp', 12 => 'ods', 13 => 'odc', 14 => 'odf', 15 => 'odb', 16 => 'csv', 17 => 'xml'), array(0 => 'application/pdf', 1 => 'application/x-pdf', 2 => 'application/rtf', 3 => 'text/html', 4 => 'text/rtf', 5 => 'text/plain', 6 => 'application/excel', 7 => 'application/msword', 8 => 'application/vnd.ms-excel', 9 => 'application/vnd.ms-powerpoint', 10 => 'application/vnd.ms-powerpoint', 11 => 'application/vnd.oasis.opendocument.text', 12 => 'application/vnd.oasis.opendocument.graphics', 13 => 'application/vnd.oasis.opendocument.presentation', 14 => 'application/vnd.oasis.opendocument.spreadsheet', 15 => 'application/vnd.oasis.opendocument.chart', 16 => 'application/vnd.oasis.opendocument.formula', 17 => 'application/vnd.oasis.opendocument.database', 18 => 'application/vnd.oasis.opendocument.image', 19 => 'text/comma-separated-values', 20 => 'text/xml', 21 => 'application/xml', 22 => 'application/zip'), ${($_ = isset($this->services['sonata.media.metadata.proxy']) ? $this->services['sonata.media.metadata.proxy'] : $this->get('sonata.media.metadata.proxy')) && false ?: '_'});

        $instance->setTemplates(array('helper_thumbnail' => '@SonataMedia/Provider/thumbnail.html.twig', 'helper_view' => '@SonataMedia/Provider/view_file.html.twig'));
        $instance->addFormat('default_small', array('width' => 100, 'quality' => 100, 'height' => false, 'format' => 'jpg', 'constraint' => true));
        $instance->addFormat('default_big', array('width' => 970, 'quality' => 100, 'height' => false, 'format' => 'jpg', 'constraint' => true));
        $instance->addFormat('admin', array('width' => 200, 'height' => false, 'quality' => 90, 'format' => 'jpg', 'constraint' => true));

        return $instance;
    }

    /**
     * Gets the public 'sonata.media.provider.image' shared service.
     *
     * @return \Sonata\MediaBundle\Provider\ImageProvider
     */
    protected function getSonata_Media_Provider_ImageService()
    {
        $this->services['sonata.media.provider.image'] = $instance = new \Sonata\MediaBundle\Provider\ImageProvider('sonata.media.provider.image', ${($_ = isset($this->services['sonata.media.filesystem.local']) ? $this->services['sonata.media.filesystem.local'] : $this->get('sonata.media.filesystem.local')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.cdn.server']) ? $this->services['sonata.media.cdn.server'] : $this->get('sonata.media.cdn.server')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.generator.default']) ? $this->services['sonata.media.generator.default'] : $this->get('sonata.media.generator.default')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.thumbnail.format']) ? $this->services['sonata.media.thumbnail.format'] : $this->get('sonata.media.thumbnail.format')) && false ?: '_'}, array(0 => 'jpg', 1 => 'png', 2 => 'jpeg'), array(0 => 'image/pjpeg', 1 => 'image/jpeg', 2 => 'image/png', 3 => 'image/x-png'), ${($_ = isset($this->services['sonata.media.adapter.image.gd']) ? $this->services['sonata.media.adapter.image.gd'] : $this->get('sonata.media.adapter.image.gd')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.metadata.proxy']) ? $this->services['sonata.media.metadata.proxy'] : $this->get('sonata.media.metadata.proxy')) && false ?: '_'});

        $instance->setTemplates(array('helper_thumbnail' => '@SonataMedia/Provider/thumbnail.html.twig', 'helper_view' => '@SonataMedia/Provider/view_image.html.twig'));
        $instance->addFormat('default_small', array('width' => 100, 'quality' => 100, 'height' => false, 'format' => 'jpg', 'constraint' => true));
        $instance->addFormat('default_big', array('width' => 970, 'quality' => 100, 'height' => false, 'format' => 'jpg', 'constraint' => true));
        $instance->addFormat('users_admin', array('width' => 75, 'quality' => 75, 'height' => false, 'format' => 'jpg', 'constraint' => true));
        $instance->addFormat('users_avatar', array('width' => 100, 'quality' => 100, 'height' => false, 'format' => 'jpg', 'constraint' => true));
        $instance->addFormat('users_small', array('width' => 300, 'quality' => 100, 'height' => false, 'format' => 'jpg', 'constraint' => true));
        $instance->addFormat('users_large', array('width' => 750, 'quality' => 100, 'height' => false, 'format' => 'jpg', 'constraint' => true));
        $instance->addFormat('users_wide', array('width' => 820, 'quality' => 100, 'height' => false, 'format' => 'jpg', 'constraint' => true));
        $instance->addFormat('sonata_collection_preview', array('width' => 100, 'quality' => 100, 'height' => false, 'format' => 'jpg', 'constraint' => true));
        $instance->addFormat('sonata_collection_wide', array('width' => 820, 'quality' => 100, 'height' => false, 'format' => 'jpg', 'constraint' => true));
        $instance->addFormat('sonata_category_preview', array('width' => 100, 'quality' => 100, 'height' => false, 'format' => 'jpg', 'constraint' => true));
        $instance->addFormat('sonata_category_wide', array('width' => 820, 'quality' => 100, 'height' => false, 'format' => 'jpg', 'constraint' => true));
        $instance->setResizer(${($_ = isset($this->services['sonata.media.resizer.simple']) ? $this->services['sonata.media.resizer.simple'] : $this->get('sonata.media.resizer.simple')) && false ?: '_'});
        $instance->addFormat('admin', array('width' => 200, 'height' => false, 'quality' => 90, 'format' => 'jpg', 'constraint' => true));

        return $instance;
    }

    /**
     * Gets the public 'sonata.media.provider.vimeo' shared service.
     *
     * @return \Sonata\MediaBundle\Provider\VimeoProvider
     */
    protected function getSonata_Media_Provider_VimeoService()
    {
        $this->services['sonata.media.provider.vimeo'] = $instance = new \Sonata\MediaBundle\Provider\VimeoProvider('sonata.media.provider.vimeo', ${($_ = isset($this->services['sonata.media.filesystem.local']) ? $this->services['sonata.media.filesystem.local'] : $this->get('sonata.media.filesystem.local')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.cdn.server']) ? $this->services['sonata.media.cdn.server'] : $this->get('sonata.media.cdn.server')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.generator.default']) ? $this->services['sonata.media.generator.default'] : $this->get('sonata.media.generator.default')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.thumbnail.format']) ? $this->services['sonata.media.thumbnail.format'] : $this->get('sonata.media.thumbnail.format')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.buzz.browser']) ? $this->services['sonata.media.buzz.browser'] : $this->get('sonata.media.buzz.browser')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.metadata.proxy']) ? $this->services['sonata.media.metadata.proxy'] : $this->get('sonata.media.metadata.proxy')) && false ?: '_'});

        $instance->setTemplates(array('helper_thumbnail' => '@SonataMedia/Provider/thumbnail.html.twig', 'helper_view' => '@SonataMedia/Provider/view_vimeo.html.twig'));
        $instance->addFormat('default_small', array('width' => 100, 'quality' => 100, 'height' => false, 'format' => 'jpg', 'constraint' => true));
        $instance->addFormat('default_big', array('width' => 970, 'quality' => 100, 'height' => false, 'format' => 'jpg', 'constraint' => true));
        $instance->setResizer(${($_ = isset($this->services['sonata.media.resizer.simple']) ? $this->services['sonata.media.resizer.simple'] : $this->get('sonata.media.resizer.simple')) && false ?: '_'});
        $instance->addFormat('admin', array('width' => 200, 'height' => false, 'quality' => 90, 'format' => 'jpg', 'constraint' => true));

        return $instance;
    }

    /**
     * Gets the public 'sonata.media.provider.youtube' shared service.
     *
     * @return \Sonata\MediaBundle\Provider\YouTubeProvider
     */
    protected function getSonata_Media_Provider_YoutubeService()
    {
        $this->services['sonata.media.provider.youtube'] = $instance = new \Sonata\MediaBundle\Provider\YouTubeProvider('sonata.media.provider.youtube', ${($_ = isset($this->services['sonata.media.filesystem.local']) ? $this->services['sonata.media.filesystem.local'] : $this->get('sonata.media.filesystem.local')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.cdn.server']) ? $this->services['sonata.media.cdn.server'] : $this->get('sonata.media.cdn.server')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.generator.default']) ? $this->services['sonata.media.generator.default'] : $this->get('sonata.media.generator.default')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.thumbnail.format']) ? $this->services['sonata.media.thumbnail.format'] : $this->get('sonata.media.thumbnail.format')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.buzz.browser']) ? $this->services['sonata.media.buzz.browser'] : $this->get('sonata.media.buzz.browser')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.metadata.proxy']) ? $this->services['sonata.media.metadata.proxy'] : $this->get('sonata.media.metadata.proxy')) && false ?: '_'}, false);

        $instance->setTemplates(array('helper_thumbnail' => '@SonataMedia/Provider/thumbnail.html.twig', 'helper_view' => '@SonataMedia/Provider/view_youtube.html.twig'));
        $instance->addFormat('default_small', array('width' => 100, 'quality' => 100, 'height' => false, 'format' => 'jpg', 'constraint' => true));
        $instance->addFormat('default_big', array('width' => 970, 'quality' => 100, 'height' => false, 'format' => 'jpg', 'constraint' => true));
        $instance->setResizer(${($_ = isset($this->services['sonata.media.resizer.simple']) ? $this->services['sonata.media.resizer.simple'] : $this->get('sonata.media.resizer.simple')) && false ?: '_'});
        $instance->addFormat('admin', array('width' => 200, 'height' => false, 'quality' => 90, 'format' => 'jpg', 'constraint' => true));

        return $instance;
    }

    /**
     * Gets the public 'sonata.media.resizer.simple' shared service.
     *
     * @return \Sonata\MediaBundle\Resizer\SimpleResizer
     */
    protected function getSonata_Media_Resizer_SimpleService()
    {
        return $this->services['sonata.media.resizer.simple'] = new \Sonata\MediaBundle\Resizer\SimpleResizer(${($_ = isset($this->services['sonata.media.adapter.image.gd']) ? $this->services['sonata.media.adapter.image.gd'] : $this->get('sonata.media.adapter.image.gd')) && false ?: '_'}, 'inset', ${($_ = isset($this->services['sonata.media.metadata.proxy']) ? $this->services['sonata.media.metadata.proxy'] : $this->get('sonata.media.metadata.proxy')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.media.resizer.square' shared service.
     *
     * @return \Sonata\MediaBundle\Resizer\SquareResizer
     */
    protected function getSonata_Media_Resizer_SquareService()
    {
        return $this->services['sonata.media.resizer.square'] = new \Sonata\MediaBundle\Resizer\SquareResizer(${($_ = isset($this->services['sonata.media.adapter.image.gd']) ? $this->services['sonata.media.adapter.image.gd'] : $this->get('sonata.media.adapter.image.gd')) && false ?: '_'}, 'inset', ${($_ = isset($this->services['sonata.media.metadata.proxy']) ? $this->services['sonata.media.metadata.proxy'] : $this->get('sonata.media.metadata.proxy')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.media.security.connected_strategy' shared service.
     *
     * @return \Sonata\MediaBundle\Security\RolesDownloadStrategy
     */
    protected function getSonata_Media_Security_ConnectedStrategyService()
    {
        return $this->services['sonata.media.security.connected_strategy'] = new \Sonata\MediaBundle\Security\RolesDownloadStrategy(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, new \Symfony\Component\Security\Core\Authorization\AuthorizationChecker(${($_ = isset($this->services['security.token_storage']) ? $this->services['security.token_storage'] : $this->get('security.token_storage')) && false ?: '_'}, ${($_ = isset($this->services['security.authentication.manager']) ? $this->services['security.authentication.manager'] : $this->getSecurity_Authentication_ManagerService()) && false ?: '_'}, ${($_ = isset($this->services['security.access.decision_manager']) ? $this->services['security.access.decision_manager'] : $this->get('security.access.decision_manager')) && false ?: '_'}, false), array(0 => 'IS_AUTHENTICATED_FULLY', 1 => 'IS_AUTHENTICATED_REMEMBERED'));
    }

    /**
     * Gets the public 'sonata.media.security.forbidden_strategy' shared service.
     *
     * @return \Sonata\MediaBundle\Security\ForbiddenDownloadStrategy
     */
    protected function getSonata_Media_Security_ForbiddenStrategyService()
    {
        return $this->services['sonata.media.security.forbidden_strategy'] = new \Sonata\MediaBundle\Security\ForbiddenDownloadStrategy(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.media.security.public_strategy' shared service.
     *
     * @return \Sonata\MediaBundle\Security\PublicDownloadStrategy
     */
    protected function getSonata_Media_Security_PublicStrategyService()
    {
        return $this->services['sonata.media.security.public_strategy'] = new \Sonata\MediaBundle\Security\PublicDownloadStrategy(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.media.security.session_strategy' shared service.
     *
     * @return \Sonata\MediaBundle\Security\SessionDownloadStrategy
     */
    protected function getSonata_Media_Security_SessionStrategyService()
    {
        return $this->services['sonata.media.security.session_strategy'] = new \Sonata\MediaBundle\Security\SessionDownloadStrategy(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, ${($_ = isset($this->services['session']) ? $this->services['session'] : $this->get('session')) && false ?: '_'}, 1);
    }

    /**
     * Gets the public 'sonata.media.security.superadmin_strategy' shared service.
     *
     * @return \Sonata\MediaBundle\Security\RolesDownloadStrategy
     */
    protected function getSonata_Media_Security_SuperadminStrategyService()
    {
        return $this->services['sonata.media.security.superadmin_strategy'] = new \Sonata\MediaBundle\Security\RolesDownloadStrategy(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, new \Symfony\Component\Security\Core\Authorization\AuthorizationChecker(${($_ = isset($this->services['security.token_storage']) ? $this->services['security.token_storage'] : $this->get('security.token_storage')) && false ?: '_'}, ${($_ = isset($this->services['security.authentication.manager']) ? $this->services['security.authentication.manager'] : $this->getSecurity_Authentication_ManagerService()) && false ?: '_'}, ${($_ = isset($this->services['security.access.decision_manager']) ? $this->services['security.access.decision_manager'] : $this->get('security.access.decision_manager')) && false ?: '_'}, false), array(0 => 'ROLE_ADMIN', 1 => 'ROLE_SUPER_ADMIN'));
    }

    /**
     * Gets the public 'sonata.media.serializer.handler.gallery' shared service.
     *
     * @return \Sonata\MediaBundle\Serializer\GallerySerializerHandler
     */
    protected function getSonata_Media_Serializer_Handler_GalleryService()
    {
        return $this->services['sonata.media.serializer.handler.gallery'] = new \Sonata\MediaBundle\Serializer\GallerySerializerHandler(${($_ = isset($this->services['sonata.media.manager.gallery']) ? $this->services['sonata.media.manager.gallery'] : $this->get('sonata.media.manager.gallery')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.media.serializer.handler.media' shared service.
     *
     * @return \Sonata\MediaBundle\Serializer\MediaSerializerHandler
     */
    protected function getSonata_Media_Serializer_Handler_MediaService()
    {
        return $this->services['sonata.media.serializer.handler.media'] = new \Sonata\MediaBundle\Serializer\MediaSerializerHandler(${($_ = isset($this->services['sonata.media.manager.media']) ? $this->services['sonata.media.manager.media'] : $this->get('sonata.media.manager.media')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.media.thumbnail.format' shared service.
     *
     * @return \Sonata\MediaBundle\Thumbnail\FormatThumbnail
     */
    protected function getSonata_Media_Thumbnail_FormatService()
    {
        return $this->services['sonata.media.thumbnail.format'] = new \Sonata\MediaBundle\Thumbnail\FormatThumbnail('jpg');
    }

    /**
     * Gets the public 'sonata.media.thumbnail.liip_imagine' shared service.
     *
     * @return \Sonata\MediaBundle\Thumbnail\LiipImagineThumbnail
     */
    protected function getSonata_Media_Thumbnail_LiipImagineService()
    {
        return $this->services['sonata.media.thumbnail.liip_imagine'] = new \Sonata\MediaBundle\Thumbnail\LiipImagineThumbnail(${($_ = isset($this->services['liip_imagine.cache.manager']) ? $this->services['liip_imagine.cache.manager'] : $this->get('liip_imagine.cache.manager', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.media.twig.extension' shared service.
     *
     * @return \Sonata\MediaBundle\Twig\Extension\MediaExtension
     */
    protected function getSonata_Media_Twig_ExtensionService()
    {
        return $this->services['sonata.media.twig.extension'] = new \Sonata\MediaBundle\Twig\Extension\MediaExtension(${($_ = isset($this->services['sonata.media.pool']) ? $this->services['sonata.media.pool'] : $this->get('sonata.media.pool')) && false ?: '_'}, ${($_ = isset($this->services['sonata.media.manager.media']) ? $this->services['sonata.media.manager.media'] : $this->get('sonata.media.manager.media')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.media.twig.global' shared service.
     *
     * @return \Sonata\MediaBundle\Twig\GlobalVariables
     */
    protected function getSonata_Media_Twig_GlobalService()
    {
        return $this->services['sonata.media.twig.global'] = new \Sonata\MediaBundle\Twig\GlobalVariables($this);
    }

    /**
     * Gets the public 'sonata.media.validator.format' shared service.
     *
     * @return \Sonata\MediaBundle\Validator\FormatValidator
     */
    protected function getSonata_Media_Validator_FormatService()
    {
        return $this->services['sonata.media.validator.format'] = new \Sonata\MediaBundle\Validator\FormatValidator(${($_ = isset($this->services['sonata.media.pool']) ? $this->services['sonata.media.pool'] : $this->get('sonata.media.pool')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.templating' shared service.
     *
     * @return \Sonata\BlockBundle\Templating\TwigEngine
     */
    protected function getSonata_TemplatingService()
    {
        return $this->services['sonata.templating'] = new \Sonata\BlockBundle\Templating\TwigEngine(${($_ = isset($this->services['twig']) ? $this->services['twig'] : $this->get('twig')) && false ?: '_'}, ${($_ = isset($this->services['sonata.templating.name_parser']) ? $this->services['sonata.templating.name_parser'] : $this->get('sonata.templating.name_parser')) && false ?: '_'}, ${($_ = isset($this->services['sonata.templating.locator']) ? $this->services['sonata.templating.locator'] : $this->get('sonata.templating.locator')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.templating.locator' shared service.
     *
     * @return \Sonata\BlockBundle\Templating\TemplateLocator
     */
    protected function getSonata_Templating_LocatorService()
    {
        return $this->services['sonata.templating.locator'] = new \Sonata\BlockBundle\Templating\TemplateLocator(${($_ = isset($this->services['file_locator']) ? $this->services['file_locator'] : $this->get('file_locator')) && false ?: '_'}, __DIR__);
    }

    /**
     * Gets the public 'sonata.templating.name_parser' shared service.
     *
     * @return \Sonata\BlockBundle\Templating\TemplateNameParser
     */
    protected function getSonata_Templating_NameParserService()
    {
        return $this->services['sonata.templating.name_parser'] = new \Sonata\BlockBundle\Templating\TemplateNameParser(${($_ = isset($this->services['kernel']) ? $this->services['kernel'] : $this->get('kernel')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.user.admin.group' service.
     *
     * @return \AppBundle\Admin\User\GroupAdmin
     */
    protected function getSonata_User_Admin_GroupService()
    {
        $instance = new \AppBundle\Admin\User\GroupAdmin('sonata.user.admin.group', 'AppBundle\\Entity\\User\\Group', 'SonataAdminBundle:CRUD');

        $instance->setTranslationDomain('SonataUserBundle');
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.underscore']) ? $this->services['sonata.admin.label.strategy.underscore'] : $this->get('sonata.admin.label.strategy.underscore')) && false ?: '_'});
        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('groups');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['sonata.user.admin.group.template_registry']) ? $this->services['sonata.user.admin.group.template_registry'] : $this->get('sonata.user.admin.group.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'sonata.user.admin.group.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getSonata_User_Admin_Group_TemplateRegistryService()
    {
        return $this->services['sonata.user.admin.group.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'sonata.user.admin.user' service.
     *
     * @return \AppBundle\Admin\User\UserAdmin
     */
    protected function getSonata_User_Admin_UserService()
    {
        $instance = new \AppBundle\Admin\User\UserAdmin('sonata.user.admin.user', 'AppBundle\\Entity\\User\\User', 'SonataAdminBundle:CRUD');

        $instance->setUserManager(${($_ = isset($this->services['fos_user.user_manager']) ? $this->services['fos_user.user_manager'] : $this->get('fos_user.user_manager')) && false ?: '_'});
        $instance->setTranslationDomain('SonataUserBundle');
        $instance->setLabelTranslatorStrategy(${($_ = isset($this->services['sonata.admin.label.strategy.underscore']) ? $this->services['sonata.admin.label.strategy.underscore'] : $this->get('sonata.admin.label.strategy.underscore')) && false ?: '_'});
        $instance->setManagerType('orm');
        $instance->setModelManager(${($_ = isset($this->services['sonata.admin.manager.orm']) ? $this->services['sonata.admin.manager.orm'] : $this->get('sonata.admin.manager.orm')) && false ?: '_'});
        $instance->setFormContractor(${($_ = isset($this->services['sonata.admin.builder.orm_form']) ? $this->services['sonata.admin.builder.orm_form'] : $this->get('sonata.admin.builder.orm_form')) && false ?: '_'});
        $instance->setShowBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_show']) ? $this->services['sonata.admin.builder.orm_show'] : $this->get('sonata.admin.builder.orm_show')) && false ?: '_'});
        $instance->setListBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_list']) ? $this->services['sonata.admin.builder.orm_list'] : $this->get('sonata.admin.builder.orm_list')) && false ?: '_'});
        $instance->setDatagridBuilder(${($_ = isset($this->services['sonata.admin.builder.orm_datagrid']) ? $this->services['sonata.admin.builder.orm_datagrid'] : $this->get('sonata.admin.builder.orm_datagrid')) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, false);
        $instance->setConfigurationPool(${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'});
        $instance->setRouteGenerator(${($_ = isset($this->services['sonata.admin.route.default_generator']) ? $this->services['sonata.admin.route.default_generator'] : $this->get('sonata.admin.route.default_generator')) && false ?: '_'});
        $instance->setValidator(${($_ = isset($this->services['validator']) ? $this->services['validator'] : $this->get('validator')) && false ?: '_'});
        $instance->setSecurityHandler(${($_ = isset($this->services['sonata.admin.security.handler']) ? $this->services['sonata.admin.security.handler'] : $this->get('sonata.admin.security.handler')) && false ?: '_'});
        $instance->setMenuFactory(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
        $instance->setRouteBuilder(${($_ = isset($this->services['sonata.admin.route.path_info']) ? $this->services['sonata.admin.route.path_info'] : $this->get('sonata.admin.route.path_info')) && false ?: '_'});
        $instance->setPagerType('default');
        $instance->setLabel('users');
        $instance->showMosaicButton(true);
        $instance->setTemplateRegistry(${($_ = isset($this->services['sonata.user.admin.user.template_registry']) ? $this->services['sonata.user.admin.user.template_registry'] : $this->get('sonata.user.admin.user.template_registry')) && false ?: '_'});
        $instance->setSecurityInformation(array('EDIT' => array(0 => 'EDIT'), 'LIST' => array(0 => 'LIST'), 'CREATE' => array(0 => 'CREATE'), 'VIEW' => array(0 => 'VIEW'), 'DELETE' => array(0 => 'DELETE'), 'EXPORT' => array(0 => 'EXPORT'), 'ALL' => array(0 => 'ALL')));
        $instance->initialize();
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.event.extension']) ? $this->services['sonata.admin.event.extension'] : $this->get('sonata.admin.event.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.lock.extension']) ? $this->services['sonata.admin.lock.extension'] : $this->get('sonata.admin.lock.extension')) && false ?: '_'});
        $instance->setFormTheme(array(0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig'));
        $instance->setFilterTheme(array(0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig'));

        return $instance;
    }

    /**
     * Gets the public 'sonata.user.admin.user.template_registry' shared service.
     *
     * @return \Sonata\AdminBundle\Templating\TemplateRegistry
     */
    protected function getSonata_User_Admin_User_TemplateRegistryService()
    {
        return $this->services['sonata.user.admin.user.template_registry'] = new \Sonata\AdminBundle\Templating\TemplateRegistry(array('history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig', 'user_block' => '@SonataUser/Admin/Core/user_block.html.twig', 'layout' => 'AppBundle:Admin:standard_layout.html.twig', 'ajax' => 'SonataAdminBundle::ajax_layout.html.twig', 'list' => 'SonataAdminBundle:CRUD:list.html.twig', 'show' => 'SonataAdminBundle:CRUD:show.html.twig', 'edit' => 'SonataAdminBundle:CRUD:edit.html.twig', 'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig', 'dashboard' => 'AppBundle:Admin:dashboard.html.twig', 'add_block' => '@SonataAdmin/Core/add_block.html.twig', 'search' => '@SonataAdmin/Core/search.html.twig', 'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig', 'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig', 'preview' => '@SonataAdmin/CRUD/preview.html.twig', 'history' => '@SonataAdmin/CRUD/history.html.twig', 'acl' => '@SonataAdmin/CRUD/acl.html.twig', 'action' => '@SonataAdmin/CRUD/action.html.twig', 'select' => '@SonataAdmin/CRUD/list__select.html.twig', 'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig', 'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig', 'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig', 'delete' => '@SonataAdmin/CRUD/delete.html.twig', 'batch' => '@SonataAdmin/CRUD/list__batch.html.twig', 'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig', 'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig', 'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig', 'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig', 'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig', 'pager_links' => '@SonataAdmin/Pager/links.html.twig', 'pager_results' => '@SonataAdmin/Pager/results.html.twig', 'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig', 'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig', 'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig', 'button_acl' => '@SonataAdmin/Button/acl_button.html.twig', 'button_create' => '@SonataAdmin/Button/create_button.html.twig', 'button_edit' => '@SonataAdmin/Button/edit_button.html.twig', 'button_history' => '@SonataAdmin/Button/history_button.html.twig', 'button_list' => '@SonataAdmin/Button/list_button.html.twig', 'button_show' => '@SonataAdmin/Button/show_button.html.twig'));
    }

    /**
     * Gets the public 'sonata.user.api.form.type.group' shared service.
     *
     * @return \Sonata\UserBundle\Form\Type\ApiGroupType
     */
    protected function getSonata_User_Api_Form_Type_GroupService()
    {
        return $this->services['sonata.user.api.form.type.group'] = new \Sonata\UserBundle\Form\Type\ApiGroupType(${($_ = isset($this->services['jms_serializer.metadata_factory']) ? $this->services['jms_serializer.metadata_factory'] : $this->getJmsSerializer_MetadataFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'}, 'sonata_user_api_form_group', 'AppBundle\\Entity\\User\\Group', 'sonata_api_write');
    }

    /**
     * Gets the public 'sonata.user.api.form.type.user' shared service.
     *
     * @return \Sonata\UserBundle\Form\Type\ApiUserType
     */
    protected function getSonata_User_Api_Form_Type_UserService()
    {
        return $this->services['sonata.user.api.form.type.user'] = new \Sonata\UserBundle\Form\Type\ApiUserType(${($_ = isset($this->services['jms_serializer.metadata_factory']) ? $this->services['jms_serializer.metadata_factory'] : $this->getJmsSerializer_MetadataFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'}, 'sonata_user_api_form_user', 'AppBundle\\Entity\\User\\User', 'sonata_api_write');
    }

    /**
     * Gets the public 'sonata.user.block.account' shared service.
     *
     * @return \Sonata\UserBundle\Block\AccountBlockService
     */
    protected function getSonata_User_Block_AccountService()
    {
        return $this->services['sonata.user.block.account'] = new \Sonata\UserBundle\Block\AccountBlockService('sonata.user.block.account', ${($_ = isset($this->services['templating']) ? $this->services['templating'] : $this->get('templating')) && false ?: '_'}, ${($_ = isset($this->services['security.token_storage']) ? $this->services['security.token_storage'] : $this->get('security.token_storage')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.user.block.menu' shared service.
     *
     * @return \Sonata\UserBundle\Block\ProfileMenuBlockService
     */
    protected function getSonata_User_Block_MenuService()
    {
        return $this->services['sonata.user.block.menu'] = new \Sonata\UserBundle\Block\ProfileMenuBlockService('sonata.user.block.menu', ${($_ = isset($this->services['templating']) ? $this->services['templating'] : $this->get('templating')) && false ?: '_'}, ${($_ = isset($this->services['knp_menu.menu_provider']) ? $this->services['knp_menu.menu_provider'] : $this->get('knp_menu.menu_provider')) && false ?: '_'}, ${($_ = isset($this->services['sonata.user.profile.menu_builder']) ? $this->services['sonata.user.profile.menu_builder'] : $this->get('sonata.user.profile.menu_builder')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.user.controller.api.group' shared service.
     *
     * @return \Sonata\UserBundle\Controller\Api\GroupController
     */
    protected function getSonata_User_Controller_Api_GroupService()
    {
        return $this->services['sonata.user.controller.api.group'] = new \Sonata\UserBundle\Controller\Api\GroupController(${($_ = isset($this->services['fos_user.group_manager']) ? $this->services['fos_user.group_manager'] : $this->get('fos_user.group_manager')) && false ?: '_'}, ${($_ = isset($this->services['form.factory']) ? $this->services['form.factory'] : $this->get('form.factory')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.user.controller.api.user' shared service.
     *
     * @return \Sonata\UserBundle\Controller\Api\UserController
     */
    protected function getSonata_User_Controller_Api_UserService()
    {
        return $this->services['sonata.user.controller.api.user'] = new \Sonata\UserBundle\Controller\Api\UserController(${($_ = isset($this->services['fos_user.user_manager']) ? $this->services['fos_user.user_manager'] : $this->get('fos_user.user_manager')) && false ?: '_'}, ${($_ = isset($this->services['fos_user.group_manager']) ? $this->services['fos_user.group_manager'] : $this->get('fos_user.group_manager')) && false ?: '_'}, ${($_ = isset($this->services['form.factory']) ? $this->services['form.factory'] : $this->get('form.factory')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.user.editable_role_builder' shared service.
     *
     * @return \Sonata\UserBundle\Security\EditableRolesBuilder
     */
    protected function getSonata_User_EditableRoleBuilderService()
    {
        return $this->services['sonata.user.editable_role_builder'] = new \Sonata\UserBundle\Security\EditableRolesBuilder(${($_ = isset($this->services['security.token_storage']) ? $this->services['security.token_storage'] : $this->get('security.token_storage')) && false ?: '_'}, ${($_ = isset($this->services['security.authorization_checker']) ? $this->services['security.authorization_checker'] : $this->get('security.authorization_checker')) && false ?: '_'}, ${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'}, array('SONATA' => array(), 'ROLE_AUDIT_LOGS_ADMIN' => array(0 => 'ROLE_DATA_DOG_AUDIT_ADMIN_AUDIT_LOG_LIST', 1 => 'ROLE_DATA_DOG_AUDIT_ADMIN_AUDIT_LOG_VIEW'), 'ROLE_USER' => array(0 => 'ROLE_API', 1 => 'ROLE_SONATA_ADMIN'), 'ROLE_SONATA_ADMIN' => array(0 => 'ROLE_SONATA_USER_ADMIN_USER_VIEW', 1 => 'ROLE_SONATA_USER_ADMIN_USER_EDIT'), 'ROLE_ADMIN' => array(0 => 'ROLE_USER', 1 => 'ROLE_AUDIT_LOGS_ADMIN'), 'ROLE_SUPER_ADMIN' => array(0 => 'ROLE_USER', 1 => 'ROLE_ADMIN', 2 => 'ROLE_AUDIT_LOGS_ADMIN', 3 => 'ROLE_ALLOWED_TO_SWITCH'), 'ROLE_APP_USER' => array(0 => 'ROLE_USER', 1 => 'ROLE_DASHBOARD_USER'), 'ROLE_APP_ADMIN' => array(0 => 'ROLE_USER', 1 => 'ROLE_ADMIN')));
    }

    /**
     * Gets the public 'sonata.user.form.gender_list' shared service.
     *
     * @return \Sonata\UserBundle\Form\Type\UserGenderListType
     */
    protected function getSonata_User_Form_GenderListService()
    {
        return $this->services['sonata.user.form.gender_list'] = new \Sonata\UserBundle\Form\Type\UserGenderListType('AppBundle\\Entity\\User\\User', 'getGenderList', 'Sonata\\UserBundle\\Form\\Type\\UserGenderListType');
    }

    /**
     * Gets the public 'sonata.user.form.type.security_roles' shared service.
     *
     * @return \Sonata\UserBundle\Form\Type\SecurityRolesType
     */
    protected function getSonata_User_Form_Type_SecurityRolesService()
    {
        return $this->services['sonata.user.form.type.security_roles'] = new \Sonata\UserBundle\Form\Type\SecurityRolesType(${($_ = isset($this->services['sonata.user.editable_role_builder']) ? $this->services['sonata.user.editable_role_builder'] : $this->get('sonata.user.editable_role_builder')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.user.manager.user' shared service.
     *
     * @return \Sonata\UserBundle\Entity\UserManagerProxy
     */
    protected function getSonata_User_Manager_UserService()
    {
        return $this->services['sonata.user.manager.user'] = new \Sonata\UserBundle\Entity\UserManagerProxy('AppBundle\\Entity\\User\\User', ${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'}, ${($_ = isset($this->services['fos_user.user_manager']) ? $this->services['fos_user.user_manager'] : $this->get('fos_user.user_manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.user.profile.form' shared service.
     *
     * @return \Symfony\Component\Form\Form
     */
    protected function getSonata_User_Profile_FormService()
    {
        return $this->services['sonata.user.profile.form'] = \Symfony\Component\Form\FormFactory::createNamed('application_sonata_user_profile_form', 'application_sonata_user_profile', NULL, array('validation_groups' => array(0 => 'Profile', 1 => 'Default'), 'translation_domain' => 'SonataUserBundle'));
    }

    /**
     * Gets the public 'sonata.user.profile.form.handler' shared service.
     *
     * @return \Sonata\UserBundle\Form\Handler\ProfileFormHandler
     */
    protected function getSonata_User_Profile_Form_HandlerService()
    {
        return $this->services['sonata.user.profile.form.handler'] = new \Sonata\UserBundle\Form\Handler\ProfileFormHandler(${($_ = isset($this->services['sonata.user.profile.form']) ? $this->services['sonata.user.profile.form'] : $this->get('sonata.user.profile.form')) && false ?: '_'}, ${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'}, ${($_ = isset($this->services['fos_user.user_manager']) ? $this->services['fos_user.user_manager'] : $this->get('fos_user.user_manager')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.user.profile.form.type' shared service.
     *
     * @return \Sonata\UserBundle\Form\Type\ProfileType
     */
    protected function getSonata_User_Profile_Form_TypeService()
    {
        return $this->services['sonata.user.profile.form.type'] = new \Sonata\UserBundle\Form\Type\ProfileType('AppBundle\\Entity\\User\\User');
    }

    /**
     * Gets the public 'sonata.user.profile.menu_builder' shared service.
     *
     * @return \Sonata\UserBundle\Menu\ProfileMenuBuilder
     */
    protected function getSonata_User_Profile_MenuBuilderService()
    {
        return $this->services['sonata.user.profile.menu_builder'] = new \Sonata\UserBundle\Menu\ProfileMenuBuilder(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'}, ${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, array(0 => array('route' => 'fos_user_profile_show', 'label' => 'sonata_profile_title', 'domain' => 'SonataUserBundle', 'route_parameters' => array()), 1 => array('route' => 'fos_user_profile_edit', 'label' => 'sonata_user_profile_breadcrumb_edit', 'domain' => 'SonataUserBundle', 'route_parameters' => array()), 2 => array('route' => 'fos_user_profile_edit_authentication', 'label' => 'title_user_edit_authentication', 'domain' => 'SonataUserBundle', 'route_parameters' => array()), 3 => array('route' => 'fos_user_change_password', 'label' => 'title_user_edit_password', 'domain' => 'SonataUserBundle', 'route_parameters' => array())), ${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.user.registration.form' shared service.
     *
     * @return \Symfony\Component\Form\Form
     */
    protected function getSonata_User_Registration_FormService()
    {
        return $this->services['sonata.user.registration.form'] = \Symfony\Component\Form\FormFactory::createNamed('sonata_user_registration_form', 'sonata_user_registration', NULL, array('validation_groups' => array(0 => 'Registration', 1 => 'Default')));
    }

    /**
     * Gets the public 'sonata.user.registration.form.type' shared service.
     *
     * @return \Sonata\UserBundle\Form\Type\RegistrationFormType
     */
    protected function getSonata_User_Registration_Form_TypeService()
    {
        return $this->services['sonata.user.registration.form.type'] = new \Sonata\UserBundle\Form\Type\RegistrationFormType('AppBundle\\Entity\\User\\User', array('horizontal_input_wrapper_class' => 'col-lg-8', 'horizontal_label_class' => 'col-lg-4 control-label'));
    }

    /**
     * Gets the public 'sonata.user.serializer.handler.user' shared service.
     *
     * @return \Sonata\UserBundle\Serializer\UserSerializerHandler
     */
    protected function getSonata_User_Serializer_Handler_UserService()
    {
        return $this->services['sonata.user.serializer.handler.user'] = new \Sonata\UserBundle\Serializer\UserSerializerHandler(${($_ = isset($this->services['sonata.user.manager.user']) ? $this->services['sonata.user.manager.user'] : $this->get('sonata.user.manager.user')) && false ?: '_'});
    }

    /**
     * Gets the public 'sonata.user.twig.global' shared service.
     *
     * @return \Sonata\UserBundle\Twig\GlobalVariables
     */
    protected function getSonata_User_Twig_GlobalService()
    {
        return $this->services['sonata.user.twig.global'] = new \Sonata\UserBundle\Twig\GlobalVariables($this);
    }

    /**
     * Gets the public 'streamed_response_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\StreamedResponseListener
     */
    protected function getStreamedResponseListenerService()
    {
        return $this->services['streamed_response_listener'] = new \Symfony\Component\HttpKernel\EventListener\StreamedResponseListener();
    }

    /**
     * Gets the public 'swiftmailer.email_sender.listener' shared service.
     *
     * @return \Symfony\Bundle\SwiftmailerBundle\EventListener\EmailSenderListener
     */
    protected function getSwiftmailer_EmailSender_ListenerService()
    {
        return $this->services['swiftmailer.email_sender.listener'] = new \Symfony\Bundle\SwiftmailerBundle\EventListener\EmailSenderListener($this, ${($_ = isset($this->services['logger']) ? $this->services['logger'] : $this->get('logger', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the public 'swiftmailer.mailer.default' shared service.
     *
     * @return \Swift_Mailer
     */
    protected function getSwiftmailer_Mailer_DefaultService()
    {
        return $this->services['swiftmailer.mailer.default'] = new \Swift_Mailer(${($_ = isset($this->services['swiftmailer.mailer.default.transport']) ? $this->services['swiftmailer.mailer.default.transport'] : $this->get('swiftmailer.mailer.default.transport')) && false ?: '_'});
    }

    /**
     * Gets the public 'swiftmailer.mailer.default.plugin.messagelogger' shared service.
     *
     * @return \Swift_Plugins_MessageLogger
     */
    protected function getSwiftmailer_Mailer_Default_Plugin_MessageloggerService()
    {
        return $this->services['swiftmailer.mailer.default.plugin.messagelogger'] = new \Swift_Plugins_MessageLogger();
    }

    /**
     * Gets the public 'swiftmailer.mailer.default.spool' shared service.
     *
     * @return \Swift_MemorySpool
     */
    protected function getSwiftmailer_Mailer_Default_SpoolService()
    {
        return $this->services['swiftmailer.mailer.default.spool'] = new \Swift_MemorySpool();
    }

    /**
     * Gets the public 'swiftmailer.mailer.default.transport' shared service.
     *
     * @return \Swift_Transport_SpoolTransport
     */
    protected function getSwiftmailer_Mailer_Default_TransportService()
    {
        $this->services['swiftmailer.mailer.default.transport'] = $instance = new \Swift_Transport_SpoolTransport(${($_ = isset($this->services['swiftmailer.mailer.default.transport.eventdispatcher']) ? $this->services['swiftmailer.mailer.default.transport.eventdispatcher'] : $this->getSwiftmailer_Mailer_Default_Transport_EventdispatcherService()) && false ?: '_'}, ${($_ = isset($this->services['swiftmailer.mailer.default.spool']) ? $this->services['swiftmailer.mailer.default.spool'] : $this->get('swiftmailer.mailer.default.spool')) && false ?: '_'});

        $instance->registerPlugin(${($_ = isset($this->services['swiftmailer.mailer.default.plugin.messagelogger']) ? $this->services['swiftmailer.mailer.default.plugin.messagelogger'] : $this->get('swiftmailer.mailer.default.plugin.messagelogger')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'swiftmailer.mailer.default.transport.real' shared service.
     *
     * @return \Swift_Transport_EsmtpTransport
     */
    protected function getSwiftmailer_Mailer_Default_Transport_RealService()
    {
        $a = new \Swift_Transport_Esmtp_AuthHandler(array(0 => new \Swift_Transport_Esmtp_Auth_CramMd5Authenticator(), 1 => new \Swift_Transport_Esmtp_Auth_LoginAuthenticator(), 2 => new \Swift_Transport_Esmtp_Auth_PlainAuthenticator()));
        $a->setUsername('service@symfony.com');
        $a->setPassword('service');
        $a->setAuthMode(NULL);

        $this->services['swiftmailer.mailer.default.transport.real'] = $instance = new \Swift_Transport_EsmtpTransport(new \Swift_Transport_StreamBuffer(new \Swift_StreamFilters_StringReplacementFilterFactory()), array(0 => $a), ${($_ = isset($this->services['swiftmailer.mailer.default.transport.eventdispatcher']) ? $this->services['swiftmailer.mailer.default.transport.eventdispatcher'] : $this->getSwiftmailer_Mailer_Default_Transport_EventdispatcherService()) && false ?: '_'});

        $instance->setHost('127.0.0.1');
        $instance->setPort(25);
        $instance->setEncryption(NULL);
        $instance->setTimeout(30);
        $instance->setSourceIp(NULL);
        (new \Symfony\Bundle\SwiftmailerBundle\DependencyInjection\SmtpTransportConfigurator(NULL, ${($_ = isset($this->services['router.request_context']) ? $this->services['router.request_context'] : $this->getRouter_RequestContextService()) && false ?: '_'}))->configure($instance);

        return $instance;
    }

    /**
     * Gets the public 'templating' shared service.
     *
     * @return \Symfony\Bundle\TwigBundle\TwigEngine
     */
    protected function getTemplatingService()
    {
        return $this->services['templating'] = new \Symfony\Bundle\TwigBundle\TwigEngine(${($_ = isset($this->services['twig']) ? $this->services['twig'] : $this->get('twig')) && false ?: '_'}, ${($_ = isset($this->services['templating.name_parser']) ? $this->services['templating.name_parser'] : $this->get('templating.name_parser')) && false ?: '_'}, ${($_ = isset($this->services['templating.locator']) ? $this->services['templating.locator'] : $this->getTemplating_LocatorService()) && false ?: '_'});
    }

    /**
     * Gets the public 'templating.filename_parser' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\TemplateFilenameParser
     */
    protected function getTemplating_FilenameParserService()
    {
        return $this->services['templating.filename_parser'] = new \Symfony\Bundle\FrameworkBundle\Templating\TemplateFilenameParser();
    }

    /**
     * Gets the public 'templating.helper.logout_url' shared service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Templating\Helper\LogoutUrlHelper
     */
    protected function getTemplating_Helper_LogoutUrlService()
    {
        return $this->services['templating.helper.logout_url'] = new \Symfony\Bundle\SecurityBundle\Templating\Helper\LogoutUrlHelper(${($_ = isset($this->services['security.logout_url_generator']) ? $this->services['security.logout_url_generator'] : $this->getSecurity_LogoutUrlGeneratorService()) && false ?: '_'});
    }

    /**
     * Gets the public 'templating.helper.markdown' shared service.
     *
     * @return \Knp\Bundle\MarkdownBundle\Helper\MarkdownHelper
     */
    protected function getTemplating_Helper_MarkdownService()
    {
        return $this->services['templating.helper.markdown'] = new \Knp\Bundle\MarkdownBundle\Helper\MarkdownHelper(${($_ = isset($this->services['markdown.parser.parser_manager']) ? $this->services['markdown.parser.parser_manager'] : $this->getMarkdown_Parser_ParserManagerService()) && false ?: '_'});
    }

    /**
     * Gets the public 'templating.helper.security' shared service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Templating\Helper\SecurityHelper
     */
    protected function getTemplating_Helper_SecurityService()
    {
        return $this->services['templating.helper.security'] = new \Symfony\Bundle\SecurityBundle\Templating\Helper\SecurityHelper(${($_ = isset($this->services['security.authorization_checker']) ? $this->services['security.authorization_checker'] : $this->get('security.authorization_checker', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the public 'templating.loader' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\Loader\FilesystemLoader
     */
    protected function getTemplating_LoaderService()
    {
        return $this->services['templating.loader'] = new \Symfony\Bundle\FrameworkBundle\Templating\Loader\FilesystemLoader(${($_ = isset($this->services['templating.locator']) ? $this->services['templating.locator'] : $this->getTemplating_LocatorService()) && false ?: '_'});
    }

    /**
     * Gets the public 'templating.name_parser' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\TemplateNameParser
     */
    protected function getTemplating_NameParserService()
    {
        return $this->services['templating.name_parser'] = new \Symfony\Bundle\FrameworkBundle\Templating\TemplateNameParser(${($_ = isset($this->services['kernel']) ? $this->services['kernel'] : $this->get('kernel')) && false ?: '_'});
    }

    /**
     * Gets the public 'translation.dumper.csv' shared service.
     *
     * @return \Symfony\Component\Translation\Dumper\CsvFileDumper
     */
    protected function getTranslation_Dumper_CsvService()
    {
        return $this->services['translation.dumper.csv'] = new \Symfony\Component\Translation\Dumper\CsvFileDumper();
    }

    /**
     * Gets the public 'translation.dumper.ini' shared service.
     *
     * @return \Symfony\Component\Translation\Dumper\IniFileDumper
     */
    protected function getTranslation_Dumper_IniService()
    {
        return $this->services['translation.dumper.ini'] = new \Symfony\Component\Translation\Dumper\IniFileDumper();
    }

    /**
     * Gets the public 'translation.dumper.json' shared service.
     *
     * @return \Symfony\Component\Translation\Dumper\JsonFileDumper
     */
    protected function getTranslation_Dumper_JsonService()
    {
        return $this->services['translation.dumper.json'] = new \Symfony\Component\Translation\Dumper\JsonFileDumper();
    }

    /**
     * Gets the public 'translation.dumper.mo' shared service.
     *
     * @return \Symfony\Component\Translation\Dumper\MoFileDumper
     */
    protected function getTranslation_Dumper_MoService()
    {
        return $this->services['translation.dumper.mo'] = new \Symfony\Component\Translation\Dumper\MoFileDumper();
    }

    /**
     * Gets the public 'translation.dumper.php' shared service.
     *
     * @return \Symfony\Component\Translation\Dumper\PhpFileDumper
     */
    protected function getTranslation_Dumper_PhpService()
    {
        return $this->services['translation.dumper.php'] = new \Symfony\Component\Translation\Dumper\PhpFileDumper();
    }

    /**
     * Gets the public 'translation.dumper.po' shared service.
     *
     * @return \Symfony\Component\Translation\Dumper\PoFileDumper
     */
    protected function getTranslation_Dumper_PoService()
    {
        return $this->services['translation.dumper.po'] = new \Symfony\Component\Translation\Dumper\PoFileDumper();
    }

    /**
     * Gets the public 'translation.dumper.qt' shared service.
     *
     * @return \Symfony\Component\Translation\Dumper\QtFileDumper
     */
    protected function getTranslation_Dumper_QtService()
    {
        return $this->services['translation.dumper.qt'] = new \Symfony\Component\Translation\Dumper\QtFileDumper();
    }

    /**
     * Gets the public 'translation.dumper.res' shared service.
     *
     * @return \Symfony\Component\Translation\Dumper\IcuResFileDumper
     */
    protected function getTranslation_Dumper_ResService()
    {
        return $this->services['translation.dumper.res'] = new \Symfony\Component\Translation\Dumper\IcuResFileDumper();
    }

    /**
     * Gets the public 'translation.dumper.xliff' shared service.
     *
     * @return \Symfony\Component\Translation\Dumper\XliffFileDumper
     */
    protected function getTranslation_Dumper_XliffService()
    {
        return $this->services['translation.dumper.xliff'] = new \Symfony\Component\Translation\Dumper\XliffFileDumper();
    }

    /**
     * Gets the public 'translation.dumper.yml' shared service.
     *
     * @return \Symfony\Component\Translation\Dumper\YamlFileDumper
     */
    protected function getTranslation_Dumper_YmlService()
    {
        return $this->services['translation.dumper.yml'] = new \Symfony\Component\Translation\Dumper\YamlFileDumper();
    }

    /**
     * Gets the public 'translation.extractor' shared service.
     *
     * @return \Symfony\Component\Translation\Extractor\ChainExtractor
     */
    protected function getTranslation_ExtractorService()
    {
        $this->services['translation.extractor'] = $instance = new \Symfony\Component\Translation\Extractor\ChainExtractor();

        $instance->addExtractor('php', ${($_ = isset($this->services['translation.extractor.php']) ? $this->services['translation.extractor.php'] : $this->get('translation.extractor.php')) && false ?: '_'});
        $instance->addExtractor('twig', ${($_ = isset($this->services['twig.translation.extractor']) ? $this->services['twig.translation.extractor'] : $this->get('twig.translation.extractor')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'translation.extractor.php' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Translation\PhpExtractor
     */
    protected function getTranslation_Extractor_PhpService()
    {
        return $this->services['translation.extractor.php'] = new \Symfony\Bundle\FrameworkBundle\Translation\PhpExtractor();
    }

    /**
     * Gets the public 'translation.loader' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Translation\TranslationLoader
     */
    protected function getTranslation_LoaderService()
    {
        $a = ${($_ = isset($this->services['translation.loader.xliff']) ? $this->services['translation.loader.xliff'] : $this->get('translation.loader.xliff')) && false ?: '_'};

        $this->services['translation.loader'] = $instance = new \Symfony\Bundle\FrameworkBundle\Translation\TranslationLoader();

        $instance->addLoader('php', ${($_ = isset($this->services['translation.loader.php']) ? $this->services['translation.loader.php'] : $this->get('translation.loader.php')) && false ?: '_'});
        $instance->addLoader('yml', ${($_ = isset($this->services['translation.loader.yml']) ? $this->services['translation.loader.yml'] : $this->get('translation.loader.yml')) && false ?: '_'});
        $instance->addLoader('xlf', $a);
        $instance->addLoader('xliff', $a);
        $instance->addLoader('po', ${($_ = isset($this->services['translation.loader.po']) ? $this->services['translation.loader.po'] : $this->get('translation.loader.po')) && false ?: '_'});
        $instance->addLoader('mo', ${($_ = isset($this->services['translation.loader.mo']) ? $this->services['translation.loader.mo'] : $this->get('translation.loader.mo')) && false ?: '_'});
        $instance->addLoader('ts', ${($_ = isset($this->services['translation.loader.qt']) ? $this->services['translation.loader.qt'] : $this->get('translation.loader.qt')) && false ?: '_'});
        $instance->addLoader('csv', ${($_ = isset($this->services['translation.loader.csv']) ? $this->services['translation.loader.csv'] : $this->get('translation.loader.csv')) && false ?: '_'});
        $instance->addLoader('res', ${($_ = isset($this->services['translation.loader.res']) ? $this->services['translation.loader.res'] : $this->get('translation.loader.res')) && false ?: '_'});
        $instance->addLoader('dat', ${($_ = isset($this->services['translation.loader.dat']) ? $this->services['translation.loader.dat'] : $this->get('translation.loader.dat')) && false ?: '_'});
        $instance->addLoader('ini', ${($_ = isset($this->services['translation.loader.ini']) ? $this->services['translation.loader.ini'] : $this->get('translation.loader.ini')) && false ?: '_'});
        $instance->addLoader('json', ${($_ = isset($this->services['translation.loader.json']) ? $this->services['translation.loader.json'] : $this->get('translation.loader.json')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'translation.loader.csv' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\CsvFileLoader
     */
    protected function getTranslation_Loader_CsvService()
    {
        return $this->services['translation.loader.csv'] = new \Symfony\Component\Translation\Loader\CsvFileLoader();
    }

    /**
     * Gets the public 'translation.loader.dat' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\IcuDatFileLoader
     */
    protected function getTranslation_Loader_DatService()
    {
        return $this->services['translation.loader.dat'] = new \Symfony\Component\Translation\Loader\IcuDatFileLoader();
    }

    /**
     * Gets the public 'translation.loader.ini' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\IniFileLoader
     */
    protected function getTranslation_Loader_IniService()
    {
        return $this->services['translation.loader.ini'] = new \Symfony\Component\Translation\Loader\IniFileLoader();
    }

    /**
     * Gets the public 'translation.loader.json' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\JsonFileLoader
     */
    protected function getTranslation_Loader_JsonService()
    {
        return $this->services['translation.loader.json'] = new \Symfony\Component\Translation\Loader\JsonFileLoader();
    }

    /**
     * Gets the public 'translation.loader.mo' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\MoFileLoader
     */
    protected function getTranslation_Loader_MoService()
    {
        return $this->services['translation.loader.mo'] = new \Symfony\Component\Translation\Loader\MoFileLoader();
    }

    /**
     * Gets the public 'translation.loader.php' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\PhpFileLoader
     */
    protected function getTranslation_Loader_PhpService()
    {
        return $this->services['translation.loader.php'] = new \Symfony\Component\Translation\Loader\PhpFileLoader();
    }

    /**
     * Gets the public 'translation.loader.po' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\PoFileLoader
     */
    protected function getTranslation_Loader_PoService()
    {
        return $this->services['translation.loader.po'] = new \Symfony\Component\Translation\Loader\PoFileLoader();
    }

    /**
     * Gets the public 'translation.loader.qt' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\QtFileLoader
     */
    protected function getTranslation_Loader_QtService()
    {
        return $this->services['translation.loader.qt'] = new \Symfony\Component\Translation\Loader\QtFileLoader();
    }

    /**
     * Gets the public 'translation.loader.res' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\IcuResFileLoader
     */
    protected function getTranslation_Loader_ResService()
    {
        return $this->services['translation.loader.res'] = new \Symfony\Component\Translation\Loader\IcuResFileLoader();
    }

    /**
     * Gets the public 'translation.loader.xliff' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\XliffFileLoader
     */
    protected function getTranslation_Loader_XliffService()
    {
        return $this->services['translation.loader.xliff'] = new \Symfony\Component\Translation\Loader\XliffFileLoader();
    }

    /**
     * Gets the public 'translation.loader.yml' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\YamlFileLoader
     */
    protected function getTranslation_Loader_YmlService()
    {
        return $this->services['translation.loader.yml'] = new \Symfony\Component\Translation\Loader\YamlFileLoader();
    }

    /**
     * Gets the public 'translation.writer' shared service.
     *
     * @return \Symfony\Component\Translation\Writer\TranslationWriter
     */
    protected function getTranslation_WriterService()
    {
        $this->services['translation.writer'] = $instance = new \Symfony\Component\Translation\Writer\TranslationWriter();

        $instance->addDumper('php', ${($_ = isset($this->services['translation.dumper.php']) ? $this->services['translation.dumper.php'] : $this->get('translation.dumper.php')) && false ?: '_'});
        $instance->addDumper('xlf', ${($_ = isset($this->services['translation.dumper.xliff']) ? $this->services['translation.dumper.xliff'] : $this->get('translation.dumper.xliff')) && false ?: '_'});
        $instance->addDumper('po', ${($_ = isset($this->services['translation.dumper.po']) ? $this->services['translation.dumper.po'] : $this->get('translation.dumper.po')) && false ?: '_'});
        $instance->addDumper('mo', ${($_ = isset($this->services['translation.dumper.mo']) ? $this->services['translation.dumper.mo'] : $this->get('translation.dumper.mo')) && false ?: '_'});
        $instance->addDumper('yml', ${($_ = isset($this->services['translation.dumper.yml']) ? $this->services['translation.dumper.yml'] : $this->get('translation.dumper.yml')) && false ?: '_'});
        $instance->addDumper('ts', ${($_ = isset($this->services['translation.dumper.qt']) ? $this->services['translation.dumper.qt'] : $this->get('translation.dumper.qt')) && false ?: '_'});
        $instance->addDumper('csv', ${($_ = isset($this->services['translation.dumper.csv']) ? $this->services['translation.dumper.csv'] : $this->get('translation.dumper.csv')) && false ?: '_'});
        $instance->addDumper('ini', ${($_ = isset($this->services['translation.dumper.ini']) ? $this->services['translation.dumper.ini'] : $this->get('translation.dumper.ini')) && false ?: '_'});
        $instance->addDumper('json', ${($_ = isset($this->services['translation.dumper.json']) ? $this->services['translation.dumper.json'] : $this->get('translation.dumper.json')) && false ?: '_'});
        $instance->addDumper('res', ${($_ = isset($this->services['translation.dumper.res']) ? $this->services['translation.dumper.res'] : $this->get('translation.dumper.res')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the public 'translator' shared service.
     *
     * @return \Symfony\Component\Translation\DataCollectorTranslator
     */
    protected function getTranslatorService()
    {
        return $this->services['translator'] = new \Symfony\Component\Translation\DataCollectorTranslator(new \Symfony\Component\Translation\LoggingTranslator(${($_ = isset($this->services['translator.default']) ? $this->services['translator.default'] : $this->get('translator.default')) && false ?: '_'}, ${($_ = isset($this->services['monolog.logger.translation']) ? $this->services['monolog.logger.translation'] : $this->get('monolog.logger.translation')) && false ?: '_'}));
    }

    /**
     * Gets the public 'translator.default' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Translation\Translator
     */
    protected function getTranslator_DefaultService()
    {
        $this->services['translator.default'] = $instance = new \Symfony\Bundle\FrameworkBundle\Translation\Translator(new \Symfony\Component\DependencyInjection\ServiceLocator(array('translation.loader.csv' => function () {
            return ${($_ = isset($this->services['translation.loader.csv']) ? $this->services['translation.loader.csv'] : $this->get('translation.loader.csv')) && false ?: '_'};
        }, 'translation.loader.dat' => function () {
            return ${($_ = isset($this->services['translation.loader.dat']) ? $this->services['translation.loader.dat'] : $this->get('translation.loader.dat')) && false ?: '_'};
        }, 'translation.loader.ini' => function () {
            return ${($_ = isset($this->services['translation.loader.ini']) ? $this->services['translation.loader.ini'] : $this->get('translation.loader.ini')) && false ?: '_'};
        }, 'translation.loader.json' => function () {
            return ${($_ = isset($this->services['translation.loader.json']) ? $this->services['translation.loader.json'] : $this->get('translation.loader.json')) && false ?: '_'};
        }, 'translation.loader.mo' => function () {
            return ${($_ = isset($this->services['translation.loader.mo']) ? $this->services['translation.loader.mo'] : $this->get('translation.loader.mo')) && false ?: '_'};
        }, 'translation.loader.php' => function () {
            return ${($_ = isset($this->services['translation.loader.php']) ? $this->services['translation.loader.php'] : $this->get('translation.loader.php')) && false ?: '_'};
        }, 'translation.loader.po' => function () {
            return ${($_ = isset($this->services['translation.loader.po']) ? $this->services['translation.loader.po'] : $this->get('translation.loader.po')) && false ?: '_'};
        }, 'translation.loader.qt' => function () {
            return ${($_ = isset($this->services['translation.loader.qt']) ? $this->services['translation.loader.qt'] : $this->get('translation.loader.qt')) && false ?: '_'};
        }, 'translation.loader.res' => function () {
            return ${($_ = isset($this->services['translation.loader.res']) ? $this->services['translation.loader.res'] : $this->get('translation.loader.res')) && false ?: '_'};
        }, 'translation.loader.xliff' => function () {
            return ${($_ = isset($this->services['translation.loader.xliff']) ? $this->services['translation.loader.xliff'] : $this->get('translation.loader.xliff')) && false ?: '_'};
        }, 'translation.loader.yml' => function () {
            return ${($_ = isset($this->services['translation.loader.yml']) ? $this->services['translation.loader.yml'] : $this->get('translation.loader.yml')) && false ?: '_'};
        })), new \Symfony\Component\Translation\MessageSelector(), 'es', array('translation.loader.php' => array(0 => 'php'), 'translation.loader.yml' => array(0 => 'yml'), 'translation.loader.xliff' => array(0 => 'xlf', 1 => 'xliff'), 'translation.loader.po' => array(0 => 'po'), 'translation.loader.mo' => array(0 => 'mo'), 'translation.loader.qt' => array(0 => 'ts'), 'translation.loader.csv' => array(0 => 'csv'), 'translation.loader.res' => array(0 => 'res'), 'translation.loader.dat' => array(0 => 'dat'), 'translation.loader.ini' => array(0 => 'ini'), 'translation.loader.json' => array(0 => 'json')), array('cache_dir' => (__DIR__.'/translations'), 'debug' => true, 'resource_files' => array('af' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.af.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.af.yml')), 'ar' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.ar.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.ar.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.ar.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\knplabs\\knp-paginator-bundle/Resources/translations\\KnpPaginatorBundle.ar.xliff'), 4 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.ar.yml'), 5 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.ar.yml'), 6 => ($this->targetDirs[3].'\\vendor\\sonata-project\\admin-bundle\\src/Resources/translations\\SonataAdminBundle.ar.xliff'), 7 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.ar.xliff'), 8 => ($this->targetDirs[3].'\\vendor\\mopa\\bootstrap-bundle\\Mopa\\Bundle\\BootstrapBundle/Resources/translations\\pagination.ar.yml'), 9 => ($this->targetDirs[3].'\\vendor\\white-october\\pagerfanta-bundle/Resources/translations\\pagerfanta.ar.xliff'), 10 => ($this->targetDirs[3].'\\vendor\\gregwar\\captcha-bundle/Resources/translations\\gregwar_captcha.ar.yml'), 11 => ($this->targetDirs[3].'\\vendor\\gregwar\\captcha-bundle/Resources/translations\\validators.ar.yml')), 'az' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.az.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.az.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.az.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\white-october\\pagerfanta-bundle/Resources/translations\\pagerfanta.az.xliff')), 'bg' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.bg.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.bg.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.bg.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.bg.yml'), 4 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.bg.yml'), 5 => ($this->targetDirs[3].'\\vendor\\sonata-project\\user-bundle/Resources/translations\\SonataUserBundle.bg.xliff'), 6 => ($this->targetDirs[3].'\\vendor\\sonata-project\\media-bundle\\src/Resources/translations\\SonataMediaBundle.bg.xliff'), 7 => ($this->targetDirs[3].'\\vendor\\sonata-project\\admin-bundle\\src/Resources/translations\\SonataAdminBundle.bg.xliff'), 8 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.bg.xliff'), 9 => ($this->targetDirs[3].'\\vendor\\sonata-project\\datagrid-bundle\\src/Resources/translations\\SonataDatagridBundle.bg.xliff'), 10 => ($this->targetDirs[3].'\\vendor\\gregwar\\captcha-bundle/Resources/translations\\gregwar_captcha.bg.yml'), 11 => ($this->targetDirs[3].'\\vendor\\gregwar\\captcha-bundle/Resources/translations\\validators.bg.yml')), 'ca' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.ca.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.ca.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.ca.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.ca.yml'), 4 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.ca.yml'), 5 => ($this->targetDirs[3].'\\vendor\\sonata-project\\user-bundle/Resources/translations\\SonataUserBundle.ca.xliff'), 6 => ($this->targetDirs[3].'\\vendor\\sonata-project\\media-bundle\\src/Resources/translations\\SonataMediaBundle.ca.xliff'), 7 => ($this->targetDirs[3].'\\vendor\\sonata-project\\admin-bundle\\src/Resources/translations\\SonataAdminBundle.ca.xliff'), 8 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.ca.xliff'), 9 => ($this->targetDirs[3].'\\vendor\\sonata-project\\datagrid-bundle\\src/Resources/translations\\SonataDatagridBundle.ca.xliff'), 10 => ($this->targetDirs[3].'\\vendor\\white-october\\pagerfanta-bundle/Resources/translations\\pagerfanta.ca.xliff')), 'cs' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.cs.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.cs.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.cs.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.cs.yml'), 4 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.cs.yml'), 5 => ($this->targetDirs[3].'\\vendor\\sonata-project\\user-bundle/Resources/translations\\SonataUserBundle.cs.xliff'), 6 => ($this->targetDirs[3].'\\vendor\\sonata-project\\admin-bundle\\src/Resources/translations\\SonataAdminBundle.cs.xliff'), 7 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.cs.xliff'), 8 => ($this->targetDirs[3].'\\vendor\\sonata-project\\formatter-bundle\\src/Resources/translations\\SonataFormatterBundle.cs.xliff'), 9 => ($this->targetDirs[3].'\\vendor\\sonata-project\\datagrid-bundle\\src/Resources/translations\\SonataDatagridBundle.cs.xliff'), 10 => ($this->targetDirs[3].'\\vendor\\white-october\\pagerfanta-bundle/Resources/translations\\pagerfanta.cs.xliff'), 11 => ($this->targetDirs[3].'\\vendor\\gregwar\\captcha-bundle/Resources/translations\\gregwar_captcha.cs.yml'), 12 => ($this->targetDirs[3].'\\vendor\\gregwar\\captcha-bundle/Resources/translations\\validators.cs.yml')), 'cy' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.cy.xlf')), 'da' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.da.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.da.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.da.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\knplabs\\knp-paginator-bundle/Resources/translations\\KnpPaginatorBundle.da.xliff'), 4 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.da.yml'), 5 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.da.yml'), 6 => ($this->targetDirs[3].'\\vendor\\white-october\\pagerfanta-bundle/Resources/translations\\pagerfanta.da.xliff')), 'de' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.de.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.de.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.de.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\knplabs\\knp-paginator-bundle/Resources/translations\\KnpPaginatorBundle.de.xliff'), 4 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.de.yml'), 5 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.de.yml'), 6 => ($this->targetDirs[3].'\\vendor\\sonata-project\\user-bundle/Resources/translations\\SonataUserBundle.de.xliff'), 7 => ($this->targetDirs[3].'\\vendor\\sonata-project\\media-bundle\\src/Resources/translations\\SonataMediaBundle.de.xliff'), 8 => ($this->targetDirs[3].'\\vendor\\sonata-project\\admin-bundle\\src/Resources/translations\\SonataAdminBundle.de.xliff'), 9 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.de.xliff'), 10 => ($this->targetDirs[3].'\\vendor\\sonata-project\\formatter-bundle\\src/Resources/translations\\SonataFormatterBundle.de.xliff'), 11 => ($this->targetDirs[3].'\\vendor\\sonata-project\\block-bundle\\src/Resources/translations\\SonataBlockBundle.de.xliff'), 12 => ($this->targetDirs[3].'\\vendor\\sonata-project\\block-bundle\\src/Resources/translations\\validators.de.xliff'), 13 => ($this->targetDirs[3].'\\vendor\\sonata-project\\classification-bundle\\src/Resources/translations\\SonataClassificationBundle.de.xliff'), 14 => ($this->targetDirs[3].'\\vendor\\sonata-project\\datagrid-bundle\\src/Resources/translations\\SonataDatagridBundle.de.xliff'), 15 => ($this->targetDirs[3].'\\vendor\\mopa\\bootstrap-bundle\\Mopa\\Bundle\\BootstrapBundle/Resources/translations\\pagination.de.yml'), 16 => ($this->targetDirs[3].'\\vendor\\lexik\\form-filter-bundle/Resources/translations\\LexikFormFilterBundle.de.yml'), 17 => ($this->targetDirs[3].'\\vendor\\white-october\\pagerfanta-bundle/Resources/translations\\pagerfanta.de.xliff'), 18 => ($this->targetDirs[3].'\\vendor\\gregwar\\captcha-bundle/Resources/translations\\gregwar_captcha.de.yml'), 19 => ($this->targetDirs[3].'\\vendor\\gregwar\\captcha-bundle/Resources/translations\\validators.de.yml')), 'el' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.el.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.el.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.el.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.el.yml'), 4 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.el.yml')), 'en' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.en.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.en.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.en.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\knplabs\\knp-paginator-bundle/Resources/translations\\KnpPaginatorBundle.en.xliff'), 4 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.en.yml'), 5 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.en.yml'), 6 => ($this->targetDirs[3].'\\vendor\\sonata-project\\user-bundle/Resources/translations\\FOSUserBundle.en.xliff'), 7 => ($this->targetDirs[3].'\\vendor\\sonata-project\\user-bundle/Resources/translations\\SonataUserBundle.en.xliff'), 8 => ($this->targetDirs[3].'\\vendor\\sonata-project\\media-bundle\\src/Resources/translations\\SonataMediaBundle.en.xliff'), 9 => ($this->targetDirs[3].'\\vendor\\sonata-project\\admin-bundle\\src/Resources/translations\\SonataAdminBundle.en.xliff'), 10 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.en.xliff'), 11 => ($this->targetDirs[3].'\\vendor\\sonata-project\\formatter-bundle\\src/Resources/translations\\SonataFormatterBundle.en.xliff'), 12 => ($this->targetDirs[3].'\\vendor\\sonata-project\\block-bundle\\src/Resources/translations\\SonataBlockBundle.en.xliff'), 13 => ($this->targetDirs[3].'\\vendor\\sonata-project\\block-bundle\\src/Resources/translations\\validators.en.xliff'), 14 => ($this->targetDirs[3].'\\vendor\\sonata-project\\classification-bundle\\src/Resources/translations\\SonataClassificationBundle.en.xliff'), 15 => ($this->targetDirs[3].'\\vendor\\sonata-project\\datagrid-bundle\\src/Resources/translations\\SonataDatagridBundle.en.xliff'), 16 => ($this->targetDirs[3].'\\vendor\\mopa\\bootstrap-bundle\\Mopa\\Bundle\\BootstrapBundle/Resources/translations\\pagination.en.yml'), 17 => ($this->targetDirs[3].'\\vendor\\lexik\\form-filter-bundle/Resources/translations\\LexikFormFilterBundle.en.yml'), 18 => ($this->targetDirs[3].'\\vendor\\white-october\\pagerfanta-bundle/Resources/translations\\pagerfanta.en.xliff'), 19 => ($this->targetDirs[3].'\\app/Resources/DataDogAuditBundle/translations\\DataDogAuditBundle.en.xlf'), 20 => ($this->targetDirs[3].'\\vendor\\gregwar\\captcha-bundle/Resources/translations\\gregwar_captcha.en.yml'), 21 => ($this->targetDirs[3].'\\vendor\\gregwar\\captcha-bundle/Resources/translations\\validators.en.yml'), 22 => ($this->targetDirs[3].'\\app/Resources/AppBundle/translations\\AppBundle.en.xliff')), 'es' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.es.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.es.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.es.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\knplabs\\knp-paginator-bundle/Resources/translations\\KnpPaginatorBundle.es.xliff'), 4 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.es.yml'), 5 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.es.yml'), 6 => ($this->targetDirs[3].'\\vendor\\sonata-project\\user-bundle/Resources/translations\\SonataUserBundle.es.xliff'), 7 => ($this->targetDirs[3].'\\app/Resources/SonataUserBundle/translations\\SonataUserBundle.es.xliff'), 8 => ($this->targetDirs[3].'\\vendor\\sonata-project\\media-bundle\\src/Resources/translations\\SonataMediaBundle.es.xliff'), 9 => ($this->targetDirs[3].'\\app/Resources/SonataMediaBundle/translations\\SonataMediaBundle.es.xliff'), 10 => ($this->targetDirs[3].'\\vendor\\sonata-project\\admin-bundle\\src/Resources/translations\\SonataAdminBundle.es.xliff'), 11 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.es.xliff'), 12 => ($this->targetDirs[3].'\\vendor\\sonata-project\\formatter-bundle\\src/Resources/translations\\SonataFormatterBundle.es.xliff'), 13 => ($this->targetDirs[3].'\\vendor\\sonata-project\\classification-bundle\\src/Resources/translations\\SonataClassificationBundle.es.xliff'), 14 => ($this->targetDirs[3].'\\vendor\\sonata-project\\datagrid-bundle\\src/Resources/translations\\SonataDatagridBundle.es.xliff'), 15 => ($this->targetDirs[3].'\\vendor\\mopa\\bootstrap-bundle\\Mopa\\Bundle\\BootstrapBundle/Resources/translations\\pagination.es.yml'), 16 => ($this->targetDirs[3].'\\vendor\\lexik\\form-filter-bundle/Resources/translations\\LexikFormFilterBundle.es.yml'), 17 => ($this->targetDirs[3].'\\vendor\\white-october\\pagerfanta-bundle/Resources/translations\\pagerfanta.es.xliff'), 18 => ($this->targetDirs[3].'\\app/Resources/DataDogAuditBundle/translations\\DataDogAuditBundle.es.xlf'), 19 => ($this->targetDirs[3].'\\vendor\\gregwar\\captcha-bundle/Resources/translations\\gregwar_captcha.es.yml'), 20 => ($this->targetDirs[3].'\\vendor\\gregwar\\captcha-bundle/Resources/translations\\validators.es.yml'), 21 => ($this->targetDirs[3].'\\app/Resources/GregwarCaptchaBundle/translations\\GregwarCaptchaBundle.es.xliff'), 22 => ($this->targetDirs[3].'\\app/Resources/AppBundle/translations\\AppBundle.es.xliff'), 23 => ($this->targetDirs[3].'\\app/Resources/translations\\messages.es.xliff')), 'et' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.et.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.et.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.et.yml')), 'eu' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.eu.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.eu.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.eu.yml'), 3 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.eu.yml'), 4 => ($this->targetDirs[3].'\\vendor\\sonata-project\\admin-bundle\\src/Resources/translations\\SonataAdminBundle.eu.xliff'), 5 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.eu.xliff'), 6 => ($this->targetDirs[3].'\\vendor\\sonata-project\\datagrid-bundle\\src/Resources/translations\\SonataDatagridBundle.eu.xliff')), 'fa' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.fa.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.fa.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.fa.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\knplabs\\knp-paginator-bundle/Resources/translations\\KnpPaginatorBundle.fa.xliff'), 4 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.fa.yml'), 5 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.fa.yml'), 6 => ($this->targetDirs[3].'\\vendor\\sonata-project\\user-bundle/Resources/translations\\SonataUserBundle.fa.xliff'), 7 => ($this->targetDirs[3].'\\vendor\\sonata-project\\media-bundle\\src/Resources/translations\\SonataMediaBundle.fa.xliff'), 8 => ($this->targetDirs[3].'\\vendor\\sonata-project\\admin-bundle\\src/Resources/translations\\SonataAdminBundle.fa.xliff'), 9 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.fa.xliff'), 10 => ($this->targetDirs[3].'\\vendor\\sonata-project\\classification-bundle\\src/Resources/translations\\SonataClassificationBundle.fa.xliff'), 11 => ($this->targetDirs[3].'\\vendor\\sonata-project\\datagrid-bundle\\src/Resources/translations\\SonataDatagridBundle.fa.xliff'), 12 => ($this->targetDirs[3].'\\vendor\\white-october\\pagerfanta-bundle/Resources/translations\\pagerfanta.fa.xliff')), 'fi' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.fi.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.fi.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.fi.yml'), 3 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.fi.yml'), 4 => ($this->targetDirs[3].'\\vendor\\sonata-project\\user-bundle/Resources/translations\\FOSUserBundle.fi.xliff'), 5 => ($this->targetDirs[3].'\\vendor\\sonata-project\\user-bundle/Resources/translations\\SonataUserBundle.fi.xliff'), 6 => ($this->targetDirs[3].'\\vendor\\sonata-project\\media-bundle\\src/Resources/translations\\SonataMediaBundle.fi.xliff'), 7 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.fi.xliff')), 'fr' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.fr.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.fr.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.fr.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\knplabs\\knp-paginator-bundle/Resources/translations\\KnpPaginatorBundle.fr.xliff'), 4 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.fr.yml'), 5 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.fr.yml'), 6 => ($this->targetDirs[3].'\\vendor\\sonata-project\\user-bundle/Resources/translations\\FOSUserBundle.fr.xliff'), 7 => ($this->targetDirs[3].'\\vendor\\sonata-project\\user-bundle/Resources/translations\\SonataUserBundle.fr.xliff'), 8 => ($this->targetDirs[3].'\\vendor\\sonata-project\\media-bundle\\src/Resources/translations\\SonataMediaBundle.fr.xliff'), 9 => ($this->targetDirs[3].'\\vendor\\sonata-project\\admin-bundle\\src/Resources/translations\\SonataAdminBundle.fr.xliff'), 10 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.fr.xliff'), 11 => ($this->targetDirs[3].'\\vendor\\sonata-project\\formatter-bundle\\src/Resources/translations\\SonataFormatterBundle.fr.xliff'), 12 => ($this->targetDirs[3].'\\vendor\\sonata-project\\block-bundle\\src/Resources/translations\\SonataBlockBundle.fr.xliff'), 13 => ($this->targetDirs[3].'\\vendor\\sonata-project\\block-bundle\\src/Resources/translations\\validators.fr.xliff'), 14 => ($this->targetDirs[3].'\\vendor\\sonata-project\\classification-bundle\\src/Resources/translations\\SonataClassificationBundle.fr.xliff'), 15 => ($this->targetDirs[3].'\\vendor\\sonata-project\\datagrid-bundle\\src/Resources/translations\\SonataDatagridBundle.fr.xliff'), 16 => ($this->targetDirs[3].'\\vendor\\mopa\\bootstrap-bundle\\Mopa\\Bundle\\BootstrapBundle/Resources/translations\\pagination.fr.yml'), 17 => ($this->targetDirs[3].'\\vendor\\lexik\\form-filter-bundle/Resources/translations\\LexikFormFilterBundle.fr.yml'), 18 => ($this->targetDirs[3].'\\vendor\\white-october\\pagerfanta-bundle/Resources/translations\\pagerfanta.fr.xliff'), 19 => ($this->targetDirs[3].'\\app/Resources/DataDogAuditBundle/translations\\messages.fr.xlf'), 20 => ($this->targetDirs[3].'\\vendor\\gregwar\\captcha-bundle/Resources/translations\\gregwar_captcha.fr.yml'), 21 => ($this->targetDirs[3].'\\vendor\\gregwar\\captcha-bundle/Resources/translations\\validators.fr.yml')), 'gl' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.gl.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.gl.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.gl.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.gl.yml'), 4 => ($this->targetDirs[3].'\\vendor\\white-october\\pagerfanta-bundle/Resources/translations\\pagerfanta.gl.xliff')), 'he' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.he.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.he.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.he.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.he.yml'), 4 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.he.yml')), 'hr' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.hr.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.hr.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.hr.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.hr.yml'), 4 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.hr.yml'), 5 => ($this->targetDirs[3].'\\vendor\\sonata-project\\user-bundle/Resources/translations\\FOSUserBundle.hr.xliff'), 6 => ($this->targetDirs[3].'\\vendor\\sonata-project\\user-bundle/Resources/translations\\SonataUserBundle.hr.xliff'), 7 => ($this->targetDirs[3].'\\vendor\\sonata-project\\admin-bundle\\src/Resources/translations\\SonataAdminBundle.hr.xliff'), 8 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.hr.xliff'), 9 => ($this->targetDirs[3].'\\vendor\\sonata-project\\datagrid-bundle\\src/Resources/translations\\SonataDatagridBundle.hr.xliff'), 10 => ($this->targetDirs[3].'\\vendor\\white-october\\pagerfanta-bundle/Resources/translations\\pagerfanta.hr.xliff')), 'hu' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.hu.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.hu.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.hu.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\knplabs\\knp-paginator-bundle/Resources/translations\\KnpPaginatorBundle.hu.xliff'), 4 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.hu.yml'), 5 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.hu.yml'), 6 => ($this->targetDirs[3].'\\vendor\\sonata-project\\user-bundle/Resources/translations\\SonataUserBundle.hu.xliff'), 7 => ($this->targetDirs[3].'\\vendor\\sonata-project\\media-bundle\\src/Resources/translations\\SonataMediaBundle.hu.xliff'), 8 => ($this->targetDirs[3].'\\vendor\\sonata-project\\admin-bundle\\src/Resources/translations\\SonataAdminBundle.hu.xliff'), 9 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.hu.xliff'), 10 => ($this->targetDirs[3].'\\vendor\\sonata-project\\formatter-bundle\\src/Resources/translations\\SonataFormatterBundle.hu.xliff'), 11 => ($this->targetDirs[3].'\\vendor\\sonata-project\\block-bundle\\src/Resources/translations\\SonataBlockBundle.hu.xliff'), 12 => ($this->targetDirs[3].'\\vendor\\sonata-project\\classification-bundle\\src/Resources/translations\\SonataClassificationBundle.hu.xliff'), 13 => ($this->targetDirs[3].'\\vendor\\sonata-project\\datagrid-bundle\\src/Resources/translations\\SonataDatagridBundle.hu.xliff')), 'hy' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.hy.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.hy.xlf')), 'id' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.id.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.id.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.id.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\knplabs\\knp-paginator-bundle/Resources/translations\\KnpPaginatorBundle.id.xliff'), 4 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.id.yml'), 5 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.id.yml')), 'it' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.it.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.it.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.it.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\knplabs\\knp-paginator-bundle/Resources/translations\\KnpPaginatorBundle.it.xliff'), 4 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.it.yml'), 5 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.it.yml'), 6 => ($this->targetDirs[3].'\\vendor\\sonata-project\\user-bundle/Resources/translations\\FOSUserBundle.it.xliff'), 7 => ($this->targetDirs[3].'\\vendor\\sonata-project\\user-bundle/Resources/translations\\SonataUserBundle.it.xliff'), 8 => ($this->targetDirs[3].'\\vendor\\sonata-project\\media-bundle\\src/Resources/translations\\SonataMediaBundle.it.xliff'), 9 => ($this->targetDirs[3].'\\vendor\\sonata-project\\admin-bundle\\src/Resources/translations\\SonataAdminBundle.it.xliff'), 10 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.it.xliff'), 11 => ($this->targetDirs[3].'\\vendor\\sonata-project\\formatter-bundle\\src/Resources/translations\\SonataFormatterBundle.it.xliff'), 12 => ($this->targetDirs[3].'\\vendor\\sonata-project\\block-bundle\\src/Resources/translations\\SonataBlockBundle.it.xliff'), 13 => ($this->targetDirs[3].'\\vendor\\sonata-project\\classification-bundle\\src/Resources/translations\\SonataClassificationBundle.it.xliff'), 14 => ($this->targetDirs[3].'\\vendor\\sonata-project\\datagrid-bundle\\src/Resources/translations\\SonataDatagridBundle.it.xliff'), 15 => ($this->targetDirs[3].'\\vendor\\mopa\\bootstrap-bundle\\Mopa\\Bundle\\BootstrapBundle/Resources/translations\\pagination.it.yml'), 16 => ($this->targetDirs[3].'\\vendor\\lexik\\form-filter-bundle/Resources/translations\\LexikFormFilterBundle.it.yml'), 17 => ($this->targetDirs[3].'\\vendor\\white-october\\pagerfanta-bundle/Resources/translations\\pagerfanta.it.xliff'), 18 => ($this->targetDirs[3].'\\vendor\\gregwar\\captcha-bundle/Resources/translations\\gregwar_captcha.it.yml'), 19 => ($this->targetDirs[3].'\\vendor\\gregwar\\captcha-bundle/Resources/translations\\validators.it.yml')), 'ja' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.ja.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.ja.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.ja.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.ja.yml'), 4 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.ja.yml'), 5 => ($this->targetDirs[3].'\\vendor\\sonata-project\\user-bundle/Resources/translations\\SonataUserBundle.ja.xliff'), 6 => ($this->targetDirs[3].'\\vendor\\sonata-project\\media-bundle\\src/Resources/translations\\SonataMediaBundle.ja.xliff'), 7 => ($this->targetDirs[3].'\\vendor\\sonata-project\\admin-bundle\\src/Resources/translations\\SonataAdminBundle.ja.xliff'), 8 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.ja.xliff'), 9 => ($this->targetDirs[3].'\\vendor\\sonata-project\\formatter-bundle\\src/Resources/translations\\SonataFormatterBundle.ja.xliff'), 10 => ($this->targetDirs[3].'\\vendor\\sonata-project\\classification-bundle\\src/Resources/translations\\SonataClassificationBundle.ja.xliff'), 11 => ($this->targetDirs[3].'\\vendor\\sonata-project\\datagrid-bundle\\src/Resources/translations\\SonataDatagridBundle.ja.xliff'), 12 => ($this->targetDirs[3].'\\vendor\\mopa\\bootstrap-bundle\\Mopa\\Bundle\\BootstrapBundle/Resources/translations\\pagination.ja.yml')), 'lb' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.lb.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.lb.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.lb.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.lb.yml'), 4 => ($this->targetDirs[3].'\\vendor\\sonata-project\\admin-bundle\\src/Resources/translations\\SonataAdminBundle.lb.xliff'), 5 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.lb.xliff'), 6 => ($this->targetDirs[3].'\\vendor\\sonata-project\\datagrid-bundle\\src/Resources/translations\\SonataDatagridBundle.lb.xliff')), 'lt' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.lt.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.lt.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.lt.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\knplabs\\knp-paginator-bundle/Resources/translations\\KnpPaginatorBundle.lt.xliff'), 4 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.lt.yml'), 5 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.lt.yml'), 6 => ($this->targetDirs[3].'\\vendor\\sonata-project\\user-bundle/Resources/translations\\SonataUserBundle.lt.xliff'), 7 => ($this->targetDirs[3].'\\vendor\\sonata-project\\media-bundle\\src/Resources/translations\\SonataMediaBundle.lt.xliff'), 8 => ($this->targetDirs[3].'\\vendor\\sonata-project\\admin-bundle\\src/Resources/translations\\SonataAdminBundle.lt.xliff'), 9 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.lt.xliff'), 10 => ($this->targetDirs[3].'\\vendor\\sonata-project\\datagrid-bundle\\src/Resources/translations\\SonataDatagridBundle.lt.xliff'), 11 => ($this->targetDirs[3].'\\vendor\\mopa\\bootstrap-bundle\\Mopa\\Bundle\\BootstrapBundle/Resources/translations\\pagination.lt.yml')), 'lv' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.lv.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.lv.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.lv.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.lv.yml'), 4 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.lv.yml'), 5 => ($this->targetDirs[3].'\\vendor\\sonata-project\\admin-bundle\\src/Resources/translations\\SonataAdminBundle.lv.xliff')), 'mn' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.mn.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.mn.xlf')), 'nb' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.nb.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.nb.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.nb.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.nb.yml'), 4 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.nb.yml')), 'nl' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.nl.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.nl.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.nl.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\knplabs\\knp-paginator-bundle/Resources/translations\\KnpPaginatorBundle.nl.xliff'), 4 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.nl.yml'), 5 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.nl.yml'), 6 => ($this->targetDirs[3].'\\vendor\\sonata-project\\user-bundle/Resources/translations\\SonataUserBundle.nl.xliff'), 7 => ($this->targetDirs[3].'\\vendor\\sonata-project\\media-bundle\\src/Resources/translations\\SonataMediaBundle.nl.xliff'), 8 => ($this->targetDirs[3].'\\vendor\\sonata-project\\admin-bundle\\src/Resources/translations\\SonataAdminBundle.nl.xliff'), 9 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.nl.xliff'), 10 => ($this->targetDirs[3].'\\vendor\\sonata-project\\formatter-bundle\\src/Resources/translations\\SonataFormatterBundle.nl.xliff'), 11 => ($this->targetDirs[3].'\\vendor\\sonata-project\\classification-bundle\\src/Resources/translations\\SonataClassificationBundle.nl.xliff'), 12 => ($this->targetDirs[3].'\\vendor\\sonata-project\\datagrid-bundle\\src/Resources/translations\\SonataDatagridBundle.nl.xliff'), 13 => ($this->targetDirs[3].'\\vendor\\mopa\\bootstrap-bundle\\Mopa\\Bundle\\BootstrapBundle/Resources/translations\\pagination.nl.yml'), 14 => ($this->targetDirs[3].'\\vendor\\lexik\\form-filter-bundle/Resources/translations\\LexikFormFilterBundle.nl.yml'), 15 => ($this->targetDirs[3].'\\vendor\\white-october\\pagerfanta-bundle/Resources/translations\\pagerfanta.nl.xliff'), 16 => ($this->targetDirs[3].'\\vendor\\gregwar\\captcha-bundle/Resources/translations\\gregwar_captcha.nl.yml'), 17 => ($this->targetDirs[3].'\\vendor\\gregwar\\captcha-bundle/Resources/translations\\validators.nl.yml')), 'nn' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.nn.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.nn.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.nn.xlf')), 'no' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.no.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.no.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.no.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\sonata-project\\admin-bundle\\src/Resources/translations\\SonataAdminBundle.no.xliff'), 4 => ($this->targetDirs[3].'\\vendor\\white-october\\pagerfanta-bundle/Resources/translations\\pagerfanta.no.xliff')), 'pl' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.pl.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.pl.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.pl.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\knplabs\\knp-paginator-bundle/Resources/translations\\KnpPaginatorBundle.pl.xliff'), 4 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.pl.yml'), 5 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.pl.yml'), 6 => ($this->targetDirs[3].'\\vendor\\sonata-project\\user-bundle/Resources/translations\\SonataUserBundle.pl.xliff'), 7 => ($this->targetDirs[3].'\\vendor\\sonata-project\\media-bundle\\src/Resources/translations\\SonataMediaBundle.pl.xliff'), 8 => ($this->targetDirs[3].'\\vendor\\sonata-project\\admin-bundle\\src/Resources/translations\\SonataAdminBundle.pl.xliff'), 9 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.pl.xliff'), 10 => ($this->targetDirs[3].'\\vendor\\sonata-project\\formatter-bundle\\src/Resources/translations\\SonataFormatterBundle.pl.xliff'), 11 => ($this->targetDirs[3].'\\vendor\\sonata-project\\datagrid-bundle\\src/Resources/translations\\SonataDatagridBundle.pl.xliff'), 12 => ($this->targetDirs[3].'\\vendor\\mopa\\bootstrap-bundle\\Mopa\\Bundle\\BootstrapBundle/Resources/translations\\pagination.pl.yml'), 13 => ($this->targetDirs[3].'\\vendor\\white-october\\pagerfanta-bundle/Resources/translations\\pagerfanta.pl.xliff'), 14 => ($this->targetDirs[3].'\\vendor\\gregwar\\captcha-bundle/Resources/translations\\gregwar_captcha.pl.yml'), 15 => ($this->targetDirs[3].'\\vendor\\gregwar\\captcha-bundle/Resources/translations\\validators.pl.yml')), 'pt' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.pt.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.pt.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.pt.yml'), 3 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.pt.yml'), 4 => ($this->targetDirs[3].'\\vendor\\sonata-project\\user-bundle/Resources/translations\\SonataUserBundle.pt.xliff'), 5 => ($this->targetDirs[3].'\\app/Resources/SonataUserBundle/translations\\SonataUserBundle.pt.xliff'), 6 => ($this->targetDirs[3].'\\app/Resources/SonataMediaBundle/translations\\SonataMediaBundle.pt.xliff'), 7 => ($this->targetDirs[3].'\\vendor\\sonata-project\\admin-bundle\\src/Resources/translations\\SonataAdminBundle.pt.xliff'), 8 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.pt.xliff'), 9 => ($this->targetDirs[3].'\\vendor\\sonata-project\\datagrid-bundle\\src/Resources/translations\\SonataDatagridBundle.pt.xliff'), 10 => ($this->targetDirs[3].'\\vendor\\mopa\\bootstrap-bundle\\Mopa\\Bundle\\BootstrapBundle/Resources/translations\\pagination.pt.yml'), 11 => ($this->targetDirs[3].'\\vendor\\white-october\\pagerfanta-bundle/Resources/translations\\pagerfanta.pt.xliff'), 12 => ($this->targetDirs[3].'\\app/Resources/AppBundle/translations\\AppBundle.pt.xliff')), 'pt_BR' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.pt_BR.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.pt_BR.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.pt_BR.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\knplabs\\knp-paginator-bundle/Resources/translations\\KnpPaginatorBundle.pt_BR.xliff'), 4 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.pt_BR.yml'), 5 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.pt_BR.yml'), 6 => ($this->targetDirs[3].'\\vendor\\sonata-project\\user-bundle/Resources/translations\\SonataUserBundle.pt_BR.xliff'), 7 => ($this->targetDirs[3].'\\vendor\\sonata-project\\media-bundle\\src/Resources/translations\\SonataMediaBundle.pt_BR.xliff'), 8 => ($this->targetDirs[3].'\\vendor\\sonata-project\\admin-bundle\\src/Resources/translations\\SonataAdminBundle.pt_BR.xliff'), 9 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.pt_BR.xliff'), 10 => ($this->targetDirs[3].'\\vendor\\sonata-project\\classification-bundle\\src/Resources/translations\\SonataClassificationBundle.pt_BR.xliff'), 11 => ($this->targetDirs[3].'\\vendor\\sonata-project\\datagrid-bundle\\src/Resources/translations\\SonataDatagridBundle.pt_BR.xliff'), 12 => ($this->targetDirs[3].'\\vendor\\lexik\\form-filter-bundle/Resources/translations\\LexikFormFilterBundle.pt_BR.yml'), 13 => ($this->targetDirs[3].'\\vendor\\gregwar\\captcha-bundle/Resources/translations\\gregwar_captcha.pt_BR.yml'), 14 => ($this->targetDirs[3].'\\vendor\\gregwar\\captcha-bundle/Resources/translations\\validators.pt_BR.yml')), 'ro' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.ro.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.ro.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.ro.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\knplabs\\knp-paginator-bundle/Resources/translations\\KnpPaginatorBundle.ro.xliff'), 4 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.ro.yml'), 5 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.ro.yml'), 6 => ($this->targetDirs[3].'\\vendor\\sonata-project\\user-bundle/Resources/translations\\SonataUserBundle.ro.xliff'), 7 => ($this->targetDirs[3].'\\vendor\\sonata-project\\media-bundle\\src/Resources/translations\\SonataMediaBundle.ro.xliff'), 8 => ($this->targetDirs[3].'\\vendor\\sonata-project\\admin-bundle\\src/Resources/translations\\SonataAdminBundle.ro.xliff'), 9 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.ro.xliff'), 10 => ($this->targetDirs[3].'\\vendor\\sonata-project\\classification-bundle\\src/Resources/translations\\SonataClassificationBundle.ro.xliff'), 11 => ($this->targetDirs[3].'\\vendor\\sonata-project\\datagrid-bundle\\src/Resources/translations\\SonataDatagridBundle.ro.xliff'), 12 => ($this->targetDirs[3].'\\vendor\\white-october\\pagerfanta-bundle/Resources/translations\\pagerfanta.ro.xliff'), 13 => ($this->targetDirs[3].'\\vendor\\gregwar\\captcha-bundle/Resources/translations\\gregwar_captcha.ro.yml'), 14 => ($this->targetDirs[3].'\\vendor\\gregwar\\captcha-bundle/Resources/translations\\validators.ro.yml')), 'ru' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.ru.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.ru.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.ru.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\knplabs\\knp-paginator-bundle/Resources/translations\\KnpPaginatorBundle.ru.xliff'), 4 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.ru.yml'), 5 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.ru.yml'), 6 => ($this->targetDirs[3].'\\vendor\\sonata-project\\user-bundle/Resources/translations\\SonataUserBundle.ru.xliff'), 7 => ($this->targetDirs[3].'\\vendor\\sonata-project\\media-bundle\\src/Resources/translations\\SonataMediaBundle.ru.xliff'), 8 => ($this->targetDirs[3].'\\vendor\\sonata-project\\admin-bundle\\src/Resources/translations\\SonataAdminBundle.ru.xliff'), 9 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.ru.xliff'), 10 => ($this->targetDirs[3].'\\vendor\\sonata-project\\formatter-bundle\\src/Resources/translations\\SonataFormatterBundle.ru.xliff'), 11 => ($this->targetDirs[3].'\\vendor\\sonata-project\\block-bundle\\src/Resources/translations\\SonataBlockBundle.ru.xliff'), 12 => ($this->targetDirs[3].'\\vendor\\sonata-project\\classification-bundle\\src/Resources/translations\\SonataClassificationBundle.ru.xliff'), 13 => ($this->targetDirs[3].'\\vendor\\sonata-project\\datagrid-bundle\\src/Resources/translations\\SonataDatagridBundle.ru.xliff'), 14 => ($this->targetDirs[3].'\\vendor\\mopa\\bootstrap-bundle\\Mopa\\Bundle\\BootstrapBundle/Resources/translations\\pagination.ru.yml'), 15 => ($this->targetDirs[3].'\\vendor\\lexik\\form-filter-bundle/Resources/translations\\LexikFormFilterBundle.ru.yml'), 16 => ($this->targetDirs[3].'\\vendor\\white-october\\pagerfanta-bundle/Resources/translations\\pagerfanta.ru.xliff'), 17 => ($this->targetDirs[3].'\\vendor\\gregwar\\captcha-bundle/Resources/translations\\gregwar_captcha.ru.yml'), 18 => ($this->targetDirs[3].'\\vendor\\gregwar\\captcha-bundle/Resources/translations\\validators.ru.yml')), 'sk' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.sk.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.sk.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.sk.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.sk.yml'), 4 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.sk.yml'), 5 => ($this->targetDirs[3].'\\vendor\\sonata-project\\user-bundle/Resources/translations\\SonataUserBundle.sk.xliff'), 6 => ($this->targetDirs[3].'\\vendor\\sonata-project\\admin-bundle\\src/Resources/translations\\SonataAdminBundle.sk.xliff'), 7 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.sk.xliff'), 8 => ($this->targetDirs[3].'\\vendor\\sonata-project\\formatter-bundle\\src/Resources/translations\\SonataFormatterBundle.sk.xliff'), 9 => ($this->targetDirs[3].'\\vendor\\sonata-project\\datagrid-bundle\\src/Resources/translations\\SonataDatagridBundle.sk.xliff'), 10 => ($this->targetDirs[3].'\\vendor\\mopa\\bootstrap-bundle\\Mopa\\Bundle\\BootstrapBundle/Resources/translations\\pagination.sk.yml'), 11 => ($this->targetDirs[3].'\\vendor\\lexik\\form-filter-bundle/Resources/translations\\LexikFormFilterBundle.sk.yml'), 12 => ($this->targetDirs[3].'\\vendor\\white-october\\pagerfanta-bundle/Resources/translations\\pagerfanta.sk.xliff')), 'sl' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.sl.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.sl.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.sl.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.sl.yml'), 4 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.sl.yml'), 5 => ($this->targetDirs[3].'\\vendor\\sonata-project\\user-bundle/Resources/translations\\SonataUserBundle.sl.xliff'), 6 => ($this->targetDirs[3].'\\vendor\\sonata-project\\media-bundle\\src/Resources/translations\\SonataMediaBundle.sl.xliff'), 7 => ($this->targetDirs[3].'\\vendor\\sonata-project\\admin-bundle\\src/Resources/translations\\SonataAdminBundle.sl.xliff'), 8 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.sl.xliff'), 9 => ($this->targetDirs[3].'\\vendor\\sonata-project\\formatter-bundle\\src/Resources/translations\\SonataFormatterBundle.sl.xliff'), 10 => ($this->targetDirs[3].'\\vendor\\sonata-project\\datagrid-bundle\\src/Resources/translations\\SonataDatagridBundle.sl.xliff'), 11 => ($this->targetDirs[3].'\\vendor\\mopa\\bootstrap-bundle\\Mopa\\Bundle\\BootstrapBundle/Resources/translations\\pagination.sl.yml'), 12 => ($this->targetDirs[3].'\\vendor\\white-october\\pagerfanta-bundle/Resources/translations\\pagerfanta.sl.xliff')), 'sq' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.sq.xlf')), 'sr_Cyrl' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.sr_Cyrl.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.sr_Cyrl.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.sr_Cyrl.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\white-october\\pagerfanta-bundle/Resources/translations\\pagerfanta.sr_Cyrl.xliff')), 'sr_Latn' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.sr_Latn.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.sr_Latn.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.sr_Latn.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.sr_Latn.yml'), 4 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.sr_Latn.yml'), 5 => ($this->targetDirs[3].'\\vendor\\white-october\\pagerfanta-bundle/Resources/translations\\pagerfanta.sr_Latn.xliff')), 'sv' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.sv.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.sv.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.sv.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\knplabs\\knp-paginator-bundle/Resources/translations\\KnpPaginatorBundle.sv.xliff'), 4 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.sv.yml'), 5 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.sv.yml'), 6 => ($this->targetDirs[3].'\\vendor\\mopa\\bootstrap-bundle\\Mopa\\Bundle\\BootstrapBundle/Resources/translations\\pagination.sv.yml')), 'th' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.th.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.th.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.th.yml'), 3 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.th.yml'), 4 => ($this->targetDirs[3].'\\vendor\\white-october\\pagerfanta-bundle/Resources/translations\\pagerfanta.th.xliff')), 'tr' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.tr.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.tr.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.tr.yml'), 3 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.tr.yml'), 4 => ($this->targetDirs[3].'\\vendor\\sonata-project\\admin-bundle\\src/Resources/translations\\SonataAdminBundle.tr.xliff'), 5 => ($this->targetDirs[3].'\\vendor\\white-october\\pagerfanta-bundle/Resources/translations\\pagerfanta.tr.xliff'), 6 => ($this->targetDirs[3].'\\vendor\\gregwar\\captcha-bundle/Resources/translations\\gregwar_captcha.tr.yml'), 7 => ($this->targetDirs[3].'\\vendor\\gregwar\\captcha-bundle/Resources/translations\\validators.tr.yml')), 'uk' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.uk.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.uk.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.uk.yml'), 3 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.uk.yml'), 4 => ($this->targetDirs[3].'\\vendor\\sonata-project\\user-bundle/Resources/translations\\SonataUserBundle.uk.xliff'), 5 => ($this->targetDirs[3].'\\vendor\\sonata-project\\media-bundle\\src/Resources/translations\\SonataMediaBundle.uk.xliff'), 6 => ($this->targetDirs[3].'\\vendor\\sonata-project\\admin-bundle\\src/Resources/translations\\SonataAdminBundle.uk.xliff'), 7 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.uk.xliff'), 8 => ($this->targetDirs[3].'\\vendor\\sonata-project\\datagrid-bundle\\src/Resources/translations\\SonataDatagridBundle.uk.xliff'), 9 => ($this->targetDirs[3].'\\vendor\\mopa\\bootstrap-bundle\\Mopa\\Bundle\\BootstrapBundle/Resources/translations\\pagination.uk.yml'), 10 => ($this->targetDirs[3].'\\vendor\\white-october\\pagerfanta-bundle/Resources/translations\\pagerfanta.uk.xliff'), 11 => ($this->targetDirs[3].'\\vendor\\gregwar\\captcha-bundle/Resources/translations\\gregwar_captcha.uk.yml'), 12 => ($this->targetDirs[3].'\\vendor\\gregwar\\captcha-bundle/Resources/translations\\validators.uk.yml')), 'vi' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.vi.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.vi.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.vi.yml'), 3 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.vi.yml')), 'zh_CN' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.zh_CN.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/translations\\validators.zh_CN.xlf'), 2 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.zh_CN.xlf'), 3 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.zh_CN.yml'), 4 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.zh_CN.yml'), 5 => ($this->targetDirs[3].'\\vendor\\sonata-project\\admin-bundle\\src/Resources/translations\\SonataAdminBundle.zh_CN.xliff'), 6 => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/translations\\SonataCoreBundle.zh_CN.xliff'), 7 => ($this->targetDirs[3].'\\vendor\\sonata-project\\datagrid-bundle\\src/Resources/translations\\SonataDatagridBundle.zh_CN.xliff'), 8 => ($this->targetDirs[3].'\\vendor\\white-october\\pagerfanta-bundle/Resources/translations\\pagerfanta.zh_CN.xliff'), 9 => ($this->targetDirs[3].'\\vendor\\gregwar\\captcha-bundle/Resources/translations\\gregwar_captcha.zh_CN.yml'), 10 => ($this->targetDirs[3].'\\vendor\\gregwar\\captcha-bundle/Resources/translations\\validators.zh_CN.yml')), 'zh_TW' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Validator/Resources/translations\\validators.zh_TW.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\sonata-project\\user-bundle/Resources/translations\\SonataUserBundle.zh_TW.xliff')), 'pt_PT' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.pt_PT.xlf')), 'ua' => array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Security\\Core/Resources/translations\\security.ua.xlf'), 1 => ($this->targetDirs[3].'\\vendor\\lexik\\form-filter-bundle/Resources/translations\\LexikFormFilterBundle.ua.yml')), 'ky' => array(0 => ($this->targetDirs[3].'\\vendor\\knplabs\\knp-paginator-bundle/Resources/translations\\KnpPaginatorBundle.ky.xliff'), 1 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.ky.yml'), 2 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.ky.yml')), 'sw' => array(0 => ($this->targetDirs[3].'\\vendor\\knplabs\\knp-paginator-bundle/Resources/translations\\KnpPaginatorBundle.sw.xliff')), 'bn' => array(0 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.bn.yml'), 1 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.bn.yml')), 'bn_BD' => array(0 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.bn_BD.yml'), 1 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.bn_BD.yml')), 'eo' => array(0 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\FOSUserBundle.eo.yml'), 1 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/translations\\validators.eo.yml')), 'sv_SE' => array(0 => ($this->targetDirs[3].'\\vendor\\sonata-project\\admin-bundle\\src/Resources/translations\\SonataAdminBundle.sv_SE.xliff')), 'oc' => array(0 => ($this->targetDirs[3].'\\vendor\\white-october\\pagerfanta-bundle/Resources/translations\\pagerfanta.oc.xliff')))));

        $instance->setConfigCacheFactory(${($_ = isset($this->services['config_cache_factory']) ? $this->services['config_cache_factory'] : $this->get('config_cache_factory')) && false ?: '_'});
        $instance->setFallbackLocales(array(0 => 'es'));

        return $instance;
    }

    /**
     * Gets the public 'translator_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\TranslatorListener
     */
    protected function getTranslatorListenerService()
    {
        return $this->services['translator_listener'] = new \Symfony\Component\HttpKernel\EventListener\TranslatorListener(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}, ${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'});
    }

    /**
     * Gets the public 'twig' shared service.
     *
     * @return \Twig\Environment
     */
    protected function getTwigService()
    {
        $a = ${($_ = isset($this->services['debug.stopwatch']) ? $this->services['debug.stopwatch'] : $this->get('debug.stopwatch', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'};
        $b = ${($_ = isset($this->services['debug.file_link_formatter']) ? $this->services['debug.file_link_formatter'] : $this->getDebug_FileLinkFormatterService()) && false ?: '_'};
        $c = ${($_ = isset($this->services['router']) ? $this->services['router'] : $this->get('router')) && false ?: '_'};
        $d = ${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'};
        $e = ${($_ = isset($this->services['knp_menu.matcher']) ? $this->services['knp_menu.matcher'] : $this->get('knp_menu.matcher')) && false ?: '_'};

        $f = new \Knp\Menu\Util\MenuManipulator();

        $g = new \Symfony\Component\VarDumper\Dumper\HtmlDumper(NULL, 'UTF-8', 0);
        $g->setDisplayOptions(array('fileLinkFormat' => $b));

        $h = new \Symfony\Component\VarDumper\Dumper\HtmlDumper(NULL, 'UTF-8', 1);
        $h->setDisplayOptions(array('maxStringLength' => 4096, 'fileLinkFormat' => $b));

        $i = new \Symfony\Bridge\Twig\AppVariable();
        $i->setEnvironment('dev');
        $i->setDebug(true);
        if ($this->has('security.token_storage')) {
            $i->setTokenStorage(${($_ = isset($this->services['security.token_storage']) ? $this->services['security.token_storage'] : $this->get('security.token_storage', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
        }
        if ($this->has('request_stack')) {
            $i->setRequestStack($d);
        }

        $this->services['twig'] = $instance = new \Twig\Environment(${($_ = isset($this->services['twig.loader']) ? $this->services['twig.loader'] : $this->get('twig.loader')) && false ?: '_'}, array('paths' => array(($this->targetDirs[3].'\\vendor\\knplabs\\knp-menu\\src\\Knp\\Menu/Resources/views') => NULL), 'base_template_class' => 'Sonata\\CacheBundle\\Twig\\TwigTemplate14', 'form_themes' => array(0 => 'form_div_layout.html.twig', 1 => 'SonataMediaBundle:Form:media_widgets.html.twig', 2 => '@SonataCore/Form/datepicker.html.twig'), 'debug' => true, 'strict_variables' => true, 'exception_controller' => 'FOS\\RestBundle\\Controller\\ExceptionController::showAction', 'autoescape' => 'name', 'cache' => (__DIR__.'/twig'), 'charset' => 'UTF-8', 'date' => array('format' => 'F j, Y H:i', 'interval_format' => '%d days', 'timezone' => NULL), 'number_format' => array('decimals' => 0, 'decimal_point' => '.', 'thousands_separator' => ',')));

        $instance->addExtension(${($_ = isset($this->services['twig.audit.extension']) ? $this->services['twig.audit.extension'] : $this->get('twig.audit.extension')) && false ?: '_'});
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\LogoutUrlExtension(${($_ = isset($this->services['security.logout_url_generator']) ? $this->services['security.logout_url_generator'] : $this->getSecurity_LogoutUrlGeneratorService()) && false ?: '_'}));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\SecurityExtension(${($_ = isset($this->services['security.authorization_checker']) ? $this->services['security.authorization_checker'] : $this->get('security.authorization_checker', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\ProfilerExtension(${($_ = isset($this->services['twig.profile']) ? $this->services['twig.profile'] : $this->get('twig.profile')) && false ?: '_'}, $a));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\TranslationExtension(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'}));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\AssetExtension(${($_ = isset($this->services['assets.packages']) ? $this->services['assets.packages'] : $this->get('assets.packages')) && false ?: '_'}));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\CodeExtension($b, ($this->targetDirs[3].'\\app'), 'UTF-8'));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\RoutingExtension($c));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\YamlExtension());
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\StopwatchExtension($a, true));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\ExpressionExtension());
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\HttpKernelExtension());
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\HttpFoundationExtension($d, ${($_ = isset($this->services['router.request_context']) ? $this->services['router.request_context'] : $this->getRouter_RequestContextService()) && false ?: '_'}));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\FormExtension(array(0 => $this, 1 => 'twig.form.renderer')));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\WebLinkExtension($d));
        $instance->addExtension(new \Doctrine\Bundle\DoctrineBundle\Twig\DoctrineExtension());
        $instance->addExtension(new \Knp\Menu\Twig\MenuExtension(new \Knp\Menu\Twig\Helper(${($_ = isset($this->services['knp_menu.renderer_provider']) ? $this->services['knp_menu.renderer_provider'] : $this->get('knp_menu.renderer_provider')) && false ?: '_'}, ${($_ = isset($this->services['knp_menu.menu_provider']) ? $this->services['knp_menu.menu_provider'] : $this->get('knp_menu.menu_provider')) && false ?: '_'}, $f, $e), $e, $f));
        $instance->addExtension(new \Knp\Bundle\MarkdownBundle\Twig\Extension\MarkdownTwigExtension(${($_ = isset($this->services['markdown.parser.parser_manager']) ? $this->services['markdown.parser.parser_manager'] : $this->getMarkdown_Parser_ParserManagerService()) && false ?: '_'}));
        $instance->addExtension(${($_ = isset($this->services['knp_paginator.twig.extension.pagination']) ? $this->services['knp_paginator.twig.extension.pagination'] : $this->get('knp_paginator.twig.extension.pagination')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.media.twig.extension']) ? $this->services['sonata.media.twig.extension'] : $this->get('sonata.media.twig.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['ivory_ck_editor.twig_extension']) ? $this->services['ivory_ck_editor.twig_extension'] : $this->get('ivory_ck_editor.twig_extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.admin.twig.extension']) ? $this->services['sonata.admin.twig.extension'] : $this->get('sonata.admin.twig.extension')) && false ?: '_'});
        $instance->addExtension(new \Sonata\AdminBundle\Twig\Extension\TemplateRegistryExtension(${($_ = isset($this->services['sonata.admin.global_template_registry']) ? $this->services['sonata.admin.global_template_registry'] : $this->get('sonata.admin.global_template_registry')) && false ?: '_'}, $this));
        $instance->addExtension(${($_ = isset($this->services['hateoas.twig.link']) ? $this->services['hateoas.twig.link'] : $this->get('hateoas.twig.link')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['nelmio_api_doc.twig.extension.extra_markdown']) ? $this->services['nelmio_api_doc.twig.extension.extra_markdown'] : $this->get('nelmio_api_doc.twig.extension.extra_markdown')) && false ?: '_'});
        $instance->addExtension(new \JMS\Serializer\Twig\SerializerRuntimeExtension());
        $instance->addExtension(${($_ = isset($this->services['sonata.core.flashmessage.twig.extension']) ? $this->services['sonata.core.flashmessage.twig.extension'] : $this->get('sonata.core.flashmessage.twig.extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.core.twig.extension.wrapping']) ? $this->services['sonata.core.twig.extension.wrapping'] : $this->get('sonata.core.twig.extension.wrapping')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.core.twig.extension.text']) ? $this->services['sonata.core.twig.extension.text'] : $this->get('sonata.core.twig.extension.text')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.core.twig.status_extension']) ? $this->services['sonata.core.twig.status_extension'] : $this->get('sonata.core.twig.status_extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.core.twig.deprecated_template_extension']) ? $this->services['sonata.core.twig.deprecated_template_extension'] : $this->get('sonata.core.twig.deprecated_template_extension')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.core.twig.template_extension']) ? $this->services['sonata.core.twig.template_extension'] : $this->get('sonata.core.twig.template_extension')) && false ?: '_'});
        $instance->addExtension(new \Sonata\IntlBundle\Twig\Extension\LocaleExtension(${($_ = isset($this->services['sonata.intl.templating.helper.locale']) ? $this->services['sonata.intl.templating.helper.locale'] : $this->get('sonata.intl.templating.helper.locale')) && false ?: '_'}));
        $instance->addExtension(new \Sonata\IntlBundle\Twig\Extension\NumberExtension(${($_ = isset($this->services['sonata.intl.templating.helper.number']) ? $this->services['sonata.intl.templating.helper.number'] : $this->get('sonata.intl.templating.helper.number')) && false ?: '_'}));
        $instance->addExtension(new \Sonata\IntlBundle\Twig\Extension\DateTimeExtension(${($_ = isset($this->services['sonata.intl.templating.helper.datetime']) ? $this->services['sonata.intl.templating.helper.datetime'] : $this->get('sonata.intl.templating.helper.datetime')) && false ?: '_'}));
        $instance->addExtension(new \Sonata\FormatterBundle\Twig\Extension\TextFormatterExtension(${($_ = isset($this->services['sonata.formatter.pool']) ? $this->services['sonata.formatter.pool'] : $this->get('sonata.formatter.pool')) && false ?: '_'}));
        $instance->addExtension(new \Sonata\BlockBundle\Twig\Extension\BlockExtension(${($_ = isset($this->services['sonata.block.templating.helper']) ? $this->services['sonata.block.templating.helper'] : $this->get('sonata.block.templating.helper')) && false ?: '_'}));
        $instance->addExtension(${($_ = isset($this->services['mopa_bootstrap.twig.extension.bootstrap_form']) ? $this->services['mopa_bootstrap.twig.extension.bootstrap_form'] : $this->get('mopa_bootstrap.twig.extension.bootstrap_form')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['mopa_bootstrap.twig.extension.bootstrap_icon']) ? $this->services['mopa_bootstrap.twig.extension.bootstrap_icon'] : $this->get('mopa_bootstrap.twig.extension.bootstrap_icon')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['mopa_bootstrap.twig.extension.bootstrap_flash']) ? $this->services['mopa_bootstrap.twig.extension.bootstrap_flash'] : $this->get('mopa_bootstrap.twig.extension.bootstrap_flash')) && false ?: '_'});
        $instance->addExtension(new \Liip\ImagineBundle\Templating\ImagineExtension(${($_ = isset($this->services['liip_imagine.cache.manager']) ? $this->services['liip_imagine.cache.manager'] : $this->get('liip_imagine.cache.manager')) && false ?: '_'}));
        $instance->addExtension(new \WhiteOctober\PagerfantaBundle\Twig\PagerfantaExtension('default', ${($_ = isset($this->services['white_october_pagerfanta.view_factory']) ? $this->services['white_october_pagerfanta.view_factory'] : $this->get('white_october_pagerfanta.view_factory')) && false ?: '_'}, $c, $d));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\DumpExtension(${($_ = isset($this->services['var_dumper.cloner']) ? $this->services['var_dumper.cloner'] : $this->get('var_dumper.cloner')) && false ?: '_'}, $g));
        $instance->addExtension(new \Symfony\Bundle\WebProfilerBundle\Twig\WebProfilerExtension($h));
        $instance->addGlobal('app', $i);
        $instance->addRuntimeLoader(new \Twig\RuntimeLoader\ContainerRuntimeLoader(new \Symfony\Component\DependencyInjection\ServiceLocator(array('JMS\\Serializer\\Twig\\SerializerRuntimeHelper' => function () {
            return ${($_ = isset($this->services['jms_serializer.twig_extension.serializer_runtime_helper']) ? $this->services['jms_serializer.twig_extension.serializer_runtime_helper'] : $this->get('jms_serializer.twig_extension.serializer_runtime_helper')) && false ?: '_'};
        }, 'Symfony\\Bridge\\Twig\\Extension\\HttpKernelRuntime' => function () {
            return ${($_ = isset($this->services['twig.runtime.httpkernel']) ? $this->services['twig.runtime.httpkernel'] : $this->get('twig.runtime.httpkernel')) && false ?: '_'};
        }, 'Symfony\\Bridge\\Twig\\Form\\TwigRenderer' => function () {
            return ${($_ = isset($this->services['twig.form.renderer']) ? $this->services['twig.form.renderer'] : $this->get('twig.form.renderer')) && false ?: '_'};
        }))));
        $instance->addGlobal('sonata_admin_short_title', 'SIUNIC');
        $instance->addGlobal('sonata_admin_skin', 'skin-purple');
        $instance->addGlobal('app_kernel_root_dir', ($this->targetDirs[3].'\\app'));
        $instance->addGlobal('app_kernel_web_dir', ($this->targetDirs[3].'\\app/../web'));
        $instance->addGlobal('webapp_logo', 'logo_etecsa.jpg');
        $instance->addGlobal('webapp_short_title', 'SIUNIC');
        $instance->addGlobal('webapp_title', 'Sistema Unificado de Cliente Único');
        $instance->addGlobal('sonata_user', ${($_ = isset($this->services['sonata.user.twig.global']) ? $this->services['sonata.user.twig.global'] : $this->get('sonata.user.twig.global')) && false ?: '_'});
        $instance->addGlobal('sonata_media', ${($_ = isset($this->services['sonata.media.twig.global']) ? $this->services['sonata.media.twig.global'] : $this->get('sonata.media.twig.global')) && false ?: '_'});
        $instance->addGlobal('sonata_admin', ${($_ = isset($this->services['sonata.admin.twig.global']) ? $this->services['sonata.admin.twig.global'] : $this->get('sonata.admin.twig.global')) && false ?: '_'});
        $instance->addGlobal('sonata_block', ${($_ = isset($this->services['sonata.block.twig.global']) ? $this->services['sonata.block.twig.global'] : $this->get('sonata.block.twig.global')) && false ?: '_'});
        (new \Symfony\Bundle\TwigBundle\DependencyInjection\Configurator\EnvironmentConfigurator('F j, Y H:i', '%d days', NULL, 0, '.', ','))->configure($instance);

        return $instance;
    }

    /**
     * Gets the public 'twig.audit.extension' shared service.
     *
     * @return \AppBundle\Twig\Extension\AuditExtension
     */
    protected function getTwig_Audit_ExtensionService()
    {
        return $this->services['twig.audit.extension'] = new \AppBundle\Twig\Extension\AuditExtension();
    }

    /**
     * Gets the public 'twig.controller.exception' shared service.
     *
     * @return \Symfony\Bundle\TwigBundle\Controller\ExceptionController
     */
    protected function getTwig_Controller_ExceptionService()
    {
        return $this->services['twig.controller.exception'] = new \Symfony\Bundle\TwigBundle\Controller\ExceptionController(${($_ = isset($this->services['twig']) ? $this->services['twig'] : $this->get('twig')) && false ?: '_'}, true);
    }

    /**
     * Gets the public 'twig.controller.preview_error' shared service.
     *
     * @return \Symfony\Bundle\TwigBundle\Controller\PreviewErrorController
     */
    protected function getTwig_Controller_PreviewErrorService()
    {
        return $this->services['twig.controller.preview_error'] = new \Symfony\Bundle\TwigBundle\Controller\PreviewErrorController(${($_ = isset($this->services['http_kernel']) ? $this->services['http_kernel'] : $this->get('http_kernel')) && false ?: '_'}, 'FOS\\RestBundle\\Controller\\ExceptionController::showAction');
    }

    /**
     * Gets the public 'twig.exception_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ExceptionListener
     */
    protected function getTwig_ExceptionListenerService()
    {
        return $this->services['twig.exception_listener'] = new \Symfony\Component\HttpKernel\EventListener\ExceptionListener('FOS\\RestBundle\\Controller\\ExceptionController::showAction', ${($_ = isset($this->services['monolog.logger.request']) ? $this->services['monolog.logger.request'] : $this->get('monolog.logger.request', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, true);
    }

    /**
     * Gets the public 'twig.form.renderer' shared service.
     *
     * @return \Symfony\Bridge\Twig\Form\TwigRenderer
     */
    protected function getTwig_Form_RendererService()
    {
        return $this->services['twig.form.renderer'] = new \Symfony\Bridge\Twig\Form\TwigRenderer(new \Symfony\Bridge\Twig\Form\TwigRendererEngine(array(0 => '@IvoryCKEditor/Form/ckeditor_widget.html.twig', 1 => 'GregwarCaptchaBundle::captcha.html.twig', 2 => 'form_div_layout.html.twig', 3 => '@MopaBootstrap/Form/fields.html.twig', 4 => 'SonataMediaBundle:Form:media_widgets.html.twig', 5 => '@SonataCore/Form/datepicker.html.twig', 6 => 'SonataUserBundle:Form:form_admin_fields.html.twig', 7 => 'LiipImagineBundle:Form:form_div_layout.html.twig'), ${($_ = isset($this->services['twig']) ? $this->services['twig'] : $this->get('twig')) && false ?: '_'}), ${($_ = isset($this->services['security.csrf.token_manager']) ? $this->services['security.csrf.token_manager'] : $this->get('security.csrf.token_manager', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the public 'twig.loader' shared service.
     *
     * @return \Symfony\Bundle\TwigBundle\Loader\FilesystemLoader
     */
    protected function getTwig_LoaderService()
    {
        $this->services['twig.loader'] = $instance = new \Symfony\Bundle\TwigBundle\Loader\FilesystemLoader(${($_ = isset($this->services['templating.locator']) ? $this->services['templating.locator'] : $this->getTemplating_LocatorService()) && false ?: '_'}, ${($_ = isset($this->services['templating.name_parser']) ? $this->services['templating.name_parser'] : $this->get('templating.name_parser')) && false ?: '_'}, $this->targetDirs[3]);

        $instance->addPath(($this->targetDirs[3].'\\vendor\\knplabs\\knp-menu\\src\\Knp\\Menu/Resources/views'));
        $instance->addPath(($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Bundle\\FrameworkBundle/Resources/views'), 'Framework');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Bundle\\SecurityBundle/Resources/views'), 'Security');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Bundle\\TwigBundle/Resources/views'), 'Twig');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\symfony\\swiftmailer-bundle/Resources/views'), 'Swiftmailer');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\doctrine\\doctrine-bundle/Resources/views'), 'Doctrine');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\knplabs\\knp-menu-bundle\\src/Resources/views'), 'KnpMenu');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\knplabs\\knp-paginator-bundle/Resources/views'), 'KnpPaginator');
        $instance->addPath(($this->targetDirs[3].'\\app/Resources/FOSUserBundle/views'), 'FOSUser');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/views'), 'FOSUser');
        $instance->addPath(($this->targetDirs[3].'\\app/Resources/SonataUserBundle/views'), 'SonataUser');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\sonata-project\\user-bundle/Resources/views'), 'SonataUser');
        $instance->addPath(($this->targetDirs[3].'\\app/Resources/SonataMediaBundle/views'), 'SonataMedia');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\sonata-project\\media-bundle\\src/Resources/views'), 'SonataMedia');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\egeloen\\ckeditor-bundle/Resources/views'), 'IvoryCKEditor');
        $instance->addPath(($this->targetDirs[3].'\\app/Resources/SonataAdminBundle/views'), 'SonataAdmin');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\sonata-project\\admin-bundle\\src/Resources/views'), 'SonataAdmin');
        $instance->addPath(($this->targetDirs[3].'\\app/Resources/SonataDoctrineORMAdminBundle/views'), 'SonataDoctrineORMAdmin');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\sonata-project\\doctrine-orm-admin-bundle\\src/Resources/views'), 'SonataDoctrineORMAdmin');
        $instance->addPath(($this->targetDirs[3].'\\app/Resources/NelmioApiDocBundle/views'), 'NelmioApiDoc');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\nelmio\\api-doc-bundle\\Nelmio\\ApiDocBundle/Resources/views'), 'NelmioApiDoc');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src/Resources/views'), 'SonataCore');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\sonata-project\\intl-bundle\\src/Resources/views'), 'SonataIntl');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\sonata-project\\formatter-bundle\\src/Resources/views'), 'SonataFormatter');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\sonata-project\\block-bundle\\src/Resources/views'), 'SonataBlock');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\sonata-project\\classification-bundle\\src/Resources/views'), 'SonataClassification');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\sonata-project\\datagrid-bundle\\src/Resources/views'), 'SonataDatagrid');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\mopa\\bootstrap-bundle\\Mopa\\Bundle\\BootstrapBundle/Resources/views'), 'MopaBootstrap');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\lexik\\form-filter-bundle/Resources/views'), 'LexikFormFilter');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\liip\\imagine-bundle/Resources/views'), 'LiipImagine');
        $instance->addPath(($this->targetDirs[3].'\\app/Resources/GregwarCaptchaBundle/views'), 'GregwarCaptcha');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\gregwar\\captcha-bundle/Resources/views'), 'GregwarCaptcha');
        $instance->addPath(($this->targetDirs[3].'\\app/Resources/AppBundle/views'), 'App');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Bundle\\DebugBundle/Resources/views'), 'Debug');
        $instance->addPath(($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Bundle\\WebProfilerBundle/Resources/views'), 'WebProfiler');
        $instance->addPath(($this->targetDirs[3].'\\app/Resources/views'));
        $instance->addPath(($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Bridge\\Twig/Resources/views/Form'));

        return $instance;
    }

    /**
     * Gets the public 'twig.profile' shared service.
     *
     * @return \Twig\Profiler\Profile
     */
    protected function getTwig_ProfileService()
    {
        return $this->services['twig.profile'] = new \Twig\Profiler\Profile();
    }

    /**
     * Gets the public 'twig.runtime.httpkernel' shared service.
     *
     * @return \Symfony\Bridge\Twig\Extension\HttpKernelRuntime
     */
    protected function getTwig_Runtime_HttpkernelService()
    {
        return $this->services['twig.runtime.httpkernel'] = new \Symfony\Bridge\Twig\Extension\HttpKernelRuntime(${($_ = isset($this->services['fragment.handler']) ? $this->services['fragment.handler'] : $this->get('fragment.handler')) && false ?: '_'});
    }

    /**
     * Gets the public 'twig.translation.extractor' shared service.
     *
     * @return \Symfony\Bridge\Twig\Translation\TwigExtractor
     */
    protected function getTwig_Translation_ExtractorService()
    {
        return $this->services['twig.translation.extractor'] = new \Symfony\Bridge\Twig\Translation\TwigExtractor(${($_ = isset($this->services['twig']) ? $this->services['twig'] : $this->get('twig')) && false ?: '_'});
    }

    /**
     * Gets the public 'uri_signer' shared service.
     *
     * @return \Symfony\Component\HttpKernel\UriSigner
     */
    protected function getUriSignerService()
    {
        return $this->services['uri_signer'] = new \Symfony\Component\HttpKernel\UriSigner('692cd6b4574faf02145126fe2f31c3fdbf88a5fc');
    }

    /**
     * Gets the public 'validate_request_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ValidateRequestListener
     */
    protected function getValidateRequestListenerService()
    {
        return $this->services['validate_request_listener'] = new \Symfony\Component\HttpKernel\EventListener\ValidateRequestListener();
    }

    /**
     * Gets the public 'validator' shared service.
     *
     * @return \Symfony\Component\Validator\Validator\ValidatorInterface
     */
    protected function getValidatorService()
    {
        return $this->services['validator'] = ${($_ = isset($this->services['validator.builder']) ? $this->services['validator.builder'] : $this->get('validator.builder')) && false ?: '_'}->getValidator();
    }

    /**
     * Gets the public 'validator.builder' shared service.
     *
     * @return \Symfony\Component\Validator\ValidatorBuilderInterface
     */
    protected function getValidator_BuilderService()
    {
        $this->services['validator.builder'] = $instance = \Symfony\Component\Validator\Validation::createValidatorBuilder();

        $instance->setConstraintValidatorFactory(${($_ = isset($this->services['validator.validator_factory']) ? $this->services['validator.validator_factory'] : $this->getValidator_ValidatorFactoryService()) && false ?: '_'});
        $instance->setTranslator(${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'});
        $instance->setTranslationDomain('validators');
        $instance->addXmlMappings(array(0 => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Component\\Form/Resources/config/validation.xml'), 1 => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle/Resources/config/validation.xml'), 2 => ($this->targetDirs[3].'\\vendor\\sonata-project\\media-bundle\\src/Resources/config/validation.xml'), 3 => ($this->targetDirs[3].'\\vendor\\sonata-project\\classification-bundle\\src/Resources/config/validation.xml')));
        $instance->enableAnnotationMapping(${($_ = isset($this->services['annotation_reader']) ? $this->services['annotation_reader'] : $this->get('annotation_reader')) && false ?: '_'});
        $instance->addMethodMapping('loadValidatorMetadata');
        $instance->addObjectInitializers(array(0 => ${($_ = isset($this->services['doctrine.orm.validator_initializer']) ? $this->services['doctrine.orm.validator_initializer'] : $this->get('doctrine.orm.validator_initializer')) && false ?: '_'}, 1 => new \FOS\UserBundle\Validator\Initializer(${($_ = isset($this->services['fos_user.util.canonical_fields_updater']) ? $this->services['fos_user.util.canonical_fields_updater'] : $this->getFosUser_Util_CanonicalFieldsUpdaterService()) && false ?: '_'})));
        $instance->addXmlMapping(($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle\\DependencyInjection\\Compiler/../../Resources/config/storage-validation/orm.xml'));

        return $instance;
    }

    /**
     * Gets the public 'validator.email' shared service.
     *
     * @return \Symfony\Component\Validator\Constraints\EmailValidator
     */
    protected function getValidator_EmailService()
    {
        return $this->services['validator.email'] = new \Symfony\Component\Validator\Constraints\EmailValidator(false);
    }

    /**
     * Gets the public 'validator.expression' shared service.
     *
     * @return \Symfony\Component\Validator\Constraints\ExpressionValidator
     */
    protected function getValidator_ExpressionService()
    {
        return $this->services['validator.expression'] = new \Symfony\Component\Validator\Constraints\ExpressionValidator();
    }

    /**
     * Gets the public 'var_dumper.cli_dumper' shared service.
     *
     * @return \Symfony\Component\VarDumper\Dumper\CliDumper
     */
    protected function getVarDumper_CliDumperService()
    {
        return $this->services['var_dumper.cli_dumper'] = new \Symfony\Component\VarDumper\Dumper\CliDumper(NULL, 'UTF-8', 0);
    }

    /**
     * Gets the public 'var_dumper.cloner' shared service.
     *
     * @return \Symfony\Component\VarDumper\Cloner\VarCloner
     */
    protected function getVarDumper_ClonerService()
    {
        $this->services['var_dumper.cloner'] = $instance = new \Symfony\Component\VarDumper\Cloner\VarCloner();

        $instance->setMaxItems(2500);
        $instance->setMaxString(-1);

        return $instance;
    }

    /**
     * Gets the public 'web_profiler.controller.exception' shared service.
     *
     * @return \Symfony\Bundle\WebProfilerBundle\Controller\ExceptionController
     */
    protected function getWebProfiler_Controller_ExceptionService()
    {
        return $this->services['web_profiler.controller.exception'] = new \Symfony\Bundle\WebProfilerBundle\Controller\ExceptionController(${($_ = isset($this->services['profiler']) ? $this->services['profiler'] : $this->get('profiler', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, ${($_ = isset($this->services['twig']) ? $this->services['twig'] : $this->get('twig')) && false ?: '_'}, true);
    }

    /**
     * Gets the public 'web_profiler.controller.profiler' shared service.
     *
     * @return \Symfony\Bundle\WebProfilerBundle\Controller\ProfilerController
     */
    protected function getWebProfiler_Controller_ProfilerService()
    {
        return $this->services['web_profiler.controller.profiler'] = new \Symfony\Bundle\WebProfilerBundle\Controller\ProfilerController(${($_ = isset($this->services['router']) ? $this->services['router'] : $this->get('router', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, ${($_ = isset($this->services['profiler']) ? $this->services['profiler'] : $this->get('profiler', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, ${($_ = isset($this->services['twig']) ? $this->services['twig'] : $this->get('twig')) && false ?: '_'}, array('data_collector.request' => array(0 => 'request', 1 => '@WebProfiler/Collector/request.html.twig'), 'data_collector.time' => array(0 => 'time', 1 => '@WebProfiler/Collector/time.html.twig'), 'data_collector.memory' => array(0 => 'memory', 1 => '@WebProfiler/Collector/memory.html.twig'), 'data_collector.ajax' => array(0 => 'ajax', 1 => '@WebProfiler/Collector/ajax.html.twig'), 'data_collector.form' => array(0 => 'form', 1 => '@WebProfiler/Collector/form.html.twig'), 'data_collector.exception' => array(0 => 'exception', 1 => '@WebProfiler/Collector/exception.html.twig'), 'data_collector.logger' => array(0 => 'logger', 1 => '@WebProfiler/Collector/logger.html.twig'), 'data_collector.events' => array(0 => 'events', 1 => '@WebProfiler/Collector/events.html.twig'), 'data_collector.router' => array(0 => 'router', 1 => '@WebProfiler/Collector/router.html.twig'), 'data_collector.cache' => array(0 => 'cache', 1 => '@WebProfiler/Collector/cache.html.twig'), 'data_collector.translation' => array(0 => 'translation', 1 => '@WebProfiler/Collector/translation.html.twig'), 'data_collector.security' => array(0 => 'security', 1 => '@Security/Collector/security.html.twig'), 'data_collector.twig' => array(0 => 'twig', 1 => '@WebProfiler/Collector/twig.html.twig'), 'data_collector.doctrine' => array(0 => 'db', 1 => '@Doctrine/Collector/db.html.twig'), 'swiftmailer.data_collector' => array(0 => 'swiftmailer', 1 => '@Swiftmailer/Collector/swiftmailer.html.twig'), 'data_collector.dump' => array(0 => 'dump', 1 => '@Debug/Profiler/dump.html.twig'), 'sonata.block.data_collector' => array(0 => 'block', 1 => '@SonataBlock/Profiler/block.html.twig'), 'data_collector.config' => array(0 => 'config', 1 => '@WebProfiler/Collector/config.html.twig')), 'bottom', ${($_ = isset($this->services['web_profiler.csp.handler']) ? $this->services['web_profiler.csp.handler'] : $this->getWebProfiler_Csp_HandlerService()) && false ?: '_'}, $this->targetDirs[3]);
    }

    /**
     * Gets the public 'web_profiler.controller.router' shared service.
     *
     * @return \Symfony\Bundle\WebProfilerBundle\Controller\RouterController
     */
    protected function getWebProfiler_Controller_RouterService()
    {
        return $this->services['web_profiler.controller.router'] = new \Symfony\Bundle\WebProfilerBundle\Controller\RouterController(${($_ = isset($this->services['profiler']) ? $this->services['profiler'] : $this->get('profiler', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, ${($_ = isset($this->services['twig']) ? $this->services['twig'] : $this->get('twig')) && false ?: '_'}, ${($_ = isset($this->services['router']) ? $this->services['router'] : $this->get('router', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the public 'web_profiler.debug_toolbar' shared service.
     *
     * @return \Symfony\Bundle\WebProfilerBundle\EventListener\WebDebugToolbarListener
     */
    protected function getWebProfiler_DebugToolbarService()
    {
        return $this->services['web_profiler.debug_toolbar'] = new \Symfony\Bundle\WebProfilerBundle\EventListener\WebDebugToolbarListener(${($_ = isset($this->services['twig']) ? $this->services['twig'] : $this->get('twig')) && false ?: '_'}, false, 2, 'bottom', ${($_ = isset($this->services['router']) ? $this->services['router'] : $this->get('router', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, '^/(app(_[\\w]+)?\\.php/)?_wdt', ${($_ = isset($this->services['web_profiler.csp.handler']) ? $this->services['web_profiler.csp.handler'] : $this->getWebProfiler_Csp_HandlerService()) && false ?: '_'});
    }

    /**
     * Gets the public 'white_october_pagerfanta.view_factory' shared service.
     *
     * @return \Pagerfanta\View\ViewFactory
     */
    protected function getWhiteOctoberPagerfanta_ViewFactoryService()
    {
        $a = ${($_ = isset($this->services['translator']) ? $this->services['translator'] : $this->get('translator')) && false ?: '_'};

        $b = new \Pagerfanta\View\DefaultView();

        $c = new \Pagerfanta\View\TwitterBootstrapView();

        $d = new \Pagerfanta\View\TwitterBootstrap3View();

        $e = new \Pagerfanta\View\TwitterBootstrap4View();

        $f = new \Pagerfanta\View\SemanticUiView();

        $this->services['white_october_pagerfanta.view_factory'] = $instance = new \Pagerfanta\View\ViewFactory();

        $instance->add(array('default' => $b, 'default_translated' => new \WhiteOctober\PagerfantaBundle\View\DefaultTranslatedView($b, $a), 'twitter_bootstrap' => $c, 'twitter_bootstrap3' => $d, 'twitter_bootstrap4' => $e, 'semantic_ui' => $f, 'twitter_bootstrap4_translated' => new \WhiteOctober\PagerfantaBundle\View\TwitterBootstrap4TranslatedView($e, $a), 'twitter_bootstrap3_translated' => new \WhiteOctober\PagerfantaBundle\View\TwitterBootstrap3TranslatedView($d, $a), 'twitter_bootstrap_translated' => new \WhiteOctober\PagerfantaBundle\View\TwitterBootstrapTranslatedView($c, $a), 'semantic_ui_translated' => new \WhiteOctober\PagerfantaBundle\View\SemanticUiTranslatedView($f, $a)));

        return $instance;
    }

    /**
     * Gets the private '1_c96ae0422b1c97f376c0bdbe6aae9aae67afb2b1a5eb7f331b0f8109dcf05b7f' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\Config\ContainerParametersResourceChecker
     */
    protected function get1C96ae0422b1c97f376c0bdbe6aae9aae67afb2b1a5eb7f331b0f8109dcf05b7fService()
    {
        return $this->services['1_c96ae0422b1c97f376c0bdbe6aae9aae67afb2b1a5eb7f331b0f8109dcf05b7f'] = new \Symfony\Component\DependencyInjection\Config\ContainerParametersResourceChecker($this);
    }

    /**
     * Gets the private '2_c96ae0422b1c97f376c0bdbe6aae9aae67afb2b1a5eb7f331b0f8109dcf05b7f' shared service.
     *
     * @return \Symfony\Component\Config\Resource\SelfCheckingResourceChecker
     */
    protected function get2C96ae0422b1c97f376c0bdbe6aae9aae67afb2b1a5eb7f331b0f8109dcf05b7fService()
    {
        return $this->services['2_c96ae0422b1c97f376c0bdbe6aae9aae67afb2b1a5eb7f331b0f8109dcf05b7f'] = new \Symfony\Component\Config\Resource\SelfCheckingResourceChecker();
    }

    /**
     * Gets the private 'annotations.cache' shared service.
     *
     * @return \Symfony\Component\Cache\DoctrineProvider
     */
    protected function getAnnotations_CacheService()
    {
        return $this->services['annotations.cache'] = new \Symfony\Component\Cache\DoctrineProvider(\Symfony\Component\Cache\Adapter\PhpArrayAdapter::create((__DIR__.'/annotations.php'), ${($_ = isset($this->services['cache.annotations']) ? $this->services['cache.annotations'] : $this->getCache_AnnotationsService()) && false ?: '_'}));
    }

    /**
     * Gets the private 'annotations.reader' shared service.
     *
     * @return \Doctrine\Common\Annotations\AnnotationReader
     */
    protected function getAnnotations_ReaderService()
    {
        $a = new \Doctrine\Common\Annotations\AnnotationRegistry();
        $a->registerUniqueLoader('class_exists');

        $this->services['annotations.reader'] = $instance = new \Doctrine\Common\Annotations\AnnotationReader();

        $instance->addGlobalIgnoredName('required', $a);

        return $instance;
    }

    /**
     * Gets the private 'argument_resolver.default' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ArgumentResolver\DefaultValueResolver
     */
    protected function getArgumentResolver_DefaultService()
    {
        return $this->services['argument_resolver.default'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\DefaultValueResolver();
    }

    /**
     * Gets the private 'argument_resolver.request' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestValueResolver
     */
    protected function getArgumentResolver_RequestService()
    {
        return $this->services['argument_resolver.request'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestValueResolver();
    }

    /**
     * Gets the private 'argument_resolver.request_attribute' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestAttributeValueResolver
     */
    protected function getArgumentResolver_RequestAttributeService()
    {
        return $this->services['argument_resolver.request_attribute'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestAttributeValueResolver();
    }

    /**
     * Gets the private 'argument_resolver.service' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ArgumentResolver\ServiceValueResolver
     */
    protected function getArgumentResolver_ServiceService()
    {
        return $this->services['argument_resolver.service'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\ServiceValueResolver(new \Symfony\Component\DependencyInjection\ServiceLocator(array('AppBundle\\Controller\\Api\\SecurityApiController:setViewHandler' => function () {
            return ${($_ = isset($this->services['service_locator.182f5c5b079727c046caf1a16a7b23a8']) ? $this->services['service_locator.182f5c5b079727c046caf1a16a7b23a8'] : $this->getServiceLocator_182f5c5b079727c046caf1a16a7b23a8Service()) && false ?: '_'};
        }, 'AppBundle\\Controller\\Api\\SecurityApiController::setViewHandler' => function () {
            return ${($_ = isset($this->services['service_locator.182f5c5b079727c046caf1a16a7b23a8']) ? $this->services['service_locator.182f5c5b079727c046caf1a16a7b23a8'] : $this->getServiceLocator_182f5c5b079727c046caf1a16a7b23a8Service()) && false ?: '_'};
        })));
    }

    /**
     * Gets the private 'argument_resolver.session' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ArgumentResolver\SessionValueResolver
     */
    protected function getArgumentResolver_SessionService()
    {
        return $this->services['argument_resolver.session'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\SessionValueResolver();
    }

    /**
     * Gets the private 'argument_resolver.variadic' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ArgumentResolver\VariadicValueResolver
     */
    protected function getArgumentResolver_VariadicService()
    {
        return $this->services['argument_resolver.variadic'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\VariadicValueResolver();
    }

    /**
     * Gets the private 'cache.annotations' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\TraceableAdapter
     */
    protected function getCache_AnnotationsService()
    {
        return $this->services['cache.annotations'] = new \Symfony\Component\Cache\Adapter\TraceableAdapter(${($_ = isset($this->services['cache.annotations.recorder_inner']) ? $this->services['cache.annotations.recorder_inner'] : $this->getCache_Annotations_RecorderInnerService()) && false ?: '_'});
    }

    /**
     * Gets the private 'cache.annotations.recorder_inner' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected function getCache_Annotations_RecorderInnerService($lazyLoad = true)
    {
        return $this->services['cache.annotations.recorder_inner'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('Jp55HRqNCG', 0, 'YkkUqWmXPJq7yPM+oP3Y3s', (__DIR__.'/pools'), ${($_ = isset($this->services['monolog.logger.cache']) ? $this->services['monolog.logger.cache'] : $this->get('monolog.logger.cache', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the private 'cache.app.recorder_inner' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\FilesystemAdapter
     */
    public function getCache_App_RecorderInnerService($lazyLoad = true)
    {
        if ($lazyLoad) {

            return $this->services['cache.app.recorder_inner'] = SymfonyComponentCacheAdapterFilesystemAdapter_000000006d9c1138000000004dc181e407c393e08643067c07eb5044e3591135::staticProxyConstructor(
                function (&$wrappedInstance, \ProxyManager\Proxy\LazyLoadingInterface $proxy) {
                    $wrappedInstance = $this->getCache_App_RecorderInnerService(false);

                    $proxy->setProxyInitializer(null);

                    return true;
                }
            );
        }

        $instance = new \Symfony\Component\Cache\Adapter\FilesystemAdapter('alB2hdG7Ew', 0, (__DIR__.'/pools'));

        if ($this->has('monolog.logger.cache')) {
            $instance->setLogger(${($_ = isset($this->services['monolog.logger.cache']) ? $this->services['monolog.logger.cache'] : $this->get('monolog.logger.cache', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
        }

        return $instance;
    }

    /**
     * Gets the private 'cache.serializer.recorder_inner' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected function getCache_Serializer_RecorderInnerService($lazyLoad = true)
    {
        return $this->services['cache.serializer.recorder_inner'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('bl9TOCf5H2', 0, 'YkkUqWmXPJq7yPM+oP3Y3s', (__DIR__.'/pools'), ${($_ = isset($this->services['monolog.logger.cache']) ? $this->services['monolog.logger.cache'] : $this->get('monolog.logger.cache', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the private 'cache.system.recorder_inner' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected function getCache_System_RecorderInnerService($lazyLoad = true)
    {
        return $this->services['cache.system.recorder_inner'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('UQHQOm4FRg', 0, 'YkkUqWmXPJq7yPM+oP3Y3s', (__DIR__.'/pools'), ${($_ = isset($this->services['monolog.logger.cache']) ? $this->services['monolog.logger.cache'] : $this->get('monolog.logger.cache', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the private 'cache.validator' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\TraceableAdapter
     */
    protected function getCache_ValidatorService()
    {
        return $this->services['cache.validator'] = new \Symfony\Component\Cache\Adapter\TraceableAdapter(${($_ = isset($this->services['cache.validator.recorder_inner']) ? $this->services['cache.validator.recorder_inner'] : $this->getCache_Validator_RecorderInnerService()) && false ?: '_'});
    }

    /**
     * Gets the private 'cache.validator.recorder_inner' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected function getCache_Validator_RecorderInnerService($lazyLoad = true)
    {
        return $this->services['cache.validator.recorder_inner'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('gYNnUNxsPB', 0, 'YkkUqWmXPJq7yPM+oP3Y3s', (__DIR__.'/pools'), ${($_ = isset($this->services['monolog.logger.cache']) ? $this->services['monolog.logger.cache'] : $this->get('monolog.logger.cache', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the private 'console.error_listener' shared service.
     *
     * @return \Symfony\Component\Console\EventListener\ErrorListener
     */
    protected function getConsole_ErrorListenerService()
    {
        return $this->services['console.error_listener'] = new \Symfony\Component\Console\EventListener\ErrorListener(${($_ = isset($this->services['monolog.logger.console']) ? $this->services['monolog.logger.console'] : $this->get('monolog.logger.console', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the private 'controller_name_converter' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser
     */
    protected function getControllerNameConverterService()
    {
        return $this->services['controller_name_converter'] = new \Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser(${($_ = isset($this->services['kernel']) ? $this->services['kernel'] : $this->get('kernel')) && false ?: '_'});
    }

    /**
     * Gets the private 'debug.file_link_formatter' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Debug\FileLinkFormatter
     */
    protected function getDebug_FileLinkFormatterService()
    {
        return $this->services['debug.file_link_formatter'] = new \Symfony\Component\HttpKernel\Debug\FileLinkFormatter(NULL, ${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, $this->targetDirs[3], '/_profiler/open?file=%f&line=%l#line%l');
    }

    /**
     * Gets the private 'debug.log_processor' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Processor\DebugProcessor
     */
    protected function getDebug_LogProcessorService()
    {
        return $this->services['debug.log_processor'] = new \Symfony\Bridge\Monolog\Processor\DebugProcessor();
    }

    /**
     * Gets the private 'doctrine.dbal.logger.profiling.default' shared service.
     *
     * @return \Doctrine\DBAL\Logging\DebugStack
     */
    protected function getDoctrine_Dbal_Logger_Profiling_DefaultService()
    {
        return $this->services['doctrine.dbal.logger.profiling.default'] = new \Doctrine\DBAL\Logging\DebugStack();
    }

    /**
     * Gets the private 'form.server_params' shared service.
     *
     * @return \Symfony\Component\Form\Util\ServerParams
     */
    protected function getForm_ServerParamsService()
    {
        return $this->services['form.server_params'] = new \Symfony\Component\Form\Util\ServerParams(${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack')) && false ?: '_'});
    }

    /**
     * Gets the private 'fos_rest.exception.codes_map' shared service.
     *
     * @return \FOS\RestBundle\Util\ExceptionValueMap
     */
    protected function getFosRest_Exception_CodesMapService()
    {
        return $this->services['fos_rest.exception.codes_map'] = new \FOS\RestBundle\Util\ExceptionValueMap(array());
    }

    /**
     * Gets the private 'fos_rest.request.param_fetcher.reader' shared service.
     *
     * @return \FOS\RestBundle\Request\ParamReader
     */
    protected function getFosRest_Request_ParamFetcher_ReaderService()
    {
        return $this->services['fos_rest.request.param_fetcher.reader'] = new \FOS\RestBundle\Request\ParamReader(${($_ = isset($this->services['annotation_reader']) ? $this->services['annotation_reader'] : $this->get('annotation_reader')) && false ?: '_'});
    }

    /**
     * Gets the private 'fos_rest.serializer.jms_handler_registry.inner' shared service.
     *
     * @return \JMS\Serializer\Handler\LazyHandlerRegistry
     */
    protected function getFosRest_Serializer_JmsHandlerRegistry_InnerService()
    {
        return $this->services['fos_rest.serializer.jms_handler_registry.inner'] = new \JMS\Serializer\Handler\LazyHandlerRegistry(new \Symfony\Component\DependencyInjection\ServiceLocator(array('fos_rest.serializer.exception_normalizer.jms' => function () {
            return ${($_ = isset($this->services['fos_rest.serializer.exception_normalizer.jms']) ? $this->services['fos_rest.serializer.exception_normalizer.jms'] : $this->get('fos_rest.serializer.exception_normalizer.jms')) && false ?: '_'};
        }, 'jms_serializer.array_collection_handler' => function () {
            return ${($_ = isset($this->services['jms_serializer.array_collection_handler']) ? $this->services['jms_serializer.array_collection_handler'] : $this->get('jms_serializer.array_collection_handler')) && false ?: '_'};
        }, 'jms_serializer.constraint_violation_handler' => function () {
            return ${($_ = isset($this->services['jms_serializer.constraint_violation_handler']) ? $this->services['jms_serializer.constraint_violation_handler'] : $this->get('jms_serializer.constraint_violation_handler')) && false ?: '_'};
        }, 'jms_serializer.datetime_handler' => function () {
            return ${($_ = isset($this->services['jms_serializer.datetime_handler']) ? $this->services['jms_serializer.datetime_handler'] : $this->get('jms_serializer.datetime_handler')) && false ?: '_'};
        }, 'jms_serializer.form_error_handler' => function () {
            return ${($_ = isset($this->services['jms_serializer.form_error_handler']) ? $this->services['jms_serializer.form_error_handler'] : $this->get('jms_serializer.form_error_handler')) && false ?: '_'};
        }, 'jms_serializer.php_collection_handler' => function () {
            return ${($_ = isset($this->services['jms_serializer.php_collection_handler']) ? $this->services['jms_serializer.php_collection_handler'] : $this->get('jms_serializer.php_collection_handler')) && false ?: '_'};
        }, 'sonata.classification.serializer.handler.category' => function () {
            return ${($_ = isset($this->services['sonata.classification.serializer.handler.category']) ? $this->services['sonata.classification.serializer.handler.category'] : $this->get('sonata.classification.serializer.handler.category')) && false ?: '_'};
        }, 'sonata.classification.serializer.handler.collection' => function () {
            return ${($_ = isset($this->services['sonata.classification.serializer.handler.collection']) ? $this->services['sonata.classification.serializer.handler.collection'] : $this->get('sonata.classification.serializer.handler.collection')) && false ?: '_'};
        }, 'sonata.classification.serializer.handler.context' => function () {
            return ${($_ = isset($this->services['sonata.classification.serializer.handler.context']) ? $this->services['sonata.classification.serializer.handler.context'] : $this->get('sonata.classification.serializer.handler.context')) && false ?: '_'};
        }, 'sonata.classification.serializer.handler.tag' => function () {
            return ${($_ = isset($this->services['sonata.classification.serializer.handler.tag']) ? $this->services['sonata.classification.serializer.handler.tag'] : $this->get('sonata.classification.serializer.handler.tag')) && false ?: '_'};
        }, 'sonata.media.serializer.handler.gallery' => function () {
            return ${($_ = isset($this->services['sonata.media.serializer.handler.gallery']) ? $this->services['sonata.media.serializer.handler.gallery'] : $this->get('sonata.media.serializer.handler.gallery')) && false ?: '_'};
        }, 'sonata.media.serializer.handler.media' => function () {
            return ${($_ = isset($this->services['sonata.media.serializer.handler.media']) ? $this->services['sonata.media.serializer.handler.media'] : $this->get('sonata.media.serializer.handler.media')) && false ?: '_'};
        }, 'sonata.user.serializer.handler.user' => function () {
            return ${($_ = isset($this->services['sonata.user.serializer.handler.user']) ? $this->services['sonata.user.serializer.handler.user'] : $this->get('sonata.user.serializer.handler.user')) && false ?: '_'};
        })), array(1 => array('sonata_user_user_id' => array('json' => array(0 => 'sonata.user.serializer.handler.user', 1 => 'serializeObjectToId'), 'xml' => array(0 => 'sonata.user.serializer.handler.user', 1 => 'serializeObjectToId'), 'yml' => array(0 => 'sonata.user.serializer.handler.user', 1 => 'serializeObjectToId')), 'sonata_media_media_id' => array('json' => array(0 => 'sonata.media.serializer.handler.media', 1 => 'serializeObjectToId'), 'xml' => array(0 => 'sonata.media.serializer.handler.media', 1 => 'serializeObjectToId'), 'yml' => array(0 => 'sonata.media.serializer.handler.media', 1 => 'serializeObjectToId')), 'sonata_media_gallery_id' => array('json' => array(0 => 'sonata.media.serializer.handler.gallery', 1 => 'serializeObjectToId'), 'xml' => array(0 => 'sonata.media.serializer.handler.gallery', 1 => 'serializeObjectToId'), 'yml' => array(0 => 'sonata.media.serializer.handler.gallery', 1 => 'serializeObjectToId')), 'Exception' => array('json' => array(0 => 'fos_rest.serializer.exception_normalizer.jms', 1 => 'serializeToJson'), 'xml' => array(0 => 'fos_rest.serializer.exception_normalizer.jms', 1 => 'serializeToXml')), 'DateTime' => array('json' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateTime'), 'xml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateTime'), 'yml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateTime')), 'DateTimeImmutable' => array('json' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateTimeImmutable'), 'xml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateTimeImmutable'), 'yml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateTimeImmutable')), 'DateInterval' => array('json' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateInterval'), 'xml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateInterval'), 'yml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'serializeDateInterval')), 'ArrayCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection')), 'Doctrine\\Common\\Collections\\ArrayCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection')), 'Doctrine\\ORM\\PersistentCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection')), 'Doctrine\\ODM\\MongoDB\\PersistentCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection')), 'Doctrine\\ODM\\PHPCR\\PersistentCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'serializeCollection')), 'PhpCollection\\Sequence' => array('json' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'serializeSequence'), 'xml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'serializeSequence'), 'yml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'serializeSequence')), 'PhpCollection\\Map' => array('json' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'serializeMap'), 'xml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'serializeMap'), 'yml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'serializeMap')), 'Symfony\\Component\\Form\\Form' => array('xml' => array(0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormToxml'), 'json' => array(0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormTojson'), 'yml' => array(0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormToyml')), 'Symfony\\Component\\Form\\FormError' => array('xml' => array(0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormErrorToxml'), 'json' => array(0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormErrorTojson'), 'yml' => array(0 => 'jms_serializer.form_error_handler', 1 => 'serializeFormErrorToyml')), 'Symfony\\Component\\Validator\\ConstraintViolationList' => array('xml' => array(0 => 'jms_serializer.constraint_violation_handler', 1 => 'serializeListToxml'), 'json' => array(0 => 'jms_serializer.constraint_violation_handler', 1 => 'serializeListTojson'), 'yml' => array(0 => 'jms_serializer.constraint_violation_handler', 1 => 'serializeListToyml')), 'Symfony\\Component\\Validator\\ConstraintViolation' => array('xml' => array(0 => 'jms_serializer.constraint_violation_handler', 1 => 'serializeViolationToxml'), 'json' => array(0 => 'jms_serializer.constraint_violation_handler', 1 => 'serializeViolationTojson'), 'yml' => array(0 => 'jms_serializer.constraint_violation_handler', 1 => 'serializeViolationToyml')), 'sonata_classification_category_id' => array('json' => array(0 => 'sonata.classification.serializer.handler.category', 1 => 'serializeObjectToId'), 'xml' => array(0 => 'sonata.classification.serializer.handler.category', 1 => 'serializeObjectToId'), 'yml' => array(0 => 'sonata.classification.serializer.handler.category', 1 => 'serializeObjectToId')), 'sonata_classification_collection_id' => array('json' => array(0 => 'sonata.classification.serializer.handler.collection', 1 => 'serializeObjectToId'), 'xml' => array(0 => 'sonata.classification.serializer.handler.collection', 1 => 'serializeObjectToId'), 'yml' => array(0 => 'sonata.classification.serializer.handler.collection', 1 => 'serializeObjectToId')), 'sonata_classification_tag_id' => array('json' => array(0 => 'sonata.classification.serializer.handler.tag', 1 => 'serializeObjectToId'), 'xml' => array(0 => 'sonata.classification.serializer.handler.tag', 1 => 'serializeObjectToId'), 'yml' => array(0 => 'sonata.classification.serializer.handler.tag', 1 => 'serializeObjectToId')), 'sonata_classification_context_id' => array('json' => array(0 => 'sonata.classification.serializer.handler.context', 1 => 'serializeObjectToId'), 'xml' => array(0 => 'sonata.classification.serializer.handler.context', 1 => 'serializeObjectToId'), 'yml' => array(0 => 'sonata.classification.serializer.handler.context', 1 => 'serializeObjectToId'))), 2 => array('sonata_user_user_id' => array('json' => array(0 => 'sonata.user.serializer.handler.user', 1 => 'deserializeObjectFromId'), 'xml' => array(0 => 'sonata.user.serializer.handler.user', 1 => 'deserializeObjectFromId'), 'yml' => array(0 => 'sonata.user.serializer.handler.user', 1 => 'deserializeObjectFromId')), 'sonata_media_media_id' => array('json' => array(0 => 'sonata.media.serializer.handler.media', 1 => 'deserializeObjectFromId'), 'xml' => array(0 => 'sonata.media.serializer.handler.media', 1 => 'deserializeObjectFromId'), 'yml' => array(0 => 'sonata.media.serializer.handler.media', 1 => 'deserializeObjectFromId')), 'sonata_media_gallery_id' => array('json' => array(0 => 'sonata.media.serializer.handler.gallery', 1 => 'deserializeObjectFromId'), 'xml' => array(0 => 'sonata.media.serializer.handler.gallery', 1 => 'deserializeObjectFromId'), 'yml' => array(0 => 'sonata.media.serializer.handler.gallery', 1 => 'deserializeObjectFromId')), 'DateTime' => array('json' => array(0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateTimeFromjson'), 'xml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateTimeFromxml'), 'yml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateTimeFromyml')), 'DateTimeImmutable' => array('json' => array(0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateTimeImmutableFromjson'), 'xml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateTimeImmutableFromxml'), 'yml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateTimeImmutableFromyml')), 'DateInterval' => array('json' => array(0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateIntervalFromjson'), 'xml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateIntervalFromxml'), 'yml' => array(0 => 'jms_serializer.datetime_handler', 1 => 'deserializeDateIntervalFromyml')), 'ArrayCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection')), 'Doctrine\\Common\\Collections\\ArrayCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection')), 'Doctrine\\ORM\\PersistentCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection')), 'Doctrine\\ODM\\MongoDB\\PersistentCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection')), 'Doctrine\\ODM\\PHPCR\\PersistentCollection' => array('json' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'xml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection'), 'yml' => array(0 => 'jms_serializer.array_collection_handler', 1 => 'deserializeCollection')), 'PhpCollection\\Sequence' => array('json' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'deserializeSequence'), 'xml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'deserializeSequence'), 'yml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'deserializeSequence')), 'PhpCollection\\Map' => array('json' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'deserializeMap'), 'xml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'deserializeMap'), 'yml' => array(0 => 'jms_serializer.php_collection_handler', 1 => 'deserializeMap')), 'sonata_classification_category_id' => array('json' => array(0 => 'sonata.classification.serializer.handler.category', 1 => 'deserializeObjectFromId'), 'xml' => array(0 => 'sonata.classification.serializer.handler.category', 1 => 'deserializeObjectFromId'), 'yml' => array(0 => 'sonata.classification.serializer.handler.category', 1 => 'deserializeObjectFromId')), 'sonata_classification_collection_id' => array('json' => array(0 => 'sonata.classification.serializer.handler.collection', 1 => 'deserializeObjectFromId'), 'xml' => array(0 => 'sonata.classification.serializer.handler.collection', 1 => 'deserializeObjectFromId'), 'yml' => array(0 => 'sonata.classification.serializer.handler.collection', 1 => 'deserializeObjectFromId')), 'sonata_classification_tag_id' => array('json' => array(0 => 'sonata.classification.serializer.handler.tag', 1 => 'deserializeObjectFromId'), 'xml' => array(0 => 'sonata.classification.serializer.handler.tag', 1 => 'deserializeObjectFromId'), 'yml' => array(0 => 'sonata.classification.serializer.handler.tag', 1 => 'deserializeObjectFromId')), 'sonata_classification_context_id' => array('json' => array(0 => 'sonata.classification.serializer.handler.context', 1 => 'deserializeObjectFromId'), 'xml' => array(0 => 'sonata.classification.serializer.handler.context', 1 => 'deserializeObjectFromId'), 'yml' => array(0 => 'sonata.classification.serializer.handler.context', 1 => 'deserializeObjectFromId')))));
    }

    /**
     * Gets the private 'fos_user.object_manager' shared service.
     *
     * @return \Doctrine\Common\Persistence\ObjectManager
     */
    protected function getFosUser_ObjectManagerService()
    {
        return $this->services['fos_user.object_manager'] = ${($_ = isset($this->services['doctrine']) ? $this->services['doctrine'] : $this->get('doctrine')) && false ?: '_'}->getManager(NULL);
    }

    /**
     * Gets the private 'fos_user.user_provider.username' shared service.
     *
     * @return \FOS\UserBundle\Security\UserProvider
     */
    protected function getFosUser_UserProvider_UsernameService()
    {
        return $this->services['fos_user.user_provider.username'] = new \FOS\UserBundle\Security\UserProvider(${($_ = isset($this->services['fos_user.user_manager']) ? $this->services['fos_user.user_manager'] : $this->get('fos_user.user_manager')) && false ?: '_'});
    }

    /**
     * Gets the private 'fos_user.util.canonical_fields_updater' shared service.
     *
     * @return \FOS\UserBundle\Util\CanonicalFieldsUpdater
     */
    protected function getFosUser_Util_CanonicalFieldsUpdaterService()
    {
        $a = ${($_ = isset($this->services['fos_user.util.email_canonicalizer']) ? $this->services['fos_user.util.email_canonicalizer'] : $this->get('fos_user.util.email_canonicalizer')) && false ?: '_'};

        return $this->services['fos_user.util.canonical_fields_updater'] = new \FOS\UserBundle\Util\CanonicalFieldsUpdater($a, $a);
    }

    /**
     * Gets the private 'fos_user.util.password_updater' shared service.
     *
     * @return \FOS\UserBundle\Util\PasswordUpdater
     */
    protected function getFosUser_Util_PasswordUpdaterService()
    {
        return $this->services['fos_user.util.password_updater'] = new \FOS\UserBundle\Util\PasswordUpdater(${($_ = isset($this->services['security.encoder_factory']) ? $this->services['security.encoder_factory'] : $this->get('security.encoder_factory')) && false ?: '_'});
    }

    /**
     * Gets the private 'hateoas.configuration.relations_repository' shared service.
     *
     * @return \Hateoas\Configuration\RelationsRepository
     */
    protected function getHateoas_Configuration_RelationsRepositoryService()
    {
        $a = ${($_ = isset($this->services['jms_serializer.metadata.file_locator']) ? $this->services['jms_serializer.metadata.file_locator'] : $this->getJmsSerializer_Metadata_FileLocatorService()) && false ?: '_'};
        $b = ${($_ = isset($this->services['annotation_reader']) ? $this->services['annotation_reader'] : $this->get('annotation_reader')) && false ?: '_'};

        $c = new \Hateoas\Configuration\Metadata\Driver\YamlDriver($a);

        $d = new \Hateoas\Configuration\Metadata\Driver\XmlDriver($a);

        $e = new \Hateoas\Configuration\Metadata\Driver\AnnotationDriver($b);

        $f = new \Hateoas\Configuration\Metadata\Driver\ExtensionDriver($e);

        $g = new \Metadata\Driver\DriverChain(array(0 => $c, 1 => $d, 2 => $f));

        $h = new \Metadata\Cache\FileCache((__DIR__.'/hateoas'));

        $i = new \Metadata\MetadataFactory($g, 'Metadata\\ClassHierarchyMetadata', true);
        $i->setCache($h);

        return $this->services['hateoas.configuration.relations_repository'] = new \Hateoas\Configuration\RelationsRepository($i, new \Hateoas\Configuration\Provider\RelationProvider($i, ${($_ = isset($this->services['hateoas.configuration.provider.resolver']) ? $this->services['hateoas.configuration.provider.resolver'] : $this->get('hateoas.configuration.provider.resolver')) && false ?: '_'}));
    }

    /**
     * Gets the private 'hateoas.embeds_factory' shared service.
     *
     * @return \Hateoas\Factory\EmbeddedsFactory
     */
    protected function getHateoas_EmbedsFactoryService()
    {
        return $this->services['hateoas.embeds_factory'] = new \Hateoas\Factory\EmbeddedsFactory(${($_ = isset($this->services['hateoas.configuration.relations_repository']) ? $this->services['hateoas.configuration.relations_repository'] : $this->getHateoas_Configuration_RelationsRepositoryService()) && false ?: '_'}, ${($_ = isset($this->services['hateoas.expression.evaluator']) ? $this->services['hateoas.expression.evaluator'] : $this->get('hateoas.expression.evaluator')) && false ?: '_'}, ${($_ = isset($this->services['hateoas.serializer.exclusion_manager']) ? $this->services['hateoas.serializer.exclusion_manager'] : $this->get('hateoas.serializer.exclusion_manager')) && false ?: '_'});
    }

    /**
     * Gets the private 'hateoas.link_factory' shared service.
     *
     * @return \Hateoas\Factory\LinkFactory
     */
    protected function getHateoas_LinkFactoryService()
    {
        return $this->services['hateoas.link_factory'] = new \Hateoas\Factory\LinkFactory(${($_ = isset($this->services['hateoas.expression.evaluator']) ? $this->services['hateoas.expression.evaluator'] : $this->get('hateoas.expression.evaluator')) && false ?: '_'}, ${($_ = isset($this->services['hateoas.generator.registry']) ? $this->services['hateoas.generator.registry'] : $this->get('hateoas.generator.registry')) && false ?: '_'});
    }

    /**
     * Gets the private 'hateoas.links_factory' shared service.
     *
     * @return \Hateoas\Factory\LinksFactory
     */
    protected function getHateoas_LinksFactoryService()
    {
        return $this->services['hateoas.links_factory'] = new \Hateoas\Factory\LinksFactory(${($_ = isset($this->services['hateoas.configuration.relations_repository']) ? $this->services['hateoas.configuration.relations_repository'] : $this->getHateoas_Configuration_RelationsRepositoryService()) && false ?: '_'}, ${($_ = isset($this->services['hateoas.link_factory']) ? $this->services['hateoas.link_factory'] : $this->getHateoas_LinkFactoryService()) && false ?: '_'}, ${($_ = isset($this->services['hateoas.serializer.exclusion_manager']) ? $this->services['hateoas.serializer.exclusion_manager'] : $this->get('hateoas.serializer.exclusion_manager')) && false ?: '_'});
    }

    /**
     * Gets the private 'jms_serializer.metadata.file_locator' shared service.
     *
     * @return \Metadata\Driver\FileLocator
     */
    protected function getJmsSerializer_Metadata_FileLocatorService()
    {
        return $this->services['jms_serializer.metadata.file_locator'] = new \Metadata\Driver\FileLocator(array('Sonata\\UserBundle' => ($this->targetDirs[3].'\\vendor\\sonata-project\\user-bundle/Resources/config/serializer'), 'Sonata\\MediaBundle' => ($this->targetDirs[3].'\\vendor\\sonata-project\\media-bundle\\src/Resources/config/serializer'), 'Sonata\\BlockBundle' => ($this->targetDirs[3].'\\vendor\\sonata-project\\block-bundle\\src/Resources/config/serializer'), 'Sonata\\ClassificationBundle' => ($this->targetDirs[3].'\\vendor\\sonata-project\\classification-bundle\\src/Resources/config/serializer'), 'Sonata\\DatagridBundle' => ($this->targetDirs[3].'\\vendor\\sonata-project\\datagrid-bundle\\src/Resources/config/serializer')));
    }

    /**
     * Gets the private 'jms_serializer.metadata_factory' shared service.
     *
     * @return \Metadata\MetadataFactory
     */
    protected function getJmsSerializer_MetadataFactoryService()
    {
        $this->services['jms_serializer.metadata_factory'] = $instance = new \Metadata\MetadataFactory(new \Metadata\Driver\LazyLoadingDriver($this, 'jms_serializer.metadata_driver'), 'Metadata\\ClassHierarchyMetadata', true);

        $instance->setCache(new \Metadata\Cache\FileCache((__DIR__.'/jms_serializer')));

        return $instance;
    }

    /**
     * Gets the private 'jms_serializer.unserialize_object_constructor' shared service.
     *
     * @return \JMS\Serializer\Construction\UnserializeObjectConstructor
     */
    protected function getJmsSerializer_UnserializeObjectConstructorService()
    {
        return $this->services['jms_serializer.unserialize_object_constructor'] = new \JMS\Serializer\Construction\UnserializeObjectConstructor();
    }

    /**
     * Gets the private 'knp_menu.menu_provider.builder_alias' shared service.
     *
     * @return \Knp\Bundle\MenuBundle\Provider\BuilderAliasProvider
     */
    protected function getKnpMenu_MenuProvider_BuilderAliasService()
    {
        return $this->services['knp_menu.menu_provider.builder_alias'] = new \Knp\Bundle\MenuBundle\Provider\BuilderAliasProvider(${($_ = isset($this->services['kernel']) ? $this->services['kernel'] : $this->get('kernel')) && false ?: '_'}, $this, ${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'});
    }

    /**
     * Gets the private 'knp_menu.menu_provider.lazy' shared service.
     *
     * @return \Knp\Menu\Provider\LazyProvider
     */
    protected function getKnpMenu_MenuProvider_LazyService()
    {
        return $this->services['knp_menu.menu_provider.lazy'] = new \Knp\Menu\Provider\LazyProvider(array('sonata_admin_sidebar' => function () {
            return ${($_ = isset($this->services['sonata.admin.sidebar_menu']) ? $this->services['sonata.admin.sidebar_menu'] : $this->get('sonata.admin.sidebar_menu')) && false ?: '_'};
        }));
    }

    /**
     * Gets the private 'lexik_jwt_authentication.security.authentication.entry_point.api' shared service.
     *
     * @return \Lexik\Bundle\JWTAuthenticationBundle\Security\Http\EntryPoint\JWTEntryPoint
     *
     * @deprecated The "lexik_jwt_authentication.security.authentication.entry_point.api" service is deprecated since LexikJWTAuthenticationBundle version 2.0 and will be removed in 3.0
     */
    protected function getLexikJwtAuthentication_Security_Authentication_EntryPoint_ApiService()
    {
        @trigger_error('The "lexik_jwt_authentication.security.authentication.entry_point.api" service is deprecated since LexikJWTAuthenticationBundle version 2.0 and will be removed in 3.0', E_USER_DEPRECATED);

        return $this->services['lexik_jwt_authentication.security.authentication.entry_point.api'] = new \Lexik\Bundle\JWTAuthenticationBundle\Security\Http\EntryPoint\JWTEntryPoint();
    }

    /**
     * Gets the private 'markdown.parser.parser_manager' shared service.
     *
     * @return \Knp\Bundle\MarkdownBundle\Parser\ParserManager
     */
    protected function getMarkdown_Parser_ParserManagerService()
    {
        $this->services['markdown.parser.parser_manager'] = $instance = new \Knp\Bundle\MarkdownBundle\Parser\ParserManager();

        $instance->addParser(new \Knp\Bundle\MarkdownBundle\Parser\Preset\Min(), 'min');
        $instance->addParser(new \Knp\Bundle\MarkdownBundle\Parser\Preset\Light(), 'light');
        $instance->addParser(new \Knp\Bundle\MarkdownBundle\Parser\Preset\Medium(), 'medium');
        $instance->addParser(${($_ = isset($this->services['markdown.parser']) ? $this->services['markdown.parser'] : $this->get('markdown.parser')) && false ?: '_'}, 'default');
        $instance->addParser(new \Knp\Bundle\MarkdownBundle\Parser\Preset\Flavored(), 'flavored');

        return $instance;
    }

    /**
     * Gets the private 'resolve_controller_name_subscriber' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\EventListener\ResolveControllerNameSubscriber
     */
    protected function getResolveControllerNameSubscriberService()
    {
        return $this->services['resolve_controller_name_subscriber'] = new \Symfony\Bundle\FrameworkBundle\EventListener\ResolveControllerNameSubscriber(${($_ = isset($this->services['controller_name_converter']) ? $this->services['controller_name_converter'] : $this->getControllerNameConverterService()) && false ?: '_'});
    }

    /**
     * Gets the private 'router.request_context' shared service.
     *
     * @return \Symfony\Component\Routing\RequestContext
     */
    protected function getRouter_RequestContextService()
    {
        return $this->services['router.request_context'] = new \Symfony\Component\Routing\RequestContext('', 'GET', 'localhost', 'http', 80, 443);
    }

    /**
     * Gets the private 'security.access.authenticated_voter' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authorization\Voter\AuthenticatedVoter
     */
    protected function getSecurity_Access_AuthenticatedVoterService()
    {
        return $this->services['security.access.authenticated_voter'] = new \Symfony\Component\Security\Core\Authorization\Voter\AuthenticatedVoter(${($_ = isset($this->services['security.authentication.trust_resolver']) ? $this->services['security.authentication.trust_resolver'] : $this->getSecurity_Authentication_TrustResolverService()) && false ?: '_'});
    }

    /**
     * Gets the private 'security.access.expression_voter' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authorization\Voter\ExpressionVoter
     */
    protected function getSecurity_Access_ExpressionVoterService()
    {
        return $this->services['security.access.expression_voter'] = new \Symfony\Component\Security\Core\Authorization\Voter\ExpressionVoter(new \Symfony\Component\Security\Core\Authorization\ExpressionLanguage(), ${($_ = isset($this->services['security.authentication.trust_resolver']) ? $this->services['security.authentication.trust_resolver'] : $this->getSecurity_Authentication_TrustResolverService()) && false ?: '_'}, ${($_ = isset($this->services['security.role_hierarchy']) ? $this->services['security.role_hierarchy'] : $this->get('security.role_hierarchy', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the private 'security.access.role_hierarchy_voter' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authorization\Voter\RoleHierarchyVoter
     */
    protected function getSecurity_Access_RoleHierarchyVoterService()
    {
        return $this->services['security.access.role_hierarchy_voter'] = new \Symfony\Component\Security\Core\Authorization\Voter\RoleHierarchyVoter(${($_ = isset($this->services['security.role_hierarchy']) ? $this->services['security.role_hierarchy'] : $this->get('security.role_hierarchy')) && false ?: '_'});
    }

    /**
     * Gets the private 'security.access_listener' shared service.
     *
     * @return \Symfony\Component\Security\Http\Firewall\AccessListener
     */
    protected function getSecurity_AccessListenerService()
    {
        return $this->services['security.access_listener'] = new \Symfony\Component\Security\Http\Firewall\AccessListener(${($_ = isset($this->services['security.token_storage']) ? $this->services['security.token_storage'] : $this->get('security.token_storage')) && false ?: '_'}, ${($_ = isset($this->services['security.access.decision_manager']) ? $this->services['security.access.decision_manager'] : $this->get('security.access.decision_manager')) && false ?: '_'}, ${($_ = isset($this->services['security.access_map']) ? $this->services['security.access_map'] : $this->getSecurity_AccessMapService()) && false ?: '_'}, ${($_ = isset($this->services['security.authentication.manager']) ? $this->services['security.authentication.manager'] : $this->getSecurity_Authentication_ManagerService()) && false ?: '_'});
    }

    /**
     * Gets the private 'security.access_map' shared service.
     *
     * @return \Symfony\Component\Security\Http\AccessMap
     */
    protected function getSecurity_AccessMapService()
    {
        $this->services['security.access_map'] = $instance = new \Symfony\Component\Security\Http\AccessMap();

        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/admin/login$'), array(0 => 'IS_AUTHENTICATED_ANONYMOUSLY'), NULL);
        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/admin/logout$'), array(0 => 'IS_AUTHENTICATED_ANONYMOUSLY'), NULL);
        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/admin/login-check$'), array(0 => 'IS_AUTHENTICATED_ANONYMOUSLY'), NULL);
        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/admin/user/resetting'), array(0 => 'IS_AUTHENTICATED_ANONYMOUSLY'), NULL);
        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/admin/'), array(0 => 'ROLE_USER', 1 => 'IS_AUTHENTICATED_FULLY'), NULL);
        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/user/profile/'), array(0 => 'IS_AUTHENTICATED_FULLY'), NULL);
        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/resetting'), array(0 => 'IS_AUTHENTICATED_ANONYMOUSLY'), NULL);
        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/register'), array(0 => 'IS_AUTHENTICATED_ANONYMOUSLY'), NULL);
        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/api/_doc'), array(0 => 'IS_AUTHENTICATED_ANONYMOUSLY'), NULL);
        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/api/_login'), array(0 => 'IS_AUTHENTICATED_ANONYMOUSLY'), NULL);
        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/api/_token/refresh'), array(0 => 'IS_AUTHENTICATED_ANONYMOUSLY'), NULL);
        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/api.*'), array(0 => 'IS_AUTHENTICATED_FULLY', 1 => 'ROLE_API'), NULL);
        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/.*'), array(0 => 'IS_AUTHENTICATED_ANONYMOUSLY'), NULL);
        $instance->add(new \Symfony\Component\HttpFoundation\RequestMatcher('^/'), array(0 => 'IS_AUTHENTICATED_ANONYMOUSLY'), NULL);

        return $instance;
    }

    /**
     * Gets the private 'security.authentication.listener.jwt.api' shared service.
     *
     * @return \Lexik\Bundle\JWTAuthenticationBundle\Security\Firewall\JWTListener
     *
     * @deprecated The "security.authentication.listener.jwt.api" service is deprecated since LexikJWTAuthenticationBundle version 2.0 and will be removed in 3.0
     */
    protected function getSecurity_Authentication_Listener_Jwt_ApiService()
    {
        @trigger_error('The "security.authentication.listener.jwt.api" service is deprecated since LexikJWTAuthenticationBundle version 2.0 and will be removed in 3.0', E_USER_DEPRECATED);

        $this->services['security.authentication.listener.jwt.api'] = $instance = new \Lexik\Bundle\JWTAuthenticationBundle\Security\Firewall\JWTListener(${($_ = isset($this->services['security.token_storage']) ? $this->services['security.token_storage'] : $this->get('security.token_storage')) && false ?: '_'}, ${($_ = isset($this->services['security.authentication.manager']) ? $this->services['security.authentication.manager'] : $this->getSecurity_Authentication_ManagerService()) && false ?: '_'}, array('authorization_header' => array('enabled' => true, 'prefix' => 'Bearer', 'name' => 'Authorization'), 'cookie' => array('enabled' => false, 'name' => 'BEARER'), 'query_parameter' => array('enabled' => false, 'name' => 'bearer'), 'throw_exceptions' => false, 'create_entry_point' => true, 'authentication_provider' => 'lexik_jwt_authentication.security.authentication.provider', 'authentication_listener' => 'lexik_jwt_authentication.security.authentication.listener'));

        $instance->setDispatcher(${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher')) && false ?: '_'});
        $instance->addTokenExtractor(${($_ = isset($this->services['lexik_jwt_authentication.extractor.authorization_header_extractor.api']) ? $this->services['lexik_jwt_authentication.extractor.authorization_header_extractor.api'] : $this->get('lexik_jwt_authentication.extractor.authorization_header_extractor.api')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the private 'security.authentication.manager' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authentication\AuthenticationProviderManager
     */
    protected function getSecurity_Authentication_ManagerService()
    {
        $this->services['security.authentication.manager'] = $instance = new \Symfony\Component\Security\Core\Authentication\AuthenticationProviderManager(new RewindableGenerator(function () {
            yield 0 => ${($_ = isset($this->services['security.authentication.provider.dao.admin']) ? $this->services['security.authentication.provider.dao.admin'] : $this->getSecurity_Authentication_Provider_Dao_AdminService()) && false ?: '_'};
            yield 1 => ${($_ = isset($this->services['security.authentication.provider.anonymous.admin']) ? $this->services['security.authentication.provider.anonymous.admin'] : $this->getSecurity_Authentication_Provider_Anonymous_AdminService()) && false ?: '_'};
            yield 2 => ${($_ = isset($this->services['security.authentication.provider.anonymous.api_docs']) ? $this->services['security.authentication.provider.anonymous.api_docs'] : $this->getSecurity_Authentication_Provider_Anonymous_ApiDocsService()) && false ?: '_'};
            yield 3 => ${($_ = isset($this->services['security.authentication.provider.dao.api_login']) ? $this->services['security.authentication.provider.dao.api_login'] : $this->getSecurity_Authentication_Provider_Dao_ApiLoginService()) && false ?: '_'};
            yield 4 => ${($_ = isset($this->services['security.authentication.provider.anonymous.api_login']) ? $this->services['security.authentication.provider.anonymous.api_login'] : $this->getSecurity_Authentication_Provider_Anonymous_ApiLoginService()) && false ?: '_'};
            yield 5 => ${($_ = isset($this->services['security.authentication.provider.anonymous.api_token_refresh']) ? $this->services['security.authentication.provider.anonymous.api_token_refresh'] : $this->getSecurity_Authentication_Provider_Anonymous_ApiTokenRefreshService()) && false ?: '_'};
            yield 6 => ${($_ = isset($this->services['security.authentication.provider.jwt.api']) ? $this->services['security.authentication.provider.jwt.api'] : $this->getSecurity_Authentication_Provider_Jwt_ApiService()) && false ?: '_'};
            yield 7 => ${($_ = isset($this->services['security.authentication.provider.dao.main']) ? $this->services['security.authentication.provider.dao.main'] : $this->getSecurity_Authentication_Provider_Dao_MainService()) && false ?: '_'};
            yield 8 => ${($_ = isset($this->services['security.authentication.provider.rememberme.main']) ? $this->services['security.authentication.provider.rememberme.main'] : $this->getSecurity_Authentication_Provider_Rememberme_MainService()) && false ?: '_'};
            yield 9 => ${($_ = isset($this->services['security.authentication.provider.anonymous.main']) ? $this->services['security.authentication.provider.anonymous.main'] : $this->getSecurity_Authentication_Provider_Anonymous_MainService()) && false ?: '_'};
        }, 10), true);

        $instance->setEventDispatcher(${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher')) && false ?: '_'});

        return $instance;
    }

    /**
     * Gets the private 'security.authentication.provider.anonymous.admin' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authentication\Provider\AnonymousAuthenticationProvider
     */
    protected function getSecurity_Authentication_Provider_Anonymous_AdminService()
    {
        return $this->services['security.authentication.provider.anonymous.admin'] = new \Symfony\Component\Security\Core\Authentication\Provider\AnonymousAuthenticationProvider('5da21d6fb1c1d2.71455373');
    }

    /**
     * Gets the private 'security.authentication.provider.anonymous.api_docs' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authentication\Provider\AnonymousAuthenticationProvider
     */
    protected function getSecurity_Authentication_Provider_Anonymous_ApiDocsService()
    {
        return $this->services['security.authentication.provider.anonymous.api_docs'] = new \Symfony\Component\Security\Core\Authentication\Provider\AnonymousAuthenticationProvider('5da21d6fb1c1d2.71455373');
    }

    /**
     * Gets the private 'security.authentication.provider.anonymous.api_login' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authentication\Provider\AnonymousAuthenticationProvider
     */
    protected function getSecurity_Authentication_Provider_Anonymous_ApiLoginService()
    {
        return $this->services['security.authentication.provider.anonymous.api_login'] = new \Symfony\Component\Security\Core\Authentication\Provider\AnonymousAuthenticationProvider('5da21d6fb1c1d2.71455373');
    }

    /**
     * Gets the private 'security.authentication.provider.anonymous.api_token_refresh' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authentication\Provider\AnonymousAuthenticationProvider
     */
    protected function getSecurity_Authentication_Provider_Anonymous_ApiTokenRefreshService()
    {
        return $this->services['security.authentication.provider.anonymous.api_token_refresh'] = new \Symfony\Component\Security\Core\Authentication\Provider\AnonymousAuthenticationProvider('5da21d6fb1c1d2.71455373');
    }

    /**
     * Gets the private 'security.authentication.provider.anonymous.main' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authentication\Provider\AnonymousAuthenticationProvider
     */
    protected function getSecurity_Authentication_Provider_Anonymous_MainService()
    {
        return $this->services['security.authentication.provider.anonymous.main'] = new \Symfony\Component\Security\Core\Authentication\Provider\AnonymousAuthenticationProvider('5da21d6fb1c1d2.71455373');
    }

    /**
     * Gets the private 'security.authentication.provider.dao.admin' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authentication\Provider\DaoAuthenticationProvider
     */
    protected function getSecurity_Authentication_Provider_Dao_AdminService()
    {
        return $this->services['security.authentication.provider.dao.admin'] = new \Symfony\Component\Security\Core\Authentication\Provider\DaoAuthenticationProvider(${($_ = isset($this->services['fos_user.user_provider.username']) ? $this->services['fos_user.user_provider.username'] : $this->getFosUser_UserProvider_UsernameService()) && false ?: '_'}, ${($_ = isset($this->services['security.user_checker']) ? $this->services['security.user_checker'] : $this->getSecurity_UserCheckerService()) && false ?: '_'}, 'admin', ${($_ = isset($this->services['security.encoder_factory']) ? $this->services['security.encoder_factory'] : $this->get('security.encoder_factory')) && false ?: '_'}, true);
    }

    /**
     * Gets the private 'security.authentication.provider.dao.api_login' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authentication\Provider\DaoAuthenticationProvider
     */
    protected function getSecurity_Authentication_Provider_Dao_ApiLoginService()
    {
        return $this->services['security.authentication.provider.dao.api_login'] = new \Symfony\Component\Security\Core\Authentication\Provider\DaoAuthenticationProvider(${($_ = isset($this->services['fos_user.user_provider.username']) ? $this->services['fos_user.user_provider.username'] : $this->getFosUser_UserProvider_UsernameService()) && false ?: '_'}, ${($_ = isset($this->services['security.user_checker']) ? $this->services['security.user_checker'] : $this->getSecurity_UserCheckerService()) && false ?: '_'}, 'api_login', ${($_ = isset($this->services['security.encoder_factory']) ? $this->services['security.encoder_factory'] : $this->get('security.encoder_factory')) && false ?: '_'}, true);
    }

    /**
     * Gets the private 'security.authentication.provider.dao.main' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authentication\Provider\DaoAuthenticationProvider
     */
    protected function getSecurity_Authentication_Provider_Dao_MainService()
    {
        return $this->services['security.authentication.provider.dao.main'] = new \Symfony\Component\Security\Core\Authentication\Provider\DaoAuthenticationProvider(${($_ = isset($this->services['fos_user.user_provider.username']) ? $this->services['fos_user.user_provider.username'] : $this->getFosUser_UserProvider_UsernameService()) && false ?: '_'}, ${($_ = isset($this->services['security.user_checker']) ? $this->services['security.user_checker'] : $this->getSecurity_UserCheckerService()) && false ?: '_'}, 'main', ${($_ = isset($this->services['security.encoder_factory']) ? $this->services['security.encoder_factory'] : $this->get('security.encoder_factory')) && false ?: '_'}, true);
    }

    /**
     * Gets the private 'security.authentication.provider.jwt.api' shared service.
     *
     * @return \Lexik\Bundle\JWTAuthenticationBundle\Security\Authentication\Provider\JWTProvider
     *
     * @deprecated The "security.authentication.provider.jwt.api" service is deprecated since LexikJWTAuthenticationBundle version 2.0 and will be removed in 3.0
     */
    protected function getSecurity_Authentication_Provider_Jwt_ApiService()
    {
        @trigger_error('The "security.authentication.provider.jwt.api" service is deprecated since LexikJWTAuthenticationBundle version 2.0 and will be removed in 3.0', E_USER_DEPRECATED);

        $this->services['security.authentication.provider.jwt.api'] = $instance = new \Lexik\Bundle\JWTAuthenticationBundle\Security\Authentication\Provider\JWTProvider(${($_ = isset($this->services['fos_user.user_provider.username']) ? $this->services['fos_user.user_provider.username'] : $this->getFosUser_UserProvider_UsernameService()) && false ?: '_'}, ${($_ = isset($this->services['lexik_jwt_authentication.jwt_manager']) ? $this->services['lexik_jwt_authentication.jwt_manager'] : $this->get('lexik_jwt_authentication.jwt_manager')) && false ?: '_'}, ${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher')) && false ?: '_'});

        $instance->setUserIdentityField('username');

        return $instance;
    }

    /**
     * Gets the private 'security.authentication.provider.rememberme.main' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authentication\Provider\RememberMeAuthenticationProvider
     */
    protected function getSecurity_Authentication_Provider_Rememberme_MainService()
    {
        return $this->services['security.authentication.provider.rememberme.main'] = new \Symfony\Component\Security\Core\Authentication\Provider\RememberMeAuthenticationProvider(${($_ = isset($this->services['security.user_checker']) ? $this->services['security.user_checker'] : $this->getSecurity_UserCheckerService()) && false ?: '_'}, '692cd6b4574faf02145126fe2f31c3fdbf88a5fc', 'main');
    }

    /**
     * Gets the private 'security.authentication.rememberme.services.simplehash.main' shared service.
     *
     * @return \Symfony\Component\Security\Http\RememberMe\TokenBasedRememberMeServices
     */
    protected function getSecurity_Authentication_Rememberme_Services_Simplehash_MainService()
    {
        return $this->services['security.authentication.rememberme.services.simplehash.main'] = new \Symfony\Component\Security\Http\RememberMe\TokenBasedRememberMeServices(array(0 => ${($_ = isset($this->services['fos_user.user_provider.username']) ? $this->services['fos_user.user_provider.username'] : $this->getFosUser_UserProvider_UsernameService()) && false ?: '_'}), '692cd6b4574faf02145126fe2f31c3fdbf88a5fc', 'main', array('lifetime' => 86400, 'path' => '/', 'name' => 'REMEMBERME', 'domain' => NULL, 'secure' => false, 'httponly' => true, 'always_remember_me' => false, 'remember_me_parameter' => '_remember_me'), ${($_ = isset($this->services['monolog.logger.security']) ? $this->services['monolog.logger.security'] : $this->get('monolog.logger.security', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the private 'security.authentication.session_strategy' shared service.
     *
     * @return \Symfony\Component\Security\Http\Session\SessionAuthenticationStrategy
     */
    protected function getSecurity_Authentication_SessionStrategyService()
    {
        return $this->services['security.authentication.session_strategy'] = new \Symfony\Component\Security\Http\Session\SessionAuthenticationStrategy('migrate');
    }

    /**
     * Gets the private 'security.authentication.trust_resolver' shared service.
     *
     * @return \Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver
     */
    protected function getSecurity_Authentication_TrustResolverService()
    {
        return $this->services['security.authentication.trust_resolver'] = new \Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver('Symfony\\Component\\Security\\Core\\Authentication\\Token\\AnonymousToken', 'Symfony\\Component\\Security\\Core\\Authentication\\Token\\RememberMeToken');
    }

    /**
     * Gets the private 'security.channel_listener' shared service.
     *
     * @return \Symfony\Component\Security\Http\Firewall\ChannelListener
     */
    protected function getSecurity_ChannelListenerService()
    {
        return $this->services['security.channel_listener'] = new \Symfony\Component\Security\Http\Firewall\ChannelListener(${($_ = isset($this->services['security.access_map']) ? $this->services['security.access_map'] : $this->getSecurity_AccessMapService()) && false ?: '_'}, new \Symfony\Component\Security\Http\EntryPoint\RetryAuthenticationEntryPoint(80, 443), ${($_ = isset($this->services['monolog.logger.security']) ? $this->services['monolog.logger.security'] : $this->get('monolog.logger.security', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});
    }

    /**
     * Gets the private 'security.context_listener.0' shared service.
     *
     * @return \Symfony\Component\Security\Http\Firewall\ContextListener
     */
    protected function getSecurity_ContextListener_0Service()
    {
        return $this->services['security.context_listener.0'] = new \Symfony\Component\Security\Http\Firewall\ContextListener(${($_ = isset($this->services['security.token_storage']) ? $this->services['security.token_storage'] : $this->get('security.token_storage')) && false ?: '_'}, array(0 => ${($_ = isset($this->services['fos_user.user_provider.username']) ? $this->services['fos_user.user_provider.username'] : $this->getFosUser_UserProvider_UsernameService()) && false ?: '_'}), 'user', ${($_ = isset($this->services['monolog.logger.security']) ? $this->services['monolog.logger.security'] : $this->get('monolog.logger.security', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, ${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->get('debug.event_dispatcher', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, ${($_ = isset($this->services['security.authentication.trust_resolver']) ? $this->services['security.authentication.trust_resolver'] : $this->getSecurity_Authentication_TrustResolverService()) && false ?: '_'});
    }

    /**
     * Gets the private 'security.extra.metadata_factory' shared service.
     *
     * @return \Metadata\MetadataFactory
     */
    protected function getSecurity_Extra_MetadataFactoryService()
    {
        $this->services['security.extra.metadata_factory'] = $instance = new \Metadata\MetadataFactory(new \Metadata\Driver\LazyLoadingDriver($this, 'security.extra.metadata_driver'));

        $instance->setCache(new \Metadata\Cache\FileCache((__DIR__.'/jms_security'), true));
        $instance->setIncludeInterfaces(true);

        return $instance;
    }

    /**
     * Gets the private 'security.firewall.map' shared service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security\FirewallMap
     */
    protected function getSecurity_Firewall_MapService()
    {
        return $this->services['security.firewall.map'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallMap(new \Symfony\Component\DependencyInjection\ServiceLocator(array('security.firewall.map.context.admin' => function () {
            return ${($_ = isset($this->services['security.firewall.map.context.admin']) ? $this->services['security.firewall.map.context.admin'] : $this->get('security.firewall.map.context.admin')) && false ?: '_'};
        }, 'security.firewall.map.context.api' => function () {
            return ${($_ = isset($this->services['security.firewall.map.context.api']) ? $this->services['security.firewall.map.context.api'] : $this->get('security.firewall.map.context.api')) && false ?: '_'};
        }, 'security.firewall.map.context.api_docs' => function () {
            return ${($_ = isset($this->services['security.firewall.map.context.api_docs']) ? $this->services['security.firewall.map.context.api_docs'] : $this->get('security.firewall.map.context.api_docs')) && false ?: '_'};
        }, 'security.firewall.map.context.api_login' => function () {
            return ${($_ = isset($this->services['security.firewall.map.context.api_login']) ? $this->services['security.firewall.map.context.api_login'] : $this->get('security.firewall.map.context.api_login')) && false ?: '_'};
        }, 'security.firewall.map.context.api_token_refresh' => function () {
            return ${($_ = isset($this->services['security.firewall.map.context.api_token_refresh']) ? $this->services['security.firewall.map.context.api_token_refresh'] : $this->get('security.firewall.map.context.api_token_refresh')) && false ?: '_'};
        }, 'security.firewall.map.context.dev' => function () {
            return ${($_ = isset($this->services['security.firewall.map.context.dev']) ? $this->services['security.firewall.map.context.dev'] : $this->get('security.firewall.map.context.dev')) && false ?: '_'};
        }, 'security.firewall.map.context.main' => function () {
            return ${($_ = isset($this->services['security.firewall.map.context.main']) ? $this->services['security.firewall.map.context.main'] : $this->get('security.firewall.map.context.main')) && false ?: '_'};
        })), new RewindableGenerator(function () {
            yield 'security.firewall.map.context.dev' => ${($_ = isset($this->services['security.request_matcher.7ac43c2928bafe5e56041919eb68135d15908028f87b29ff662dd62c7dfc4828c2b84310']) ? $this->services['security.request_matcher.7ac43c2928bafe5e56041919eb68135d15908028f87b29ff662dd62c7dfc4828c2b84310'] : $this->getSecurity_RequestMatcher_7ac43c2928bafe5e56041919eb68135d15908028f87b29ff662dd62c7dfc4828c2b84310Service()) && false ?: '_'};
            yield 'security.firewall.map.context.admin' => ${($_ = isset($this->services['security.request_matcher.6192eb66f667b945c5faa9068fbc96bd7724861bdcab98d92c6625b683ff302aff6d14d1']) ? $this->services['security.request_matcher.6192eb66f667b945c5faa9068fbc96bd7724861bdcab98d92c6625b683ff302aff6d14d1'] : $this->getSecurity_RequestMatcher_6192eb66f667b945c5faa9068fbc96bd7724861bdcab98d92c6625b683ff302aff6d14d1Service()) && false ?: '_'};
            yield 'security.firewall.map.context.api_docs' => ${($_ = isset($this->services['security.request_matcher.f3ac44e1614cf5ff5908eb685aac69fdb2e0fb89eced77a37757f1a693fb469818019bc6']) ? $this->services['security.request_matcher.f3ac44e1614cf5ff5908eb685aac69fdb2e0fb89eced77a37757f1a693fb469818019bc6'] : $this->getSecurity_RequestMatcher_F3ac44e1614cf5ff5908eb685aac69fdb2e0fb89eced77a37757f1a693fb469818019bc6Service()) && false ?: '_'};
            yield 'security.firewall.map.context.api_login' => ${($_ = isset($this->services['security.request_matcher.696d471d5730f1bcec02c3783880cea90d37764b964a7f52f71cf02d6f8bacb4f24ccd69']) ? $this->services['security.request_matcher.696d471d5730f1bcec02c3783880cea90d37764b964a7f52f71cf02d6f8bacb4f24ccd69'] : $this->getSecurity_RequestMatcher_696d471d5730f1bcec02c3783880cea90d37764b964a7f52f71cf02d6f8bacb4f24ccd69Service()) && false ?: '_'};
            yield 'security.firewall.map.context.api_token_refresh' => ${($_ = isset($this->services['security.request_matcher.bc5225be894e901e543ffcf3380500276da6125173096f94adf786461ce2e0f193452c7f']) ? $this->services['security.request_matcher.bc5225be894e901e543ffcf3380500276da6125173096f94adf786461ce2e0f193452c7f'] : $this->getSecurity_RequestMatcher_Bc5225be894e901e543ffcf3380500276da6125173096f94adf786461ce2e0f193452c7fService()) && false ?: '_'};
            yield 'security.firewall.map.context.api' => ${($_ = isset($this->services['security.request_matcher.83414b4f59ab53f8865b08d5074e037efbb06e57ccba58ede5e1ed417a9ddcd1b645c11b']) ? $this->services['security.request_matcher.83414b4f59ab53f8865b08d5074e037efbb06e57ccba58ede5e1ed417a9ddcd1b645c11b'] : $this->getSecurity_RequestMatcher_83414b4f59ab53f8865b08d5074e037efbb06e57ccba58ede5e1ed417a9ddcd1b645c11bService()) && false ?: '_'};
            yield 'security.firewall.map.context.main' => ${($_ = isset($this->services['security.request_matcher.7cfa9b08003afaadb4ea3bcbe010a26276dbfcad3be257643ceb6b25a29b80166d7d63fd']) ? $this->services['security.request_matcher.7cfa9b08003afaadb4ea3bcbe010a26276dbfcad3be257643ceb6b25a29b80166d7d63fd'] : $this->getSecurity_RequestMatcher_7cfa9b08003afaadb4ea3bcbe010a26276dbfcad3be257643ceb6b25a29b80166d7d63fdService()) && false ?: '_'};
        }, 7));
    }

    /**
     * Gets the private 'security.http_utils' shared service.
     *
     * @return \Symfony\Component\Security\Http\HttpUtils
     */
    protected function getSecurity_HttpUtilsService()
    {
        $a = ${($_ = isset($this->services['router']) ? $this->services['router'] : $this->get('router', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'};

        return $this->services['security.http_utils'] = new \Symfony\Component\Security\Http\HttpUtils($a, $a, '{^https?://%s$}i');
    }

    /**
     * Gets the private 'security.logout.handler.session' shared service.
     *
     * @return \Symfony\Component\Security\Http\Logout\SessionLogoutHandler
     */
    protected function getSecurity_Logout_Handler_SessionService()
    {
        return $this->services['security.logout.handler.session'] = new \Symfony\Component\Security\Http\Logout\SessionLogoutHandler();
    }

    /**
     * Gets the private 'security.logout_url_generator' shared service.
     *
     * @return \Symfony\Component\Security\Http\Logout\LogoutUrlGenerator
     */
    protected function getSecurity_LogoutUrlGeneratorService()
    {
        $this->services['security.logout_url_generator'] = $instance = new \Symfony\Component\Security\Http\Logout\LogoutUrlGenerator(${($_ = isset($this->services['request_stack']) ? $this->services['request_stack'] : $this->get('request_stack', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, ${($_ = isset($this->services['router']) ? $this->services['router'] : $this->get('router', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'}, ${($_ = isset($this->services['security.token_storage']) ? $this->services['security.token_storage'] : $this->get('security.token_storage', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'});

        $instance->registerListener('admin', '/admin/logout', 'logout', '_csrf_token', NULL, 'user');
        $instance->registerListener('main', '/logout', 'logout', '_csrf_token', NULL, 'user');

        return $instance;
    }

    /**
     * Gets the private 'security.request_matcher.6192eb66f667b945c5faa9068fbc96bd7724861bdcab98d92c6625b683ff302aff6d14d1' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\RequestMatcher
     */
    protected function getSecurity_RequestMatcher_6192eb66f667b945c5faa9068fbc96bd7724861bdcab98d92c6625b683ff302aff6d14d1Service()
    {
        return $this->services['security.request_matcher.6192eb66f667b945c5faa9068fbc96bd7724861bdcab98d92c6625b683ff302aff6d14d1'] = new \Symfony\Component\HttpFoundation\RequestMatcher('/admin(.*)');
    }

    /**
     * Gets the private 'security.request_matcher.696d471d5730f1bcec02c3783880cea90d37764b964a7f52f71cf02d6f8bacb4f24ccd69' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\RequestMatcher
     */
    protected function getSecurity_RequestMatcher_696d471d5730f1bcec02c3783880cea90d37764b964a7f52f71cf02d6f8bacb4f24ccd69Service()
    {
        return $this->services['security.request_matcher.696d471d5730f1bcec02c3783880cea90d37764b964a7f52f71cf02d6f8bacb4f24ccd69'] = new \Symfony\Component\HttpFoundation\RequestMatcher('^/api/_login_check');
    }

    /**
     * Gets the private 'security.request_matcher.7ac43c2928bafe5e56041919eb68135d15908028f87b29ff662dd62c7dfc4828c2b84310' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\RequestMatcher
     */
    protected function getSecurity_RequestMatcher_7ac43c2928bafe5e56041919eb68135d15908028f87b29ff662dd62c7dfc4828c2b84310Service()
    {
        return $this->services['security.request_matcher.7ac43c2928bafe5e56041919eb68135d15908028f87b29ff662dd62c7dfc4828c2b84310'] = new \Symfony\Component\HttpFoundation\RequestMatcher('^/(_(profiler|wdt)|css|images|js|admin/_(wdt|profiler)|api/_(wdt|profiler))/');
    }

    /**
     * Gets the private 'security.request_matcher.7cfa9b08003afaadb4ea3bcbe010a26276dbfcad3be257643ceb6b25a29b80166d7d63fd' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\RequestMatcher
     */
    protected function getSecurity_RequestMatcher_7cfa9b08003afaadb4ea3bcbe010a26276dbfcad3be257643ceb6b25a29b80166d7d63fdService()
    {
        return $this->services['security.request_matcher.7cfa9b08003afaadb4ea3bcbe010a26276dbfcad3be257643ceb6b25a29b80166d7d63fd'] = new \Symfony\Component\HttpFoundation\RequestMatcher('.*');
    }

    /**
     * Gets the private 'security.request_matcher.83414b4f59ab53f8865b08d5074e037efbb06e57ccba58ede5e1ed417a9ddcd1b645c11b' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\RequestMatcher
     */
    protected function getSecurity_RequestMatcher_83414b4f59ab53f8865b08d5074e037efbb06e57ccba58ede5e1ed417a9ddcd1b645c11bService()
    {
        return $this->services['security.request_matcher.83414b4f59ab53f8865b08d5074e037efbb06e57ccba58ede5e1ed417a9ddcd1b645c11b'] = new \Symfony\Component\HttpFoundation\RequestMatcher('^/api');
    }

    /**
     * Gets the private 'security.request_matcher.bc5225be894e901e543ffcf3380500276da6125173096f94adf786461ce2e0f193452c7f' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\RequestMatcher
     */
    protected function getSecurity_RequestMatcher_Bc5225be894e901e543ffcf3380500276da6125173096f94adf786461ce2e0f193452c7fService()
    {
        return $this->services['security.request_matcher.bc5225be894e901e543ffcf3380500276da6125173096f94adf786461ce2e0f193452c7f'] = new \Symfony\Component\HttpFoundation\RequestMatcher('^/api/_token/refresh');
    }

    /**
     * Gets the private 'security.request_matcher.f3ac44e1614cf5ff5908eb685aac69fdb2e0fb89eced77a37757f1a693fb469818019bc6' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\RequestMatcher
     */
    protected function getSecurity_RequestMatcher_F3ac44e1614cf5ff5908eb685aac69fdb2e0fb89eced77a37757f1a693fb469818019bc6Service()
    {
        return $this->services['security.request_matcher.f3ac44e1614cf5ff5908eb685aac69fdb2e0fb89eced77a37757f1a693fb469818019bc6'] = new \Symfony\Component\HttpFoundation\RequestMatcher('^/api/_doc');
    }

    /**
     * Gets the private 'security.user_checker' shared service.
     *
     * @return \Symfony\Component\Security\Core\User\UserChecker
     */
    protected function getSecurity_UserCheckerService()
    {
        return $this->services['security.user_checker'] = new \Symfony\Component\Security\Core\User\UserChecker();
    }

    /**
     * Gets the private 'security.user_value_resolver' shared service.
     *
     * @return \Symfony\Bundle\SecurityBundle\SecurityUserValueResolver
     */
    protected function getSecurity_UserValueResolverService()
    {
        return $this->services['security.user_value_resolver'] = new \Symfony\Bundle\SecurityBundle\SecurityUserValueResolver(${($_ = isset($this->services['security.token_storage']) ? $this->services['security.token_storage'] : $this->get('security.token_storage')) && false ?: '_'});
    }

    /**
     * Gets the private 'service_locator.182f5c5b079727c046caf1a16a7b23a8' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    protected function getServiceLocator_182f5c5b079727c046caf1a16a7b23a8Service()
    {
        return $this->services['service_locator.182f5c5b079727c046caf1a16a7b23a8'] = new \Symfony\Component\DependencyInjection\ServiceLocator(array('viewhandler' => function () {
            return ${($_ = isset($this->services['FOS\RestBundle\View\ViewHandlerInterface']) ? $this->services['FOS\RestBundle\View\ViewHandlerInterface'] : $this->get('FOS\RestBundle\View\ViewHandlerInterface', ContainerInterface::NULL_ON_INVALID_REFERENCE)) && false ?: '_'};
        }));
    }

    /**
     * Gets the private 'service_locator.cc2b70dfe28c491d5d4736dc8913e9ae' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    protected function getServiceLocator_Cc2b70dfe28c491d5d4736dc8913e9aeService()
    {
        return $this->services['service_locator.cc2b70dfe28c491d5d4736dc8913e9ae'] = new \Symfony\Component\DependencyInjection\ServiceLocator(array('hinclude' => function () {
            return ${($_ = isset($this->services['fragment.renderer.hinclude']) ? $this->services['fragment.renderer.hinclude'] : $this->get('fragment.renderer.hinclude')) && false ?: '_'};
        }, 'inline' => function () {
            return ${($_ = isset($this->services['fragment.renderer.inline']) ? $this->services['fragment.renderer.inline'] : $this->get('fragment.renderer.inline')) && false ?: '_'};
        }));
    }

    /**
     * Gets the private 'session.storage.metadata_bag' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\Storage\MetadataBag
     */
    protected function getSession_Storage_MetadataBagService()
    {
        return $this->services['session.storage.metadata_bag'] = new \Symfony\Component\HttpFoundation\Session\Storage\MetadataBag('_sf2_meta', '0');
    }

    /**
     * Gets the private 'sonata.admin.menu.group_provider' shared service.
     *
     * @return \Sonata\AdminBundle\Menu\Provider\GroupMenuProvider
     */
    protected function getSonata_Admin_Menu_GroupProviderService()
    {
        return $this->services['sonata.admin.menu.group_provider'] = new \Sonata\AdminBundle\Menu\Provider\GroupMenuProvider(${($_ = isset($this->services['knp_menu.factory']) ? $this->services['knp_menu.factory'] : $this->get('knp_menu.factory')) && false ?: '_'}, ${($_ = isset($this->services['sonata.admin.pool']) ? $this->services['sonata.admin.pool'] : $this->get('sonata.admin.pool')) && false ?: '_'}, ${($_ = isset($this->services['security.authorization_checker']) ? $this->services['security.authorization_checker'] : $this->get('security.authorization_checker')) && false ?: '_'});
    }

    /**
     * Gets the private 'sonata.formatter.twig.env.markdown' shared service.
     *
     * @return \Twig_Environment
     */
    protected function getSonata_Formatter_Twig_Env_MarkdownService()
    {
        $this->services['sonata.formatter.twig.env.markdown'] = $instance = new \Twig_Environment(new \Sonata\FormatterBundle\Twig\Loader\LoaderSelector(new \Twig_Loader_Array(), ${($_ = isset($this->services['twig.loader']) ? $this->services['twig.loader'] : $this->get('twig.loader')) && false ?: '_'}), array('debug' => false, 'strict_variables' => false, 'charset' => 'UTF-8'));

        $instance->addExtension(new \Twig_Extension_Sandbox(new \Sonata\FormatterBundle\Twig\SecurityPolicyContainerAware($this, array(0 => 'sonata.formatter.twig.control_flow', 1 => 'sonata.formatter.twig.gist')), true));
        $instance->addExtension(${($_ = isset($this->services['sonata.formatter.twig.control_flow']) ? $this->services['sonata.formatter.twig.control_flow'] : $this->get('sonata.formatter.twig.control_flow')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.formatter.twig.gist']) ? $this->services['sonata.formatter.twig.gist'] : $this->get('sonata.formatter.twig.gist')) && false ?: '_'});
        $instance->setLexer(new \Twig_Lexer($instance, array('tag_comment' => array(0 => '<#', 1 => '#>'), 'tag_block' => array(0 => '<%', 1 => '%>'), 'tag_variable' => array(0 => '<%=', 1 => '%>'))));

        return $instance;
    }

    /**
     * Gets the private 'sonata.formatter.twig.env.rawhtml' shared service.
     *
     * @return \Twig_Environment
     */
    protected function getSonata_Formatter_Twig_Env_RawhtmlService()
    {
        $this->services['sonata.formatter.twig.env.rawhtml'] = $instance = new \Twig_Environment(new \Sonata\FormatterBundle\Twig\Loader\LoaderSelector(new \Twig_Loader_Array(), ${($_ = isset($this->services['twig.loader']) ? $this->services['twig.loader'] : $this->get('twig.loader')) && false ?: '_'}), array('debug' => false, 'strict_variables' => false, 'charset' => 'UTF-8'));

        $instance->addExtension(new \Twig_Extension_Sandbox(new \Sonata\FormatterBundle\Twig\SecurityPolicyContainerAware($this, array(0 => 'sonata.formatter.twig.control_flow', 1 => 'sonata.formatter.twig.gist')), true));
        $instance->addExtension(${($_ = isset($this->services['sonata.formatter.twig.control_flow']) ? $this->services['sonata.formatter.twig.control_flow'] : $this->get('sonata.formatter.twig.control_flow')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.formatter.twig.gist']) ? $this->services['sonata.formatter.twig.gist'] : $this->get('sonata.formatter.twig.gist')) && false ?: '_'});
        $instance->setLexer(new \Twig_Lexer($instance, array('tag_comment' => array(0 => '<#', 1 => '#>'), 'tag_block' => array(0 => '<%', 1 => '%>'), 'tag_variable' => array(0 => '<%=', 1 => '%>'))));

        return $instance;
    }

    /**
     * Gets the private 'sonata.formatter.twig.env.richhtml' shared service.
     *
     * @return \Twig_Environment
     */
    protected function getSonata_Formatter_Twig_Env_RichhtmlService()
    {
        $this->services['sonata.formatter.twig.env.richhtml'] = $instance = new \Twig_Environment(new \Sonata\FormatterBundle\Twig\Loader\LoaderSelector(new \Twig_Loader_Array(), ${($_ = isset($this->services['twig.loader']) ? $this->services['twig.loader'] : $this->get('twig.loader')) && false ?: '_'}), array('debug' => false, 'strict_variables' => false, 'charset' => 'UTF-8'));

        $instance->addExtension(new \Twig_Extension_Sandbox(new \Sonata\FormatterBundle\Twig\SecurityPolicyContainerAware($this, array(0 => 'sonata.formatter.twig.control_flow', 1 => 'sonata.formatter.twig.gist')), true));
        $instance->addExtension(${($_ = isset($this->services['sonata.formatter.twig.control_flow']) ? $this->services['sonata.formatter.twig.control_flow'] : $this->get('sonata.formatter.twig.control_flow')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.formatter.twig.gist']) ? $this->services['sonata.formatter.twig.gist'] : $this->get('sonata.formatter.twig.gist')) && false ?: '_'});
        $instance->setLexer(new \Twig_Lexer($instance, array('tag_comment' => array(0 => '<#', 1 => '#>'), 'tag_block' => array(0 => '<%', 1 => '%>'), 'tag_variable' => array(0 => '<%=', 1 => '%>'))));

        return $instance;
    }

    /**
     * Gets the private 'sonata.formatter.twig.env.text' shared service.
     *
     * @return \Twig_Environment
     */
    protected function getSonata_Formatter_Twig_Env_TextService()
    {
        $this->services['sonata.formatter.twig.env.text'] = $instance = new \Twig_Environment(new \Sonata\FormatterBundle\Twig\Loader\LoaderSelector(new \Twig_Loader_Array(), ${($_ = isset($this->services['twig.loader']) ? $this->services['twig.loader'] : $this->get('twig.loader')) && false ?: '_'}), array('debug' => false, 'strict_variables' => false, 'charset' => 'UTF-8'));

        $instance->addExtension(new \Twig_Extension_Sandbox(new \Sonata\FormatterBundle\Twig\SecurityPolicyContainerAware($this, array(0 => 'sonata.formatter.twig.control_flow', 1 => 'sonata.formatter.twig.gist')), true));
        $instance->addExtension(${($_ = isset($this->services['sonata.formatter.twig.control_flow']) ? $this->services['sonata.formatter.twig.control_flow'] : $this->get('sonata.formatter.twig.control_flow')) && false ?: '_'});
        $instance->addExtension(${($_ = isset($this->services['sonata.formatter.twig.gist']) ? $this->services['sonata.formatter.twig.gist'] : $this->get('sonata.formatter.twig.gist')) && false ?: '_'});
        $instance->setLexer(new \Twig_Lexer($instance, array('tag_comment' => array(0 => '<#', 1 => '#>'), 'tag_block' => array(0 => '<%', 1 => '%>'), 'tag_variable' => array(0 => '<%=', 1 => '%>'))));

        return $instance;
    }

    /**
     * Gets the private 'swiftmailer.mailer.default.transport.eventdispatcher' shared service.
     *
     * @return \Swift_Events_SimpleEventDispatcher
     */
    protected function getSwiftmailer_Mailer_Default_Transport_EventdispatcherService()
    {
        return $this->services['swiftmailer.mailer.default.transport.eventdispatcher'] = new \Swift_Events_SimpleEventDispatcher();
    }

    /**
     * Gets the private 'templating.locator' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Templating\Loader\TemplateLocator
     */
    protected function getTemplating_LocatorService()
    {
        return $this->services['templating.locator'] = new \Symfony\Bundle\FrameworkBundle\Templating\Loader\TemplateLocator(${($_ = isset($this->services['file_locator']) ? $this->services['file_locator'] : $this->get('file_locator')) && false ?: '_'}, __DIR__);
    }

    /**
     * Gets the private 'validator.validator_factory' shared service.
     *
     * @return \Symfony\Component\Validator\ContainerConstraintValidatorFactory
     */
    protected function getValidator_ValidatorFactoryService()
    {
        return $this->services['validator.validator_factory'] = new \Symfony\Component\Validator\ContainerConstraintValidatorFactory(new \Symfony\Component\DependencyInjection\ServiceLocator(array('Sonata\\CoreBundle\\Validator\\InlineValidator' => function () {
            return ${($_ = isset($this->services['sonata.core.validator.inline']) ? $this->services['sonata.core.validator.inline'] : $this->get('sonata.core.validator.inline')) && false ?: '_'};
        }, 'Sonata\\FormatterBundle\\Validator\\Constraints\\FormatterValidator' => function () {
            return ${($_ = isset($this->services['sonata.formatter.validator.formatter']) ? $this->services['sonata.formatter.validator.formatter'] : $this->get('sonata.formatter.validator.formatter')) && false ?: '_'};
        }, 'Sonata\\MediaBundle\\Validator\\FormatValidator' => function () {
            return ${($_ = isset($this->services['sonata.media.validator.format']) ? $this->services['sonata.media.validator.format'] : $this->get('sonata.media.validator.format')) && false ?: '_'};
        }, 'Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntityValidator' => function () {
            return ${($_ = isset($this->services['doctrine.orm.validator.unique']) ? $this->services['doctrine.orm.validator.unique'] : $this->get('doctrine.orm.validator.unique')) && false ?: '_'};
        }, 'Symfony\\Component\\Security\\Core\\Validator\\Constraints\\UserPasswordValidator' => function () {
            return ${($_ = isset($this->services['security.validator.user_password']) ? $this->services['security.validator.user_password'] : $this->get('security.validator.user_password')) && false ?: '_'};
        }, 'Symfony\\Component\\Validator\\Constraints\\EmailValidator' => function () {
            return ${($_ = isset($this->services['validator.email']) ? $this->services['validator.email'] : $this->get('validator.email')) && false ?: '_'};
        }, 'Symfony\\Component\\Validator\\Constraints\\ExpressionValidator' => function () {
            return ${($_ = isset($this->services['validator.expression']) ? $this->services['validator.expression'] : $this->get('validator.expression')) && false ?: '_'};
        }, 'doctrine.orm.validator.unique' => function () {
            return ${($_ = isset($this->services['doctrine.orm.validator.unique']) ? $this->services['doctrine.orm.validator.unique'] : $this->get('doctrine.orm.validator.unique')) && false ?: '_'};
        }, 'security.validator.user_password' => function () {
            return ${($_ = isset($this->services['security.validator.user_password']) ? $this->services['security.validator.user_password'] : $this->get('security.validator.user_password')) && false ?: '_'};
        }, 'sonata.admin.validator.inline' => function () {
            return ${($_ = isset($this->services['sonata.admin.validator.inline']) ? $this->services['sonata.admin.validator.inline'] : $this->get('sonata.admin.validator.inline')) && false ?: '_'};
        }, 'sonata.core.validator.inline' => function () {
            return ${($_ = isset($this->services['sonata.core.validator.inline']) ? $this->services['sonata.core.validator.inline'] : $this->get('sonata.core.validator.inline')) && false ?: '_'};
        }, 'sonata.formatter.validator.formatter' => function () {
            return ${($_ = isset($this->services['sonata.formatter.validator.formatter']) ? $this->services['sonata.formatter.validator.formatter'] : $this->get('sonata.formatter.validator.formatter')) && false ?: '_'};
        }, 'sonata.media.validator.format' => function () {
            return ${($_ = isset($this->services['sonata.media.validator.format']) ? $this->services['sonata.media.validator.format'] : $this->get('sonata.media.validator.format')) && false ?: '_'};
        }, 'validator.expression' => function () {
            return ${($_ = isset($this->services['validator.expression']) ? $this->services['validator.expression'] : $this->get('validator.expression')) && false ?: '_'};
        })));
    }

    /**
     * Gets the private 'web_profiler.csp.handler' shared service.
     *
     * @return \Symfony\Bundle\WebProfilerBundle\Csp\ContentSecurityPolicyHandler
     */
    protected function getWebProfiler_Csp_HandlerService()
    {
        return $this->services['web_profiler.csp.handler'] = new \Symfony\Bundle\WebProfilerBundle\Csp\ContentSecurityPolicyHandler(new \Symfony\Bundle\WebProfilerBundle\Csp\NonceGenerator());
    }

    /**
     * {@inheritdoc}
     */
    public function getParameter($name)
    {
        $name = strtolower($name);

        if (!(isset($this->parameters[$name]) || array_key_exists($name, $this->parameters) || isset($this->loadedDynamicParameters[$name]))) {
            throw new InvalidArgumentException(sprintf('The parameter "%s" must be defined.', $name));
        }
        if (isset($this->loadedDynamicParameters[$name])) {
            return $this->loadedDynamicParameters[$name] ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
        }

        return $this->parameters[$name];
    }

    /**
     * {@inheritdoc}
     */
    public function hasParameter($name)
    {
        $name = strtolower($name);

        return isset($this->parameters[$name]) || array_key_exists($name, $this->parameters) || isset($this->loadedDynamicParameters[$name]);
    }

    /**
     * {@inheritdoc}
     */
    public function setParameter($name, $value)
    {
        throw new LogicException('Impossible to call set() on a frozen ParameterBag.');
    }

    /**
     * {@inheritdoc}
     */
    public function getParameterBag()
    {
        if (null === $this->parameterBag) {
            $parameters = $this->parameters;
            foreach ($this->loadedDynamicParameters as $name => $loaded) {
                $parameters[$name] = $loaded ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
            }
            $this->parameterBag = new FrozenParameterBag($parameters);
        }

        return $this->parameterBag;
    }

    private $loadedDynamicParameters = array(
        'kernel.root_dir' => false,
        'kernel.project_dir' => false,
        'kernel.logs_dir' => false,
        'kernel.bundles_metadata' => false,
        'jwt_private_key_path' => false,
        'jwt_public_key_path' => false,
        'session.save_path' => false,
        'router.resource' => false,
        'doctrine_migrations.dir_name' => false,
        'gregwar_captcha.config' => false,
        'gregwar_captcha.config.web_path' => false,
        'lexik_jwt_authentication.private_key_path' => false,
        'lexik_jwt_authentication.public_key_path' => false,
    );
    private $dynamicParameters = array();

    /**
     * Computes a dynamic parameter.
     *
     * @param string The name of the dynamic parameter to load
     *
     * @return mixed The value of the dynamic parameter
     *
     * @throws InvalidArgumentException When the dynamic parameter does not exist
     */
    private function getDynamicParameter($name)
    {
        switch ($name) {
            case 'kernel.root_dir': $value = ($this->targetDirs[3].'\\app'); break;
            case 'kernel.project_dir': $value = $this->targetDirs[3]; break;
            case 'kernel.logs_dir': $value = ($this->targetDirs[2].'\\logs'); break;
            case 'kernel.bundles_metadata': $value = array(
                'FrameworkBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Bundle\\FrameworkBundle'),
                    'namespace' => 'Symfony\\Bundle\\FrameworkBundle',
                ),
                'SecurityBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Bundle\\SecurityBundle'),
                    'namespace' => 'Symfony\\Bundle\\SecurityBundle',
                ),
                'TwigBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Bundle\\TwigBundle'),
                    'namespace' => 'Symfony\\Bundle\\TwigBundle',
                ),
                'MonologBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\symfony\\monolog-bundle'),
                    'namespace' => 'Symfony\\Bundle\\MonologBundle',
                ),
                'SwiftmailerBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\symfony\\swiftmailer-bundle'),
                    'namespace' => 'Symfony\\Bundle\\SwiftmailerBundle',
                ),
                'DoctrineBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\doctrine\\doctrine-bundle'),
                    'namespace' => 'Doctrine\\Bundle\\DoctrineBundle',
                ),
                'SensioFrameworkExtraBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\sensio\\framework-extra-bundle'),
                    'namespace' => 'Sensio\\Bundle\\FrameworkExtraBundle',
                ),
                'JMSAopBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\jms\\aop-bundle'),
                    'namespace' => 'JMS\\AopBundle',
                ),
                'JMSSecurityExtraBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\jms\\security-extra-bundle'),
                    'namespace' => 'JMS\\SecurityExtraBundle',
                ),
                'DoctrineMigrationsBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\doctrine\\doctrine-migrations-bundle'),
                    'namespace' => 'Doctrine\\Bundle\\MigrationsBundle',
                ),
                'DoctrineCacheBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\doctrine\\doctrine-cache-bundle'),
                    'namespace' => 'Doctrine\\Bundle\\DoctrineCacheBundle',
                ),
                'KnpMenuBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\knplabs\\knp-menu-bundle\\src'),
                    'namespace' => 'Knp\\Bundle\\MenuBundle',
                ),
                'KnpMarkdownBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\knplabs\\knp-markdown-bundle'),
                    'namespace' => 'Knp\\Bundle\\MarkdownBundle',
                ),
                'KnpPaginatorBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\knplabs\\knp-paginator-bundle'),
                    'namespace' => 'Knp\\Bundle\\PaginatorBundle',
                ),
                'FOSUserBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\user-bundle'),
                    'namespace' => 'FOS\\UserBundle',
                ),
                'SonataUserBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\sonata-project\\user-bundle'),
                    'namespace' => 'Sonata\\UserBundle',
                ),
                'SonataMediaBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\sonata-project\\media-bundle\\src'),
                    'namespace' => 'Sonata\\MediaBundle',
                ),
                'IvoryCKEditorBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\egeloen\\ckeditor-bundle'),
                    'namespace' => 'Ivory\\CKEditorBundle',
                ),
                'SonataAdminBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\sonata-project\\admin-bundle\\src'),
                    'namespace' => 'Sonata\\AdminBundle',
                ),
                'SonataDoctrineORMAdminBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\sonata-project\\doctrine-orm-admin-bundle\\src'),
                    'namespace' => 'Sonata\\DoctrineORMAdminBundle',
                ),
                'FOSRestBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\rest-bundle'),
                    'namespace' => 'FOS\\RestBundle',
                ),
                'BazingaHateoasBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\willdurand\\hateoas-bundle'),
                    'namespace' => 'Bazinga\\Bundle\\HateoasBundle',
                ),
                'NelmioApiDocBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\nelmio\\api-doc-bundle\\Nelmio\\ApiDocBundle'),
                    'namespace' => 'Nelmio\\ApiDocBundle',
                ),
                'NelmioCorsBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\nelmio\\cors-bundle'),
                    'namespace' => 'Nelmio\\CorsBundle',
                ),
                'JMSSerializerBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\jms\\serializer-bundle'),
                    'namespace' => 'JMS\\SerializerBundle',
                ),
                'SonataEasyExtendsBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\sonata-project\\easy-extends-bundle\\src'),
                    'namespace' => 'Sonata\\EasyExtendsBundle',
                ),
                'SonataCoreBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\sonata-project\\core-bundle\\src'),
                    'namespace' => 'Sonata\\CoreBundle',
                ),
                'SonataIntlBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\sonata-project\\intl-bundle\\src'),
                    'namespace' => 'Sonata\\IntlBundle',
                ),
                'SonataFormatterBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\sonata-project\\formatter-bundle\\src'),
                    'namespace' => 'Sonata\\FormatterBundle',
                ),
                'SonataBlockBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\sonata-project\\block-bundle\\src'),
                    'namespace' => 'Sonata\\BlockBundle',
                ),
                'SonataClassificationBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\sonata-project\\classification-bundle\\src'),
                    'namespace' => 'Sonata\\ClassificationBundle',
                ),
                'SonataDatagridBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\sonata-project\\datagrid-bundle\\src'),
                    'namespace' => 'Sonata\\DatagridBundle',
                ),
                'MopaBootstrapBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\mopa\\bootstrap-bundle\\Mopa\\Bundle\\BootstrapBundle'),
                    'namespace' => 'Mopa\\Bundle\\BootstrapBundle',
                ),
                'FOSJsRoutingBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\friendsofsymfony\\jsrouting-bundle'),
                    'namespace' => 'FOS\\JsRoutingBundle',
                ),
                'LexikFormFilterBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\lexik\\form-filter-bundle'),
                    'namespace' => 'Lexik\\Bundle\\FormFilterBundle',
                ),
                'LiipImagineBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\liip\\imagine-bundle'),
                    'namespace' => 'Liip\\ImagineBundle',
                ),
                'KnpGaufretteBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\knplabs\\knp-gaufrette-bundle'),
                    'namespace' => 'Knp\\Bundle\\GaufretteBundle',
                ),
                'WhiteOctoberPagerfantaBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\white-october\\pagerfanta-bundle'),
                    'namespace' => 'WhiteOctober\\PagerfantaBundle',
                ),
                'DataDogAuditBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\data-dog\\audit-bundle\\src\\DataDog\\AuditBundle'),
                    'namespace' => 'DataDog\\AuditBundle',
                ),
                'GregwarCaptchaBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\gregwar\\captcha-bundle'),
                    'namespace' => 'Gregwar\\CaptchaBundle',
                ),
                'LexikJWTAuthenticationBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\lexik\\jwt-authentication-bundle'),
                    'namespace' => 'Lexik\\Bundle\\JWTAuthenticationBundle',
                ),
                'GesdinetJWTRefreshTokenBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\gesdinet\\jwt-refresh-token-bundle'),
                    'namespace' => 'Gesdinet\\JWTRefreshTokenBundle',
                ),
                'AppBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\src\\AppBundle'),
                    'namespace' => 'AppBundle',
                ),
                'DebugBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Bundle\\DebugBundle'),
                    'namespace' => 'Symfony\\Bundle\\DebugBundle',
                ),
                'WebProfilerBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Bundle\\WebProfilerBundle'),
                    'namespace' => 'Symfony\\Bundle\\WebProfilerBundle',
                ),
                'SensioDistributionBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\sensio\\distribution-bundle'),
                    'namespace' => 'Sensio\\Bundle\\DistributionBundle',
                ),
                'SensioGeneratorBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\sensio\\generator-bundle'),
                    'namespace' => 'Sensio\\Bundle\\GeneratorBundle',
                ),
                'WebServerBundle' => array(
                    'parent' => NULL,
                    'path' => ($this->targetDirs[3].'\\vendor\\symfony\\symfony\\src\\Symfony\\Bundle\\WebServerBundle'),
                    'namespace' => 'Symfony\\Bundle\\WebServerBundle',
                ),
            ); break;
            case 'jwt_private_key_path': $value = ($this->targetDirs[3].'\\app/../app/config/jwt/server.key'); break;
            case 'jwt_public_key_path': $value = ($this->targetDirs[3].'\\app/../app/config/jwt/server.crt'); break;
            case 'session.save_path': $value = ($this->targetDirs[3].'/var/sessions/dev'); break;
            case 'router.resource': $value = ($this->targetDirs[3].'/app/config/routing_dev.yml'); break;
            case 'doctrine_migrations.dir_name': $value = ($this->targetDirs[3].'\\app/DoctrineMigrations'); break;
            case 'gregwar_captcha.config': $value = array(
                'width' => 200,
                'height' => 50,
                'length' => 4,
                'font' => ($this->targetDirs[3].'\\vendor\\gregwar\\captcha-bundle\\DependencyInjection/../Generator/Font/captcha.ttf'),
                'keep_value' => false,
                'charset' => 'abcdefhjkmnprstuvwxyz23456789',
                'as_file' => false,
                'as_url' => false,
                'reload' => false,
                'image_folder' => 'captcha',
                'web_path' => ($this->targetDirs[3].'\\app/../web'),
                'gc_freq' => 100,
                'expiration' => 60,
                'quality' => 50,
                'invalid_message' => 'Bad code value',
                'bypass_code' => NULL,
                'whitelist_key' => 'captcha_whitelist_key',
                'humanity' => 0,
                'distortion' => true,
                'max_front_lines' => NULL,
                'max_behind_lines' => NULL,
                'interpolation' => true,
                'text_color' => array(

                ),
                'background_color' => array(

                ),
                'background_images' => array(

                ),
                'disabled' => false,
                'ignore_all_effects' => false,
            ); break;
            case 'gregwar_captcha.config.web_path': $value = ($this->targetDirs[3].'\\app/../web'); break;
            case 'lexik_jwt_authentication.private_key_path': $value = ($this->targetDirs[3].'\\app/../app/config/jwt/server.key'); break;
            case 'lexik_jwt_authentication.public_key_path': $value = ($this->targetDirs[3].'\\app/../app/config/jwt/server.crt'); break;
            default: throw new InvalidArgumentException(sprintf('The dynamic parameter "%s" must be defined.', $name));
        }
        $this->loadedDynamicParameters[$name] = true;

        return $this->dynamicParameters[$name] = $value;
    }

    /**
     * Gets the default parameters.
     *
     * @return array An array of the default parameters
     */
    protected function getDefaultParameters()
    {
        return array(
            'kernel.environment' => 'dev',
            'kernel.debug' => true,
            'kernel.name' => 'app',
            'kernel.cache_dir' => __DIR__,
            'kernel.bundles' => array(
                'FrameworkBundle' => 'Symfony\\Bundle\\FrameworkBundle\\FrameworkBundle',
                'SecurityBundle' => 'Symfony\\Bundle\\SecurityBundle\\SecurityBundle',
                'TwigBundle' => 'Symfony\\Bundle\\TwigBundle\\TwigBundle',
                'MonologBundle' => 'Symfony\\Bundle\\MonologBundle\\MonologBundle',
                'SwiftmailerBundle' => 'Symfony\\Bundle\\SwiftmailerBundle\\SwiftmailerBundle',
                'DoctrineBundle' => 'Doctrine\\Bundle\\DoctrineBundle\\DoctrineBundle',
                'SensioFrameworkExtraBundle' => 'Sensio\\Bundle\\FrameworkExtraBundle\\SensioFrameworkExtraBundle',
                'JMSAopBundle' => 'JMS\\AopBundle\\JMSAopBundle',
                'JMSSecurityExtraBundle' => 'JMS\\SecurityExtraBundle\\JMSSecurityExtraBundle',
                'DoctrineMigrationsBundle' => 'Doctrine\\Bundle\\MigrationsBundle\\DoctrineMigrationsBundle',
                'DoctrineCacheBundle' => 'Doctrine\\Bundle\\DoctrineCacheBundle\\DoctrineCacheBundle',
                'KnpMenuBundle' => 'Knp\\Bundle\\MenuBundle\\KnpMenuBundle',
                'KnpMarkdownBundle' => 'Knp\\Bundle\\MarkdownBundle\\KnpMarkdownBundle',
                'KnpPaginatorBundle' => 'Knp\\Bundle\\PaginatorBundle\\KnpPaginatorBundle',
                'FOSUserBundle' => 'FOS\\UserBundle\\FOSUserBundle',
                'SonataUserBundle' => 'Sonata\\UserBundle\\SonataUserBundle',
                'SonataMediaBundle' => 'Sonata\\MediaBundle\\SonataMediaBundle',
                'IvoryCKEditorBundle' => 'Ivory\\CKEditorBundle\\IvoryCKEditorBundle',
                'SonataAdminBundle' => 'Sonata\\AdminBundle\\SonataAdminBundle',
                'SonataDoctrineORMAdminBundle' => 'Sonata\\DoctrineORMAdminBundle\\SonataDoctrineORMAdminBundle',
                'FOSRestBundle' => 'FOS\\RestBundle\\FOSRestBundle',
                'BazingaHateoasBundle' => 'Bazinga\\Bundle\\HateoasBundle\\BazingaHateoasBundle',
                'NelmioApiDocBundle' => 'Nelmio\\ApiDocBundle\\NelmioApiDocBundle',
                'NelmioCorsBundle' => 'Nelmio\\CorsBundle\\NelmioCorsBundle',
                'JMSSerializerBundle' => 'JMS\\SerializerBundle\\JMSSerializerBundle',
                'SonataEasyExtendsBundle' => 'Sonata\\EasyExtendsBundle\\SonataEasyExtendsBundle',
                'SonataCoreBundle' => 'Sonata\\CoreBundle\\SonataCoreBundle',
                'SonataIntlBundle' => 'Sonata\\IntlBundle\\SonataIntlBundle',
                'SonataFormatterBundle' => 'Sonata\\FormatterBundle\\SonataFormatterBundle',
                'SonataBlockBundle' => 'Sonata\\BlockBundle\\SonataBlockBundle',
                'SonataClassificationBundle' => 'Sonata\\ClassificationBundle\\SonataClassificationBundle',
                'SonataDatagridBundle' => 'Sonata\\DatagridBundle\\SonataDatagridBundle',
                'MopaBootstrapBundle' => 'Mopa\\Bundle\\BootstrapBundle\\MopaBootstrapBundle',
                'FOSJsRoutingBundle' => 'FOS\\JsRoutingBundle\\FOSJsRoutingBundle',
                'LexikFormFilterBundle' => 'Lexik\\Bundle\\FormFilterBundle\\LexikFormFilterBundle',
                'LiipImagineBundle' => 'Liip\\ImagineBundle\\LiipImagineBundle',
                'KnpGaufretteBundle' => 'Knp\\Bundle\\GaufretteBundle\\KnpGaufretteBundle',
                'WhiteOctoberPagerfantaBundle' => 'WhiteOctober\\PagerfantaBundle\\WhiteOctoberPagerfantaBundle',
                'DataDogAuditBundle' => 'DataDog\\AuditBundle\\DataDogAuditBundle',
                'GregwarCaptchaBundle' => 'Gregwar\\CaptchaBundle\\GregwarCaptchaBundle',
                'LexikJWTAuthenticationBundle' => 'Lexik\\Bundle\\JWTAuthenticationBundle\\LexikJWTAuthenticationBundle',
                'GesdinetJWTRefreshTokenBundle' => 'Gesdinet\\JWTRefreshTokenBundle\\GesdinetJWTRefreshTokenBundle',
                'AppBundle' => 'AppBundle\\AppBundle',
                'DebugBundle' => 'Symfony\\Bundle\\DebugBundle\\DebugBundle',
                'WebProfilerBundle' => 'Symfony\\Bundle\\WebProfilerBundle\\WebProfilerBundle',
                'SensioDistributionBundle' => 'Sensio\\Bundle\\DistributionBundle\\SensioDistributionBundle',
                'SensioGeneratorBundle' => 'Sensio\\Bundle\\GeneratorBundle\\SensioGeneratorBundle',
                'WebServerBundle' => 'Symfony\\Bundle\\WebServerBundle\\WebServerBundle',
            ),
            'kernel.charset' => 'UTF-8',
            'kernel.container_class' => 'appDevDebugProjectContainer',
            'database_driver' => 'pdo_mysql',
            'database_host' => '127.0.0.1',
            'database_port' => NULL,
            'database_name' => 'siunic_etecsa',
            'database_user' => 'root',
            'database_password' => NULL,
            'mailer_transport' => 'smtp',
            'mailer_host' => '127.0.0.1',
            'mailer_user' => 'service@symfony.com',
            'mailer_password' => 'service',
            'locale' => 'es',
            'secret' => '692cd6b4574faf02145126fe2f31c3fdbf88a5fc',
            'webapp_host' => '127.0.0.1:8000',
            'webapp_url' => 'http://127.0.0.1:8000',
            'webapp.logo' => 'logo_etecsa.jpg',
            'webapp.short_title' => 'SIUNIC',
            'webapp.title' => 'Sistema Unificado de Cliente Único',
            'sonata_admin.title' => 'SIUNIC ETECSA',
            'sonata_admin.short_title' => 'SIUNIC',
            'sonata_admin.logo_title' => 'logo_etecsa.jpg',
            'sonata_admin.skin' => 'skin-purple',
            'sonata_media.cdn.host' => '/uploads/media',
            'sonata_user.google_authenticator.server' => 'app.symfony-sonata-project.com',
            'jwt_key_pass_phrase' => '1234',
            'jwt_token_ttl' => 86400,
            'security.acl.permission.map.class' => 'Sonata\\AdminBundle\\Security\\Acl\\Permission\\AdminPermissionMap',
            'security_user_class' => 'AppBundle\\Entity\\User\\User',
            'security_group_class' => 'AppBundle\\Entity\\User\\Group',
            'security_user_group_table' => 'security__user_group',
            'security_user_admin_class' => 'AppBundle\\Admin\\User\\UserAdmin',
            'security_group_admin_class' => 'AppBundle\\Admin\\User\\GroupAdmin',
            'fragment.renderer.hinclude.global_template' => 'hinclude.html.twig',
            'fragment.path' => '/_fragment',
            'kernel.secret' => '692cd6b4574faf02145126fe2f31c3fdbf88a5fc',
            'kernel.http_method_override' => true,
            'kernel.trusted_hosts' => array(

            ),
            'kernel.default_locale' => 'es',
            'templating.helper.code.file_link_format' => NULL,
            'debug.file_link_format' => NULL,
            'session.metadata.storage_key' => '_sf2_meta',
            'session.storage.options' => array(
                'cookie_httponly' => true,
                'gc_probability' => 1,
            ),
            'session.metadata.update_threshold' => '0',
            'form.type_extension.csrf.enabled' => true,
            'form.type_extension.csrf.field_name' => '_token',
            'templating.loader.cache.path' => NULL,
            'templating.engines' => array(
                0 => 'twig',
            ),
            'validator.mapping.cache.prefix' => '',
            'validator.mapping.cache.file' => (__DIR__.'/validation.php'),
            'validator.translation_domain' => 'validators',
            'translator.logging' => true,
            'profiler_listener.only_exceptions' => false,
            'profiler_listener.only_master_requests' => false,
            'profiler.storage.dsn' => ('file:'.__DIR__.'/profiler'),
            'debug.error_handler.throw_at' => -1,
            'debug.container.dump' => (__DIR__.'/appDevDebugProjectContainer.xml'),
            'router.options.generator_class' => 'Symfony\\Component\\Routing\\Generator\\UrlGenerator',
            'router.options.generator_base_class' => 'Symfony\\Component\\Routing\\Generator\\UrlGenerator',
            'router.options.generator_dumper_class' => 'Symfony\\Component\\Routing\\Generator\\Dumper\\PhpGeneratorDumper',
            'router.options.matcher_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableUrlMatcher',
            'router.options.matcher_base_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableUrlMatcher',
            'router.options.matcher_dumper_class' => 'Symfony\\Component\\Routing\\Matcher\\Dumper\\PhpMatcherDumper',
            'router.options.matcher.cache_class' => 'appDevDebugProjectContainerUrlMatcher',
            'router.options.generator.cache_class' => 'appDevDebugProjectContainerUrlGenerator',
            'router.request_context.host' => 'localhost',
            'router.request_context.scheme' => 'http',
            'router.request_context.base_url' => '',
            'router.cache_class_prefix' => 'appDevDebugProjectContainer',
            'request_listener.http_port' => 80,
            'request_listener.https_port' => 443,
            'security.authentication.trust_resolver.anonymous_class' => 'Symfony\\Component\\Security\\Core\\Authentication\\Token\\AnonymousToken',
            'security.authentication.trust_resolver.rememberme_class' => 'Symfony\\Component\\Security\\Core\\Authentication\\Token\\RememberMeToken',
            'security.role_hierarchy.roles' => array(
                'SONATA' => array(

                ),
                'ROLE_AUDIT_LOGS_ADMIN' => array(
                    0 => 'ROLE_DATA_DOG_AUDIT_ADMIN_AUDIT_LOG_LIST',
                    1 => 'ROLE_DATA_DOG_AUDIT_ADMIN_AUDIT_LOG_VIEW',
                ),
                'ROLE_USER' => array(
                    0 => 'ROLE_API',
                    1 => 'ROLE_SONATA_ADMIN',
                ),
                'ROLE_SONATA_ADMIN' => array(
                    0 => 'ROLE_SONATA_USER_ADMIN_USER_VIEW',
                    1 => 'ROLE_SONATA_USER_ADMIN_USER_EDIT',
                ),
                'ROLE_ADMIN' => array(
                    0 => 'ROLE_USER',
                    1 => 'ROLE_AUDIT_LOGS_ADMIN',
                ),
                'ROLE_SUPER_ADMIN' => array(
                    0 => 'ROLE_USER',
                    1 => 'ROLE_ADMIN',
                    2 => 'ROLE_AUDIT_LOGS_ADMIN',
                    3 => 'ROLE_ALLOWED_TO_SWITCH',
                ),
                'ROLE_APP_USER' => array(
                    0 => 'ROLE_USER',
                    1 => 'ROLE_DASHBOARD_USER',
                ),
                'ROLE_APP_ADMIN' => array(
                    0 => 'ROLE_USER',
                    1 => 'ROLE_ADMIN',
                ),
            ),
            'security.access.denied_url' => NULL,
            'security.authentication.manager.erase_credentials' => true,
            'security.authentication.session_strategy.strategy' => 'migrate',
            'security.access.always_authenticate_before_granting' => false,
            'security.authentication.hide_user_not_found' => true,
            'twig.exception_listener.controller' => 'FOS\\RestBundle\\Controller\\ExceptionController::showAction',
            'twig.form.resources' => array(
                0 => '@IvoryCKEditor/Form/ckeditor_widget.html.twig',
                1 => 'GregwarCaptchaBundle::captcha.html.twig',
                2 => 'form_div_layout.html.twig',
                3 => '@MopaBootstrap/Form/fields.html.twig',
                4 => 'SonataMediaBundle:Form:media_widgets.html.twig',
                5 => '@SonataCore/Form/datepicker.html.twig',
                6 => 'SonataUserBundle:Form:form_admin_fields.html.twig',
                7 => 'LiipImagineBundle:Form:form_div_layout.html.twig',
            ),
            'monolog.use_microseconds' => true,
            'monolog.swift_mailer.handlers' => array(

            ),
            'monolog.handlers_to_channels' => array(
                'monolog.handler.server_log' => NULL,
                'monolog.handler.console' => array(
                    'type' => 'exclusive',
                    'elements' => array(
                        0 => 'event',
                        1 => 'doctrine',
                        2 => 'console',
                    ),
                ),
                'monolog.handler.main' => array(
                    'type' => 'exclusive',
                    'elements' => array(
                        0 => 'event',
                    ),
                ),
            ),
            'swiftmailer.class' => 'Swift_Mailer',
            'swiftmailer.transport.sendmail.class' => 'Swift_Transport_SendmailTransport',
            'swiftmailer.transport.mail.class' => 'Swift_Transport_MailTransport',
            'swiftmailer.transport.failover.class' => 'Swift_Transport_FailoverTransport',
            'swiftmailer.plugin.redirecting.class' => 'Swift_Plugins_RedirectingPlugin',
            'swiftmailer.plugin.impersonate.class' => 'Swift_Plugins_ImpersonatePlugin',
            'swiftmailer.plugin.messagelogger.class' => 'Swift_Plugins_MessageLogger',
            'swiftmailer.plugin.antiflood.class' => 'Swift_Plugins_AntiFloodPlugin',
            'swiftmailer.transport.smtp.class' => 'Swift_Transport_EsmtpTransport',
            'swiftmailer.plugin.blackhole.class' => 'Swift_Plugins_BlackholePlugin',
            'swiftmailer.spool.file.class' => 'Swift_FileSpool',
            'swiftmailer.spool.memory.class' => 'Swift_MemorySpool',
            'swiftmailer.email_sender.listener.class' => 'Symfony\\Bundle\\SwiftmailerBundle\\EventListener\\EmailSenderListener',
            'swiftmailer.data_collector.class' => 'Symfony\\Bundle\\SwiftmailerBundle\\DataCollector\\MessageDataCollector',
            'swiftmailer.mailer.default.transport.name' => 'smtp',
            'swiftmailer.mailer.default.transport.smtp.encryption' => NULL,
            'swiftmailer.mailer.default.transport.smtp.port' => 25,
            'swiftmailer.mailer.default.transport.smtp.host' => '127.0.0.1',
            'swiftmailer.mailer.default.transport.smtp.username' => 'service@symfony.com',
            'swiftmailer.mailer.default.transport.smtp.password' => 'service',
            'swiftmailer.mailer.default.transport.smtp.auth_mode' => NULL,
            'swiftmailer.mailer.default.transport.smtp.timeout' => 30,
            'swiftmailer.mailer.default.transport.smtp.source_ip' => NULL,
            'swiftmailer.mailer.default.transport.smtp.local_domain' => NULL,
            'swiftmailer.spool.default.memory.path' => (__DIR__.'/swiftmailer/spool/default'),
            'swiftmailer.mailer.default.spool.enabled' => true,
            'swiftmailer.mailer.default.plugin.impersonate' => NULL,
            'swiftmailer.mailer.default.single_address' => NULL,
            'swiftmailer.mailer.default.delivery.enabled' => true,
            'swiftmailer.spool.enabled' => true,
            'swiftmailer.delivery.enabled' => true,
            'swiftmailer.single_address' => NULL,
            'swiftmailer.mailers' => array(
                'default' => 'swiftmailer.mailer.default',
            ),
            'swiftmailer.default_mailer' => 'default',
            'doctrine_cache.apc.class' => 'Doctrine\\Common\\Cache\\ApcCache',
            'doctrine_cache.apcu.class' => 'Doctrine\\Common\\Cache\\ApcuCache',
            'doctrine_cache.array.class' => 'Doctrine\\Common\\Cache\\ArrayCache',
            'doctrine_cache.chain.class' => 'Doctrine\\Common\\Cache\\ChainCache',
            'doctrine_cache.couchbase.class' => 'Doctrine\\Common\\Cache\\CouchbaseCache',
            'doctrine_cache.couchbase.connection.class' => 'Couchbase',
            'doctrine_cache.couchbase.hostnames' => 'localhost:8091',
            'doctrine_cache.file_system.class' => 'Doctrine\\Common\\Cache\\FilesystemCache',
            'doctrine_cache.php_file.class' => 'Doctrine\\Common\\Cache\\PhpFileCache',
            'doctrine_cache.memcache.class' => 'Doctrine\\Common\\Cache\\MemcacheCache',
            'doctrine_cache.memcache.connection.class' => 'Memcache',
            'doctrine_cache.memcache.host' => 'localhost',
            'doctrine_cache.memcache.port' => 11211,
            'doctrine_cache.memcached.class' => 'Doctrine\\Common\\Cache\\MemcachedCache',
            'doctrine_cache.memcached.connection.class' => 'Memcached',
            'doctrine_cache.memcached.host' => 'localhost',
            'doctrine_cache.memcached.port' => 11211,
            'doctrine_cache.mongodb.class' => 'Doctrine\\Common\\Cache\\MongoDBCache',
            'doctrine_cache.mongodb.collection.class' => 'MongoCollection',
            'doctrine_cache.mongodb.connection.class' => 'MongoClient',
            'doctrine_cache.mongodb.server' => 'localhost:27017',
            'doctrine_cache.predis.client.class' => 'Predis\\Client',
            'doctrine_cache.predis.scheme' => 'tcp',
            'doctrine_cache.predis.host' => 'localhost',
            'doctrine_cache.predis.port' => 6379,
            'doctrine_cache.redis.class' => 'Doctrine\\Common\\Cache\\RedisCache',
            'doctrine_cache.redis.connection.class' => 'Redis',
            'doctrine_cache.redis.host' => 'localhost',
            'doctrine_cache.redis.port' => 6379,
            'doctrine_cache.riak.class' => 'Doctrine\\Common\\Cache\\RiakCache',
            'doctrine_cache.riak.bucket.class' => 'Riak\\Bucket',
            'doctrine_cache.riak.connection.class' => 'Riak\\Connection',
            'doctrine_cache.riak.bucket_property_list.class' => 'Riak\\BucketPropertyList',
            'doctrine_cache.riak.host' => 'localhost',
            'doctrine_cache.riak.port' => 8087,
            'doctrine_cache.sqlite3.class' => 'Doctrine\\Common\\Cache\\SQLite3Cache',
            'doctrine_cache.sqlite3.connection.class' => 'SQLite3',
            'doctrine_cache.void.class' => 'Doctrine\\Common\\Cache\\VoidCache',
            'doctrine_cache.wincache.class' => 'Doctrine\\Common\\Cache\\WinCacheCache',
            'doctrine_cache.xcache.class' => 'Doctrine\\Common\\Cache\\XcacheCache',
            'doctrine_cache.zenddata.class' => 'Doctrine\\Common\\Cache\\ZendDataCache',
            'doctrine_cache.security.acl.cache.class' => 'Doctrine\\Bundle\\DoctrineCacheBundle\\Acl\\Model\\AclCache',
            'doctrine.dbal.logger.chain.class' => 'Doctrine\\DBAL\\Logging\\LoggerChain',
            'doctrine.dbal.logger.profiling.class' => 'Doctrine\\DBAL\\Logging\\DebugStack',
            'doctrine.dbal.logger.class' => 'Symfony\\Bridge\\Doctrine\\Logger\\DbalLogger',
            'doctrine.dbal.configuration.class' => 'Doctrine\\DBAL\\Configuration',
            'doctrine.data_collector.class' => 'Doctrine\\Bundle\\DoctrineBundle\\DataCollector\\DoctrineDataCollector',
            'doctrine.dbal.connection.event_manager.class' => 'Symfony\\Bridge\\Doctrine\\ContainerAwareEventManager',
            'doctrine.dbal.connection_factory.class' => 'Doctrine\\Bundle\\DoctrineBundle\\ConnectionFactory',
            'doctrine.dbal.events.mysql_session_init.class' => 'Doctrine\\DBAL\\Event\\Listeners\\MysqlSessionInit',
            'doctrine.dbal.events.oracle_session_init.class' => 'Doctrine\\DBAL\\Event\\Listeners\\OracleSessionInit',
            'doctrine.class' => 'Doctrine\\Bundle\\DoctrineBundle\\Registry',
            'doctrine.entity_managers' => array(
                'default' => 'doctrine.orm.default_entity_manager',
            ),
            'doctrine.default_entity_manager' => 'default',
            'doctrine.dbal.connection_factory.types' => array(
                'json' => array(
                    'class' => 'Sonata\\Doctrine\\Types\\JsonType',
                    'commented' => true,
                ),
            ),
            'doctrine.connections' => array(
                'default' => 'doctrine.dbal.default_connection',
            ),
            'doctrine.default_connection' => 'default',
            'doctrine.orm.configuration.class' => 'Doctrine\\ORM\\Configuration',
            'doctrine.orm.entity_manager.class' => 'Doctrine\\ORM\\EntityManager',
            'doctrine.orm.manager_configurator.class' => 'Doctrine\\Bundle\\DoctrineBundle\\ManagerConfigurator',
            'doctrine.orm.cache.array.class' => 'Doctrine\\Common\\Cache\\ArrayCache',
            'doctrine.orm.cache.apc.class' => 'Doctrine\\Common\\Cache\\ApcCache',
            'doctrine.orm.cache.memcache.class' => 'Doctrine\\Common\\Cache\\MemcacheCache',
            'doctrine.orm.cache.memcache_host' => 'localhost',
            'doctrine.orm.cache.memcache_port' => 11211,
            'doctrine.orm.cache.memcache_instance.class' => 'Memcache',
            'doctrine.orm.cache.memcached.class' => 'Doctrine\\Common\\Cache\\MemcachedCache',
            'doctrine.orm.cache.memcached_host' => 'localhost',
            'doctrine.orm.cache.memcached_port' => 11211,
            'doctrine.orm.cache.memcached_instance.class' => 'Memcached',
            'doctrine.orm.cache.redis.class' => 'Doctrine\\Common\\Cache\\RedisCache',
            'doctrine.orm.cache.redis_host' => 'localhost',
            'doctrine.orm.cache.redis_port' => 6379,
            'doctrine.orm.cache.redis_instance.class' => 'Redis',
            'doctrine.orm.cache.xcache.class' => 'Doctrine\\Common\\Cache\\XcacheCache',
            'doctrine.orm.cache.wincache.class' => 'Doctrine\\Common\\Cache\\WinCacheCache',
            'doctrine.orm.cache.zenddata.class' => 'Doctrine\\Common\\Cache\\ZendDataCache',
            'doctrine.orm.metadata.driver_chain.class' => 'Doctrine\\Common\\Persistence\\Mapping\\Driver\\MappingDriverChain',
            'doctrine.orm.metadata.annotation.class' => 'Doctrine\\ORM\\Mapping\\Driver\\AnnotationDriver',
            'doctrine.orm.metadata.xml.class' => 'Doctrine\\ORM\\Mapping\\Driver\\SimplifiedXmlDriver',
            'doctrine.orm.metadata.yml.class' => 'Doctrine\\ORM\\Mapping\\Driver\\SimplifiedYamlDriver',
            'doctrine.orm.metadata.php.class' => 'Doctrine\\ORM\\Mapping\\Driver\\PHPDriver',
            'doctrine.orm.metadata.staticphp.class' => 'Doctrine\\ORM\\Mapping\\Driver\\StaticPHPDriver',
            'doctrine.orm.proxy_cache_warmer.class' => 'Symfony\\Bridge\\Doctrine\\CacheWarmer\\ProxyCacheWarmer',
            'form.type_guesser.doctrine.class' => 'Symfony\\Bridge\\Doctrine\\Form\\DoctrineOrmTypeGuesser',
            'doctrine.orm.validator.unique.class' => 'Symfony\\Bridge\\Doctrine\\Validator\\Constraints\\UniqueEntityValidator',
            'doctrine.orm.validator_initializer.class' => 'Symfony\\Bridge\\Doctrine\\Validator\\DoctrineInitializer',
            'doctrine.orm.security.user.provider.class' => 'Symfony\\Bridge\\Doctrine\\Security\\User\\EntityUserProvider',
            'doctrine.orm.listeners.resolve_target_entity.class' => 'Doctrine\\ORM\\Tools\\ResolveTargetEntityListener',
            'doctrine.orm.listeners.attach_entity_listeners.class' => 'Doctrine\\ORM\\Tools\\AttachEntityListenersListener',
            'doctrine.orm.naming_strategy.default.class' => 'Doctrine\\ORM\\Mapping\\DefaultNamingStrategy',
            'doctrine.orm.naming_strategy.underscore.class' => 'Doctrine\\ORM\\Mapping\\UnderscoreNamingStrategy',
            'doctrine.orm.quote_strategy.default.class' => 'Doctrine\\ORM\\Mapping\\DefaultQuoteStrategy',
            'doctrine.orm.quote_strategy.ansi.class' => 'Doctrine\\ORM\\Mapping\\AnsiQuoteStrategy',
            'doctrine.orm.entity_listener_resolver.class' => 'Doctrine\\Bundle\\DoctrineBundle\\Mapping\\ContainerAwareEntityListenerResolver',
            'doctrine.orm.second_level_cache.default_cache_factory.class' => 'Doctrine\\ORM\\Cache\\DefaultCacheFactory',
            'doctrine.orm.second_level_cache.default_region.class' => 'Doctrine\\ORM\\Cache\\Region\\DefaultRegion',
            'doctrine.orm.second_level_cache.filelock_region.class' => 'Doctrine\\ORM\\Cache\\Region\\FileLockRegion',
            'doctrine.orm.second_level_cache.logger_chain.class' => 'Doctrine\\ORM\\Cache\\Logging\\CacheLoggerChain',
            'doctrine.orm.second_level_cache.logger_statistics.class' => 'Doctrine\\ORM\\Cache\\Logging\\StatisticsCacheLogger',
            'doctrine.orm.second_level_cache.cache_configuration.class' => 'Doctrine\\ORM\\Cache\\CacheConfiguration',
            'doctrine.orm.second_level_cache.regions_configuration.class' => 'Doctrine\\ORM\\Cache\\RegionsConfiguration',
            'doctrine.orm.auto_generate_proxy_classes' => true,
            'doctrine.orm.proxy_dir' => (__DIR__.'/doctrine/orm/Proxies'),
            'doctrine.orm.proxy_namespace' => 'Proxies',
            'sensio_framework_extra.view.guesser.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\Templating\\TemplateGuesser',
            'sensio_framework_extra.controller.listener.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ControllerListener',
            'sensio_framework_extra.routing.loader.annot_dir.class' => 'Symfony\\Component\\Routing\\Loader\\AnnotationDirectoryLoader',
            'sensio_framework_extra.routing.loader.annot_file.class' => 'Symfony\\Component\\Routing\\Loader\\AnnotationFileLoader',
            'sensio_framework_extra.routing.loader.annot_class.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\Routing\\AnnotatedRouteControllerLoader',
            'sensio_framework_extra.converter.listener.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\ParamConverterListener',
            'sensio_framework_extra.converter.manager.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\Request\\ParamConverter\\ParamConverterManager',
            'sensio_framework_extra.converter.doctrine.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\Request\\ParamConverter\\DoctrineParamConverter',
            'sensio_framework_extra.converter.datetime.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\Request\\ParamConverter\\DateTimeParamConverter',
            'sensio_framework_extra.view.listener.class' => 'Sensio\\Bundle\\FrameworkExtraBundle\\EventListener\\TemplateListener',
            'jms_aop.cache_dir' => (__DIR__.'/jms_aop'),
            'jms_aop.interceptor_loader.class' => 'JMS\\AopBundle\\Aop\\InterceptorLoader',
            'security.secured_services' => array(

            ),
            'security.access.method_interceptor.class' => 'JMS\\SecurityExtraBundle\\Security\\Authorization\\Interception\\MethodSecurityInterceptor',
            'security.access.method_access_control' => array(

            ),
            'security.access.remembering_access_decision_manager.class' => 'JMS\\SecurityExtraBundle\\Security\\Authorization\\RememberingAccessDecisionManager',
            'security.access.run_as_manager.class' => 'JMS\\SecurityExtraBundle\\Security\\Authorization\\RunAsManager',
            'security.authentication.provider.run_as.class' => 'JMS\\SecurityExtraBundle\\Security\\Authentication\\Provider\\RunAsAuthenticationProvider',
            'security.run_as.key' => 'RunAsToken',
            'security.run_as.role_prefix' => 'ROLE_',
            'security.access.after_invocation_manager.class' => 'JMS\\SecurityExtraBundle\\Security\\Authorization\\AfterInvocation\\AfterInvocationManager',
            'security.access.after_invocation.acl_provider.class' => 'JMS\\SecurityExtraBundle\\Security\\Authorization\\AfterInvocation\\AclAfterInvocationProvider',
            'security.access.iddqd_voter.class' => 'JMS\\SecurityExtraBundle\\Security\\Authorization\\Voter\\IddqdVoter',
            'security.extra.metadata_factory.class' => 'Metadata\\MetadataFactory',
            'security.extra.lazy_loading_driver.class' => 'Metadata\\Driver\\LazyLoadingDriver',
            'security.extra.driver_chain.class' => 'Metadata\\Driver\\DriverChain',
            'security.extra.annotation_driver.class' => 'JMS\\SecurityExtraBundle\\Metadata\\Driver\\AnnotationDriver',
            'security.extra.file_cache.class' => 'Metadata\\Cache\\FileCache',
            'security.access.secure_all_services' => false,
            'security.extra.cache_dir' => (__DIR__.'/jms_security'),
            'security.authenticated_voter.disabled' => false,
            'security.role_voter.disabled' => false,
            'security.acl_voter.disabled' => false,
            'security.extra.iddqd_ignore_roles' => array(
                0 => 'ROLE_PREVIOUS_ADMIN',
            ),
            'security.iddqd_aliases' => array(

            ),
            'doctrine_migrations.namespace' => 'Application\\Migrations',
            'doctrine_migrations.table_name' => 'migration_versions',
            'doctrine_migrations.name' => 'Application Migrations',
            'doctrine_migrations.custom_template' => NULL,
            'doctrine_migrations.organize_migrations' => false,
            'knp_menu.factory.class' => 'Knp\\Menu\\MenuFactory',
            'knp_menu.factory_extension.routing.class' => 'Knp\\Menu\\Integration\\Symfony\\RoutingExtension',
            'knp_menu.helper.class' => 'Knp\\Menu\\Twig\\Helper',
            'knp_menu.matcher.class' => 'Knp\\Menu\\Matcher\\Matcher',
            'knp_menu.menu_provider.chain.class' => 'Knp\\Menu\\Provider\\ChainProvider',
            'knp_menu.menu_provider.container_aware.class' => 'Knp\\Bundle\\MenuBundle\\Provider\\ContainerAwareProvider',
            'knp_menu.menu_provider.builder_alias.class' => 'Knp\\Bundle\\MenuBundle\\Provider\\BuilderAliasProvider',
            'knp_menu.renderer_provider.class' => 'Knp\\Bundle\\MenuBundle\\Renderer\\ContainerAwareProvider',
            'knp_menu.renderer.list.class' => 'Knp\\Menu\\Renderer\\ListRenderer',
            'knp_menu.renderer.list.options' => array(

            ),
            'knp_menu.listener.voters.class' => 'Knp\\Bundle\\MenuBundle\\EventListener\\VoterInitializerListener',
            'knp_menu.voter.router.class' => 'Knp\\Menu\\Matcher\\Voter\\RouteVoter',
            'knp_menu.twig.extension.class' => 'Knp\\Menu\\Twig\\MenuExtension',
            'knp_menu.renderer.twig.class' => 'Knp\\Menu\\Renderer\\TwigRenderer',
            'knp_menu.renderer.twig.options' => array(

            ),
            'knp_menu.renderer.twig.template' => '@KnpMenu/menu.html.twig',
            'knp_menu.default_renderer' => 'twig',
            'templating.helper.markdown.class' => 'Knp\\Bundle\\MarkdownBundle\\Helper\\MarkdownHelper',
            'knp_paginator.class' => 'Knp\\Component\\Pager\\Paginator',
            'knp_paginator.helper.processor.class' => 'Knp\\Bundle\\PaginatorBundle\\Helper\\Processor',
            'knp_paginator.template.pagination' => 'MopaBootstrapBundle:Pagination:sliding.html.twig',
            'knp_paginator.template.filtration' => '@KnpPaginator/Pagination/filtration.html.twig',
            'knp_paginator.template.sortable' => '@KnpPaginator/Pagination/sortable_link.html.twig',
            'knp_paginator.page_range' => 5,
            'fos_user.backend_type_orm' => true,
            'fos_user.security.interactive_login_listener.class' => 'FOS\\UserBundle\\EventListener\\LastLoginListener',
            'fos_user.security.login_manager.class' => 'FOS\\UserBundle\\Security\\LoginManager',
            'fos_user.resetting.email.template' => '@FOSUser/Resetting/email.txt.twig',
            'fos_user.registration.confirmation.template' => '@FOSUser/Registration/email.txt.twig',
            'fos_user.storage' => 'orm',
            'fos_user.firewall_name' => 'main',
            'fos_user.model_manager_name' => NULL,
            'fos_user.model.user.class' => 'AppBundle\\Entity\\User\\User',
            'fos_user.profile.form.type' => 'AppBundle\\Form\\User\\Type\\ProfileFormType',
            'fos_user.profile.form.name' => 'fos_user_profile_form',
            'fos_user.profile.form.validation_groups' => array(
                0 => 'Profile',
                1 => 'Default',
            ),
            'fos_user.registration.confirmation.from_email' => array(
                'no-reply@symfony.com' => 'webmaster',
            ),
            'fos_user.registration.confirmation.enabled' => true,
            'fos_user.registration.form.type' => 'AppBundle\\Form\\User\\Type\\RegistrationFormType',
            'fos_user.registration.form.name' => 'fos_user_registration_form',
            'fos_user.registration.form.validation_groups' => array(
                0 => 'Registration',
                1 => 'Default',
            ),
            'fos_user.change_password.form.type' => 'FOS\\UserBundle\\Form\\Type\\ChangePasswordFormType',
            'fos_user.change_password.form.name' => 'fos_user_change_password_form',
            'fos_user.change_password.form.validation_groups' => array(
                0 => 'ChangePassword',
                1 => 'Default',
            ),
            'fos_user.resetting.email.from_email' => array(
                'no-reply@symfony.com' => 'webmaster',
            ),
            'fos_user.resetting.retry_ttl' => 7200,
            'fos_user.resetting.token_ttl' => 86400,
            'fos_user.resetting.form.type' => 'FOS\\UserBundle\\Form\\Type\\ResettingFormType',
            'fos_user.resetting.form.name' => 'fos_user_resetting_form',
            'fos_user.resetting.form.validation_groups' => array(
                0 => 'ResetPassword',
                1 => 'Default',
            ),
            'fos_user.group_manager.class' => 'FOS\\UserBundle\\Doctrine\\GroupManager',
            'fos_user.model.group.class' => 'AppBundle\\Entity\\User\\Group',
            'fos_user.group.form.type' => 'FOS\\UserBundle\\Form\\Type\\GroupFormType',
            'fos_user.group.form.name' => 'fos_user_group_form',
            'fos_user.group.form.validation_groups' => array(
                0 => 'Registration',
                1 => 'Default',
            ),
            'sonata.user.admin.groupname' => 'sonata_user',
            'sonata.user.admin.label_catalogue' => 'SonataUserBundle',
            'sonata.user.admin.groupicon' => '<i class=\'fa fa-users\'></i>',
            'sonata.user.admin.user.class' => 'AppBundle\\Admin\\User\\UserAdmin',
            'sonata.user.admin.group.class' => 'AppBundle\\Admin\\User\\GroupAdmin',
            'sonata.user.admin.user.entity' => 'AppBundle\\Entity\\User\\User',
            'sonata.user.admin.group.entity' => 'AppBundle\\Entity\\User\\Group',
            'sonata.user.admin.user.translation_domain' => 'SonataUserBundle',
            'sonata.user.admin.group.translation_domain' => 'SonataUserBundle',
            'sonata.user.admin.user.controller' => 'SonataAdminBundle:CRUD',
            'sonata.user.admin.group.controller' => 'SonataAdminBundle:CRUD',
            'sonata.user.default_avatar' => 'bundles/sonatauser/default_avatar.png',
            'sonata.user.impersonating' => array(
                'route' => 'page_slug',
                'parameters' => array(
                    'path' => '/',
                ),
            ),
            'sonata.user.google.authenticator.enabled' => false,
            'sonata.user.profile.form.type' => 'application_sonata_user_profile',
            'sonata.user.profile.form.name' => 'application_sonata_user_profile_form',
            'sonata.user.profile.form.validation_groups' => array(
                0 => 'Profile',
                1 => 'Default',
            ),
            'sonata.user.register.confirm.redirect_route' => 'sonata_user_profile_show',
            'sonata.user.register.confirm.redirect_route_params' => array(

            ),
            'sonata.user.configuration.profile_blocks' => array(
                0 => array(
                    'position' => 'left',
                    'type' => 'sonata.block.service.text',
                    'settings' => array(
                        'content' => '<h2>Welcome!</h2> <p>This is a sample user profile dashboard, feel free to override it in the configuration! Want to make this text dynamic? For instance display the user\'s name? Create a dedicated block and edit the configuration!</p>',
                    ),
                ),
            ),
            'sonata.user.registration.form.options' => array(
                'horizontal_input_wrapper_class' => 'col-lg-8',
                'horizontal_label_class' => 'col-lg-4 control-label',
            ),
            'sonata.user.registration.form.type' => 'sonata_user_registration',
            'sonata.user.registration.form.name' => 'sonata_user_registration_form',
            'sonata.user.registration.form.validation_groups' => array(
                0 => 'Registration',
                1 => 'Default',
            ),
            'sonata.media.provider.image.class' => 'Sonata\\MediaBundle\\Provider\\ImageProvider',
            'sonata.media.provider.file.class' => 'Sonata\\MediaBundle\\Provider\\FileProvider',
            'sonata.media.provider.youtube.class' => 'Sonata\\MediaBundle\\Provider\\YouTubeProvider',
            'sonata.media.provider.dailymotion.class' => 'Sonata\\MediaBundle\\Provider\\DailyMotionProvider',
            'sonata.media.provider.vimeo.class' => 'Sonata\\MediaBundle\\Provider\\VimeoProvider',
            'sonata.media.thumbnail.format' => 'Sonata\\MediaBundle\\Thumbnail\\FormatThumbnail',
            'sonata.media.thumbnail.format.default' => 'jpg',
            'sonata.media.thumbnail.liip_imagine' => 'Sonata\\MediaBundle\\Thumbnail\\LiipImagineThumbnail',
            'sonata.media.pool.class' => 'Sonata\\MediaBundle\\Provider\\Pool',
            'sonata.media.resizer.simple.class' => 'Sonata\\MediaBundle\\Resizer\\SimpleResizer',
            'sonata.media.resizer.square.class' => 'Sonata\\MediaBundle\\Resizer\\SquareResizer',
            'sonata.media.adapter.image.gd.class' => 'Imagine\\Gd\\Imagine',
            'sonata.media.adapter.image.imagick.class' => 'Imagine\\Imagick\\Imagine',
            'sonata.media.adapter.image.gmagick.class' => 'Imagine\\Gmagick\\Imagine',
            'sonata.media.metadata.proxy.class' => 'Sonata\\MediaBundle\\Metadata\\ProxyMetadataBuilder',
            'sonata.media.metadata.amazon.class' => 'Sonata\\MediaBundle\\Metadata\\AmazonMetadataBuilder',
            'sonata.media.metadata.noop.class' => 'Sonata\\MediaBundle\\Metadata\\NoopMetadataBuilder',
            'sonata.media.adapater.filesystem.opencloud.class' => '',
            'sonata.media.block.media.class' => 'Sonata\\MediaBundle\\Block\\MediaBlockService',
            'sonata.media.block.feature_media.class' => 'Sonata\\MediaBundle\\Block\\FeatureMediaBlockService',
            'sonata.media.block.gallery.class' => 'Sonata\\MediaBundle\\Block\\GalleryBlockService',
            'sonata.media.block.gallery_list.class' => 'Sonata\\MediaBundle\\Block\\GalleryListBlockService',
            'sonata.media.manager.media.class' => 'Sonata\\MediaBundle\\Entity\\MediaManager',
            'sonata.media.manager.gallery.class' => 'Sonata\\MediaBundle\\Entity\\GalleryManager',
            'sonata.media.admin.groupname' => 'sonata_media',
            'sonata.media.admin.groupicon' => '<i class=\'fa fa-image\'></i>',
            'sonata.media.admin.media.class' => 'Sonata\\MediaBundle\\Admin\\ORM\\MediaAdmin',
            'sonata.media.admin.media.controller' => 'SonataMediaBundle:MediaAdmin',
            'sonata.media.admin.media.translation_domain' => 'SonataMediaBundle',
            'sonata.media.admin.gallery.class' => 'Sonata\\MediaBundle\\Admin\\GalleryAdmin',
            'sonata.media.admin.gallery.controller' => 'SonataMediaBundle:GalleryAdmin',
            'sonata.media.admin.gallery.translation_domain' => 'SonataMediaBundle',
            'sonata.media.admin.gallery_has_media.class' => 'Sonata\\MediaBundle\\Admin\\GalleryHasMediaAdmin',
            'sonata.media.admin.gallery_has_media.controller' => 'SonataAdminBundle:CRUD',
            'sonata.media.admin.gallery_has_media.translation_domain' => 'SonataMediaBundle',
            'sonata.media.admin_format' => array(
                'width' => 200,
                'height' => false,
                'quality' => 90,
                'format' => 'jpg',
                'constraint' => true,
            ),
            'sonata.media.resizer.simple.adapter.mode' => 'inset',
            'sonata.media.resizer.square.adapter.mode' => 'inset',
            'sonata.media.admin.media.entity' => 'AppBundle\\Entity\\Media\\Media',
            'sonata.media.admin.gallery.entity' => 'AppBundle\\Entity\\Media\\Gallery',
            'sonata.media.admin.gallery_has_media.entity' => 'AppBundle\\Entity\\Media\\GalleryHasMedia',
            'sonata.media.media.class' => 'AppBundle\\Entity\\Media\\Media',
            'sonata.media.gallery.class' => 'AppBundle\\Entity\\Media\\Gallery',
            'sonata.admin.twig.extension.x_editable_type_mapping' => array(
                'choice' => 'select',
                'boolean' => 'select',
                'text' => 'text',
                'textarea' => 'textarea',
                'html' => 'textarea',
                'email' => 'email',
                'string' => 'text',
                'smallint' => 'text',
                'bigint' => 'text',
                'integer' => 'number',
                'decimal' => 'number',
                'currency' => 'number',
                'percent' => 'number',
                'url' => 'url',
                'date' => 'date',
            ),
            'sonata.admin.configuration.global_search.empty_boxes' => 'show',
            'sonata.admin.configuration.templates' => array(
                'history_revision_timestamp' => '@SonataIntl/CRUD/history_revision_timestamp.html.twig',
                'user_block' => '@SonataUser/Admin/Core/user_block.html.twig',
                'layout' => 'AppBundle:Admin:standard_layout.html.twig',
                'ajax' => 'SonataAdminBundle::ajax_layout.html.twig',
                'list' => 'SonataAdminBundle:CRUD:list.html.twig',
                'show' => 'SonataAdminBundle:CRUD:show.html.twig',
                'edit' => 'SonataAdminBundle:CRUD:edit.html.twig',
                'base_list_field' => 'AppBundle:Admin:CRUD/base_list_field.html.twig',
                'dashboard' => 'AppBundle:Admin:dashboard.html.twig',
                'add_block' => '@SonataAdmin/Core/add_block.html.twig',
                'search' => '@SonataAdmin/Core/search.html.twig',
                'filter' => '@SonataAdmin/Form/filter_admin_fields.html.twig',
                'show_compare' => '@SonataAdmin/CRUD/show_compare.html.twig',
                'preview' => '@SonataAdmin/CRUD/preview.html.twig',
                'history' => '@SonataAdmin/CRUD/history.html.twig',
                'acl' => '@SonataAdmin/CRUD/acl.html.twig',
                'action' => '@SonataAdmin/CRUD/action.html.twig',
                'select' => '@SonataAdmin/CRUD/list__select.html.twig',
                'list_block' => '@SonataAdmin/Block/block_admin_list.html.twig',
                'search_result_block' => '@SonataAdmin/Block/block_search_result.html.twig',
                'short_object_description' => '@SonataAdmin/Helper/short-object-description.html.twig',
                'delete' => '@SonataAdmin/CRUD/delete.html.twig',
                'batch' => '@SonataAdmin/CRUD/list__batch.html.twig',
                'batch_confirmation' => '@SonataAdmin/CRUD/batch_confirmation.html.twig',
                'inner_list_row' => '@SonataAdmin/CRUD/list_inner_row.html.twig',
                'outer_list_rows_mosaic' => '@SonataAdmin/CRUD/list_outer_rows_mosaic.html.twig',
                'outer_list_rows_list' => '@SonataAdmin/CRUD/list_outer_rows_list.html.twig',
                'outer_list_rows_tree' => '@SonataAdmin/CRUD/list_outer_rows_tree.html.twig',
                'pager_links' => '@SonataAdmin/Pager/links.html.twig',
                'pager_results' => '@SonataAdmin/Pager/results.html.twig',
                'tab_menu_template' => '@SonataAdmin/Core/tab_menu_template.html.twig',
                'knp_menu_template' => '@SonataAdmin/Menu/sonata_menu.html.twig',
                'action_create' => '@SonataAdmin/CRUD/dashboard__action_create.html.twig',
                'button_acl' => '@SonataAdmin/Button/acl_button.html.twig',
                'button_create' => '@SonataAdmin/Button/create_button.html.twig',
                'button_edit' => '@SonataAdmin/Button/edit_button.html.twig',
                'button_history' => '@SonataAdmin/Button/history_button.html.twig',
                'button_list' => '@SonataAdmin/Button/list_button.html.twig',
                'button_show' => '@SonataAdmin/Button/show_button.html.twig',
            ),
            'sonata.admin.configuration.admin_services' => array(

            ),
            'sonata.admin.configuration.dashboard_groups' => array(
                'sonata.admin.group.administration' => array(
                    'label' => 'sonata_administration',
                    'label_catalogue' => 'SonataAdminBundle',
                    'icon' => '<i class="glyphicon glyphicon-user"></i>',
                    'items' => array(

                    ),
                    'on_top' => false,
                    'keep_open' => false,
                    'item_adds' => array(

                    ),
                    'roles' => array(

                    ),
                ),
                'sonata.admin.group.site_builder' => array(
                    'label' => 'sonata_page',
                    'label_catalogue' => 'SonataPageBundle',
                    'icon' => '<i class="fa fa-puzzle-piece"></i>',
                    'items' => array(

                    ),
                    'on_top' => false,
                    'keep_open' => false,
                    'item_adds' => array(

                    ),
                    'roles' => array(

                    ),
                ),
                'sonata.admin.group.classification' => array(
                    'label' => 'sonata_classification',
                    'label_catalogue' => 'SonataClassificationBundle',
                    'icon' => '<i class="fa fa-sitemap"></i>',
                    'items' => array(

                    ),
                    'on_top' => false,
                    'keep_open' => false,
                    'item_adds' => array(

                    ),
                    'roles' => array(

                    ),
                ),
                'sonata.admin.group.content' => array(
                    'label' => 'sonata_media',
                    'label_catalogue' => 'SonataMediaBundle',
                    'icon' => '<i class="fa fa-th"></i>',
                    'items' => array(

                    ),
                    'on_top' => false,
                    'keep_open' => false,
                    'item_adds' => array(

                    ),
                    'roles' => array(

                    ),
                ),
                'administration' => array(
                    'label' => 'sonata_administration',
                    'label_catalogue' => 'SonataAdminBundle',
                    'icon' => '<i class="glyphicon glyphicon-user"></i>',
                    'items' => array(
                        0 => array(
                            'admin' => 'sonata.user.admin.user',
                            'label' => '',
                            'route' => '',
                            'route_params' => array(

                            ),
                            'route_absolute' => false,
                            'roles' => array(

                            ),
                        ),
                        1 => array(
                            'admin' => 'sonata.user.admin.group',
                            'label' => '',
                            'route' => '',
                            'route_params' => array(

                            ),
                            'route_absolute' => false,
                            'roles' => array(

                            ),
                        ),
                        2 => array(
                            'admin' => 'data_dog_audit.admin.audit_log',
                            'label' => '',
                            'route' => '',
                            'route_params' => array(

                            ),
                            'route_absolute' => false,
                            'roles' => array(

                            ),
                        ),
                    ),
                    'on_top' => false,
                    'keep_open' => false,
                    'item_adds' => array(

                    ),
                    'roles' => array(

                    ),
                ),
                'admin' => array(
                    'label' => 'admin.dashboard.menu.admin.label',
                    'label_catalogue' => 'AppBundle',
                    'icon' => '<i class="fa fa-list-alt"></i>',
                    'roles' => array(
                        0 => 'ROLE_ADMIN',
                    ),
                    'items' => array(

                    ),
                    'on_top' => false,
                    'keep_open' => false,
                    'item_adds' => array(

                    ),
                ),
                'general' => array(
                    'label' => 'Datos Generales',
                    'label_catalogue' => 'AppBundle',
                    'icon' => '<i class="fa fa-list-alt"></i>',
                    'roles' => array(
                        0 => 'ROLE_ADMIN',
                        1 => 'ROLE_USER',
                    ),
                    'items' => array(

                    ),
                    'on_top' => false,
                    'keep_open' => false,
                    'item_adds' => array(

                    ),
                ),
                'contrato_agencia' => array(
                    'label' => 'Contratos Agencia Persona Jurídica',
                    'label_catalogue' => 'AppBundle',
                    'icon' => '<i class="fa fa-list-alt"></i>',
                    'roles' => array(
                        0 => 'ROLE_USER',
                    ),
                    'items' => array(

                    ),
                    'on_top' => false,
                    'keep_open' => false,
                    'item_adds' => array(

                    ),
                ),
                'contrato_areas' => array(
                    'label' => 'Contratos Áreas de Internet',
                    'label_catalogue' => 'AppBundle',
                    'icon' => '<i class="fa fa-list-alt"></i>',
                    'roles' => array(
                        0 => 'ROLE_USER',
                    ),
                    'items' => array(

                    ),
                    'on_top' => false,
                    'keep_open' => false,
                    'item_adds' => array(

                    ),
                ),
                'contrato_arrendamiento_pizarra' => array(
                    'label' => 'Contratos Arrendamiento de Pizarras',
                    'label_catalogue' => 'AppBundle',
                    'icon' => '<i class="fa fa-list-alt"></i>',
                    'roles' => array(
                        0 => 'ROLE_USER',
                    ),
                    'items' => array(

                    ),
                    'on_top' => false,
                    'keep_open' => false,
                    'item_adds' => array(

                    ),
                ),
                'contrato_arrendamiento_redes' => array(
                    'label' => 'Contratos Arrendamiento de Redes',
                    'label_catalogue' => 'AppBundle',
                    'icon' => '<i class="fa fa-list-alt"></i>',
                    'roles' => array(
                        0 => 'ROLE_USER',
                    ),
                    'items' => array(

                    ),
                    'on_top' => false,
                    'keep_open' => false,
                    'item_adds' => array(

                    ),
                ),
                'contrato_compra_venta_pizarra' => array(
                    'label' => 'Contratos Compra Venta Pizarras',
                    'label_catalogue' => 'AppBundle',
                    'icon' => '<i class="fa fa-list-alt"></i>',
                    'roles' => array(
                        0 => 'ROLE_USER',
                    ),
                    'items' => array(

                    ),
                    'on_top' => false,
                    'keep_open' => false,
                    'item_adds' => array(

                    ),
                ),
                'contrato_compra_venta' => array(
                    'label' => 'Contratos Compra Venta',
                    'label_catalogue' => 'AppBundle',
                    'icon' => '<i class="fa fa-list-alt"></i>',
                    'roles' => array(
                        0 => 'ROLE_USER',
                    ),
                    'items' => array(

                    ),
                    'on_top' => false,
                    'keep_open' => false,
                    'item_adds' => array(

                    ),
                ),
                'contrato_instalacion_pizarra' => array(
                    'label' => 'Contratos Instalacion de Pizarras',
                    'label_catalogue' => 'AppBundle',
                    'icon' => '<i class="fa fa-list-alt"></i>',
                    'roles' => array(
                        0 => 'ROLE_USER',
                    ),
                    'items' => array(

                    ),
                    'on_top' => false,
                    'keep_open' => false,
                    'item_adds' => array(

                    ),
                ),
                'contrato_mantenimiento_pizarra' => array(
                    'label' => 'Contratos Mantenimiento de Pizarras',
                    'label_catalogue' => 'AppBundle',
                    'icon' => '<i class="fa fa-list-alt"></i>',
                    'roles' => array(
                        0 => 'ROLE_USER',
                    ),
                    'items' => array(

                    ),
                    'on_top' => false,
                    'keep_open' => false,
                    'item_adds' => array(

                    ),
                ),
                'contrato_prestacion_servicios_ct' => array(
                    'label' => 'Contratos Prestacion de Servicios CT',
                    'label_catalogue' => 'AppBundle',
                    'icon' => '<i class="fa fa-list-alt"></i>',
                    'roles' => array(
                        0 => 'ROLE_USER',
                    ),
                    'items' => array(

                    ),
                    'on_top' => false,
                    'keep_open' => false,
                    'item_adds' => array(

                    ),
                ),
                'contrato_prestacion_servicios' => array(
                    'label' => 'Contratos Prestacion de Servicios',
                    'label_catalogue' => 'AppBundle',
                    'icon' => '<i class="fa fa-list-alt"></i>',
                    'roles' => array(
                        0 => 'ROLE_USER',
                    ),
                    'items' => array(

                    ),
                    'on_top' => false,
                    'keep_open' => false,
                    'item_adds' => array(

                    ),
                ),
                'contrato_recarga_pos' => array(
                    'label' => 'Contratos Recarga por POS',
                    'label_catalogue' => 'AppBundle',
                    'icon' => '<i class="fa fa-list-alt"></i>',
                    'roles' => array(
                        0 => 'ROLE_USER',
                    ),
                    'items' => array(

                    ),
                    'on_top' => false,
                    'keep_open' => false,
                    'item_adds' => array(

                    ),
                ),
                'user' => array(
                    'label' => 'admin.dashboard.menu.user.label',
                    'label_catalogue' => 'AppBundle',
                    'icon' => '<i class="fa fa-list-alt"></i>',
                    'roles' => array(
                        0 => 'ROLE_USER',
                    ),
                    'items' => array(

                    ),
                    'on_top' => false,
                    'keep_open' => false,
                    'item_adds' => array(

                    ),
                ),
            ),
            'sonata.admin.configuration.dashboard_blocks' => array(
                0 => array(
                    'position' => 'left',
                    'type' => 'sonata.admin.block.admin_list',
                    'settings' => array(
                        'groups' => array(
                            0 => 'administration',
                            1 => 'contrato_agencia',
                            2 => 'contrato_recarga_pos',
                            3 => 'contrato_prestacion_servicios',
                            4 => 'contrato_compra_venta',
                            5 => 'contrato_arrendamiento_redes',
                            6 => 'contrato_instalacion_pizarra',
                            7 => 'contrato_compra_venta_pizarra',
                            8 => 'contrato_mantenimiento_pizarra',
                        ),
                    ),
                    'roles' => array(

                    ),
                    'class' => 'col-md-4',
                ),
                1 => array(
                    'position' => 'right',
                    'type' => 'sonata.admin.block.admin_list',
                    'settings' => array(
                        'groups' => array(
                            0 => 'admin',
                            1 => 'user',
                            2 => 'contrato_prestacion_servicios_ct',
                            3 => 'contrato_areas',
                            4 => 'contrato_arrendamiento_pizarra',
                        ),
                    ),
                    'roles' => array(

                    ),
                    'class' => 'col-md-4',
                ),
            ),
            'sonata.admin.configuration.sort_admins' => false,
            'sonata.admin.configuration.breadcrumbs' => array(
                'child_admin_route' => 'edit',
            ),
            'sonata.admin.security.acl_user_manager' => 'fos_user.user_manager',
            'sonata.admin.configuration.security.role_admin' => 'ROLE_SONATA_ADMIN',
            'sonata.admin.configuration.security.role_super_admin' => 'ROLE_SUPER_ADMIN',
            'sonata.admin.configuration.security.information' => array(
                'EDIT' => array(
                    0 => 'EDIT',
                ),
                'LIST' => array(
                    0 => 'LIST',
                ),
                'CREATE' => array(
                    0 => 'CREATE',
                ),
                'VIEW' => array(
                    0 => 'VIEW',
                ),
                'DELETE' => array(
                    0 => 'DELETE',
                ),
                'EXPORT' => array(
                    0 => 'EXPORT',
                ),
                'ALL' => array(
                    0 => 'ALL',
                ),
            ),
            'sonata.admin.configuration.security.admin_permissions' => array(
                0 => 'CREATE',
                1 => 'LIST',
                2 => 'DELETE',
                3 => 'UNDELETE',
                4 => 'EXPORT',
                5 => 'OPERATOR',
                6 => 'MASTER',
            ),
            'sonata.admin.configuration.security.object_permissions' => array(
                0 => 'VIEW',
                1 => 'EDIT',
                2 => 'DELETE',
                3 => 'UNDELETE',
                4 => 'OPERATOR',
                5 => 'MASTER',
                6 => 'OWNER',
            ),
            'sonata.admin.security.handler.noop.class' => 'Sonata\\AdminBundle\\Security\\Handler\\NoopSecurityHandler',
            'sonata.admin.security.handler.role.class' => 'Sonata\\AdminBundle\\Security\\Handler\\RoleSecurityHandler',
            'sonata.admin.security.handler.acl.class' => 'Sonata\\AdminBundle\\Security\\Handler\\AclSecurityHandler',
            'sonata.admin.security.mask.builder.class' => 'Sonata\\AdminBundle\\Security\\Acl\\Permission\\MaskBuilder',
            'sonata.admin.manipulator.acl.admin.class' => 'Sonata\\AdminBundle\\Util\\AdminAclManipulator',
            'sonata.admin.object.manipulator.acl.admin.class' => 'Sonata\\AdminBundle\\Util\\AdminObjectAclManipulator',
            'sonata.admin.extension.map' => array(
                'admins' => array(

                ),
                'excludes' => array(

                ),
                'implements' => array(

                ),
                'extends' => array(

                ),
                'instanceof' => array(

                ),
                'uses' => array(

                ),
            ),
            'sonata.admin.configuration.filters.persist' => false,
            'sonata.admin.configuration.filters.persister' => 'sonata.admin.filter_persister.session',
            'sonata.admin.configuration.show.mosaic.button' => true,
            'sonata.admin.configuration.translate_group_label' => false,
            'sonata.admin.manipulator.acl.object.orm.class' => 'Sonata\\DoctrineORMAdminBundle\\Util\\ObjectAclManipulator',
            'sonata_doctrine_orm_admin.entity_manager' => NULL,
            'sonata_doctrine_orm_admin.templates' => array(
                'types' => array(
                    'list' => array(
                        'array' => '@SonataAdmin/CRUD/list_array.html.twig',
                        'boolean' => '@SonataAdmin/CRUD/list_boolean.html.twig',
                        'date' => '@SonataIntl/CRUD/list_date.html.twig',
                        'time' => '@SonataAdmin/CRUD/list_time.html.twig',
                        'datetime' => '@SonataIntl/CRUD/list_datetime.html.twig',
                        'text' => '@SonataAdmin/CRUD/list_string.html.twig',
                        'textarea' => '@SonataAdmin/CRUD/list_string.html.twig',
                        'email' => '@SonataAdmin/CRUD/list_email.html.twig',
                        'trans' => '@SonataAdmin/CRUD/list_trans.html.twig',
                        'string' => '@SonataAdmin/CRUD/list_string.html.twig',
                        'smallint' => '@SonataIntl/CRUD/list_decimal.html.twig',
                        'bigint' => '@SonataIntl/CRUD/list_decimal.html.twig',
                        'integer' => '@SonataIntl/CRUD/list_decimal.html.twig',
                        'decimal' => '@SonataIntl/CRUD/list_decimal.html.twig',
                        'identifier' => '@SonataAdmin/CRUD/list_string.html.twig',
                        'currency' => '@SonataIntl/CRUD/list_currency.html.twig',
                        'percent' => '@SonataIntl/CRUD/list_percent.html.twig',
                        'choice' => '@SonataAdmin/CRUD/list_choice.html.twig',
                        'url' => '@SonataAdmin/CRUD/list_url.html.twig',
                        'html' => '@SonataAdmin/CRUD/list_html.html.twig',
                    ),
                    'show' => array(
                        'array' => '@SonataAdmin/CRUD/show_array.html.twig',
                        'boolean' => '@SonataAdmin/CRUD/show_boolean.html.twig',
                        'date' => '@SonataIntl/CRUD/show_date.html.twig',
                        'time' => '@SonataAdmin/CRUD/show_time.html.twig',
                        'datetime' => '@SonataIntl/CRUD/show_datetime.html.twig',
                        'text' => '@SonataAdmin/CRUD/base_show_field.html.twig',
                        'email' => '@SonataAdmin/CRUD/show_email.html.twig',
                        'trans' => '@SonataAdmin/CRUD/show_trans.html.twig',
                        'string' => '@SonataAdmin/CRUD/base_show_field.html.twig',
                        'smallint' => '@SonataIntl/CRUD/show_decimal.html.twig',
                        'bigint' => '@SonataIntl/CRUD/show_decimal.html.twig',
                        'integer' => '@SonataIntl/CRUD/show_decimal.html.twig',
                        'decimal' => '@SonataIntl/CRUD/show_decimal.html.twig',
                        'currency' => '@SonataIntl/CRUD/show_currency.html.twig',
                        'percent' => '@SonataIntl/CRUD/show_percent.html.twig',
                        'choice' => '@SonataAdmin/CRUD/show_choice.html.twig',
                        'url' => '@SonataAdmin/CRUD/show_url.html.twig',
                        'html' => '@SonataAdmin/CRUD/show_html.html.twig',
                    ),
                ),
                'form' => array(
                    0 => '@SonataDoctrineORMAdmin/Form/form_admin_fields.html.twig',
                ),
                'filter' => array(
                    0 => '@SonataDoctrineORMAdmin/Form/filter_admin_fields.html.twig',
                ),
            ),
            'fos_rest.format_listener.rules' => NULL,
            'hateoas.link_factory.class' => 'Hateoas\\Factory\\LinkFactory',
            'hateoas.links_factory.class' => 'Hateoas\\Factory\\LinksFactory',
            'hateoas.embeds_factory.class' => 'Hateoas\\Factory\\EmbeddedsFactory',
            'hateoas.expression.evaluator.class' => 'Bazinga\\Bundle\\HateoasBundle\\Hateoas\\Expression\\LazyFunctionExpressionEvaluator',
            'bazinga_hateoas.expression_language.class' => 'Bazinga\\Bundle\\HateoasBundle\\ExpressionLanguage\\ExpressionLanguage',
            'hateoas.expression.link.class' => 'Hateoas\\Expression\\LinkExpressionFunction',
            'hateoas.serializer.xml.class' => 'Hateoas\\Serializer\\XmlSerializer',
            'hateoas.serializer.json_hal.class' => 'Hateoas\\Serializer\\JsonHalSerializer',
            'hateoas.serializer.exclusion_manager.class' => 'Hateoas\\Serializer\\ExclusionManager',
            'hateoas.event_subscriber.xml.class' => 'Hateoas\\Serializer\\EventSubscriber\\XmlEventSubscriber',
            'hateoas.event_subscriber.json.class' => 'Hateoas\\Serializer\\EventSubscriber\\JsonEventSubscriber',
            'hateoas.inline_deferrer.embeds.class' => 'Hateoas\\Serializer\\Metadata\\InlineDeferrer',
            'hateoas.inline_deferrer.links.class' => 'Hateoas\\Serializer\\Metadata\\InlineDeferrer',
            'hateoas.configuration.provider.resolver.chain.class' => 'Hateoas\\Configuration\\Provider\\Resolver\\ChainResolver',
            'hateoas.configuration.provider.resolver.method.class' => 'Hateoas\\Configuration\\Provider\\Resolver\\MethodResolver',
            'hateoas.configuration.provider.resolver.static_method.class' => 'Hateoas\\Configuration\\Provider\\Resolver\\StaticMethodResolver',
            'hateoas.configuration.provider.resolver.symfony_container.class' => 'Hateoas\\Configuration\\Provider\\Resolver\\SymfonyContainerResolver',
            'hateoas.configuration.relation_provider.class' => 'Hateoas\\Configuration\\Provider\\RelationProvider',
            'hateoas.configuration.relations_repository.class' => 'Hateoas\\Configuration\\RelationsRepository',
            'hateoas.configuration.metadata.yaml_driver.class' => 'Hateoas\\Configuration\\Metadata\\Driver\\YamlDriver',
            'hateoas.configuration.metadata.xml_driver.class' => 'Hateoas\\Configuration\\Metadata\\Driver\\XmlDriver',
            'hateoas.configuration.metadata.annotation_driver.class' => 'Hateoas\\Configuration\\Metadata\\Driver\\AnnotationDriver',
            'hateoas.configuration.metadata.extension_driver.class' => 'Hateoas\\Configuration\\Metadata\\Driver\\ExtensionDriver',
            'hateoas.generator.registry.class' => 'Hateoas\\UrlGenerator\\UrlGeneratorRegistry',
            'hateoas.generator.symfony.class' => 'Hateoas\\UrlGenerator\\SymfonyUrlGenerator',
            'hateoas.helper.link.class' => 'Hateoas\\Helper\\LinkHelper',
            'hateoas.twig.link.class' => 'Hateoas\\Twig\\Extension\\LinkExtension',
            'nelmio_api_doc.motd.template' => 'NelmioApiDocBundle::Components/motd.html.twig',
            'nelmio_api_doc.exclude_sections' => array(

            ),
            'nelmio_api_doc.default_sections_opened' => true,
            'nelmio_api_doc.api_name' => 'System API',
            'nelmio_api_doc.sandbox.enabled' => true,
            'nelmio_api_doc.sandbox.endpoint' => NULL,
            'nelmio_api_doc.sandbox.accept_type' => NULL,
            'nelmio_api_doc.sandbox.body_format.formats' => array(
                0 => 'form',
                1 => 'json',
            ),
            'nelmio_api_doc.sandbox.body_format.default_format' => 'form',
            'nelmio_api_doc.sandbox.request_format.method' => 'accept_header',
            'nelmio_api_doc.sandbox.request_format.default_format' => 'json',
            'nelmio_api_doc.sandbox.request_format.formats' => array(
                'json' => 'application/json',
                'xml' => 'application/xml',
            ),
            'nelmio_api_doc.sandbox.entity_to_choice' => true,
            'nelmio_api_doc.formatter.abstract_formatter.class' => 'Nelmio\\ApiDocBundle\\Formatter\\AbstractFormatter',
            'nelmio_api_doc.formatter.markdown_formatter.class' => 'Nelmio\\ApiDocBundle\\Formatter\\MarkdownFormatter',
            'nelmio_api_doc.formatter.simple_formatter.class' => 'Nelmio\\ApiDocBundle\\Formatter\\SimpleFormatter',
            'nelmio_api_doc.formatter.html_formatter.class' => 'Nelmio\\ApiDocBundle\\Formatter\\HtmlFormatter',
            'nelmio_api_doc.formatter.swagger_formatter.class' => 'Nelmio\\ApiDocBundle\\Formatter\\SwaggerFormatter',
            'nelmio_api_doc.sandbox.authentication' => array(
                'delivery' => 'http',
                'type' => 'bearer',
                'name' => 'Authorization',
                'custom_endpoint' => false,
            ),
            'nelmio_api_doc.extractor.api_doc_extractor.class' => 'Nelmio\\ApiDocBundle\\Extractor\\ApiDocExtractor',
            'nelmio_api_doc.form.extension.description_form_type_extension.class' => 'Nelmio\\ApiDocBundle\\Form\\Extension\\DescriptionFormTypeExtension',
            'nelmio_api_doc.twig.extension.extra_markdown.class' => 'Nelmio\\ApiDocBundle\\Twig\\Extension\\MarkdownExtension',
            'nelmio_api_doc.doc_comment_extractor.class' => 'Nelmio\\ApiDocBundle\\Util\\DocCommentExtractor',
            'nelmio_api_doc.extractor.handler.fos_rest.class' => 'Nelmio\\ApiDocBundle\\Extractor\\Handler\\FosRestHandler',
            'nelmio_api_doc.extractor.handler.jms_security.class' => 'Nelmio\\ApiDocBundle\\Extractor\\Handler\\JmsSecurityExtraHandler',
            'nelmio_api_doc.extractor.handler.sensio_framework_extra.class' => 'Nelmio\\ApiDocBundle\\Extractor\\Handler\\SensioFrameworkExtraHandler',
            'nelmio_api_doc.extractor.handler.phpdoc.class' => 'Nelmio\\ApiDocBundle\\Extractor\\Handler\\PhpDocHandler',
            'nelmio_api_doc.parser.collection_parser.class' => 'Nelmio\\ApiDocBundle\\Parser\\CollectionParser',
            'nelmio_api_doc.parser.form_errors_parser.class' => 'Nelmio\\ApiDocBundle\\Parser\\FormErrorsParser',
            'nelmio_api_doc.parser.json_serializable_parser.class' => 'Nelmio\\ApiDocBundle\\Parser\\JsonSerializableParser',
            'nelmio_api_doc.request_listener.parameter' => '_doc',
            'nelmio_api_doc.event_listener.request.class' => 'Nelmio\\ApiDocBundle\\EventListener\\RequestListener',
            'nelmio_api_doc.parser.validation_parser.class' => 'Nelmio\\ApiDocBundle\\Parser\\ValidationParser',
            'nelmio_api_doc.swagger.base_path' => '/api',
            'nelmio_api_doc.swagger.swagger_version' => '1.2',
            'nelmio_api_doc.swagger.api_version' => '0.1',
            'nelmio_api_doc.swagger.info' => array(
                'title' => 'Symfony2',
                'description' => 'My awesome Symfony2 app!',
                'TermsOfServiceUrl' => NULL,
                'contact' => NULL,
                'license' => NULL,
                'licenseUrl' => NULL,
            ),
            'nelmio_api_doc.swagger.model_naming_strategy' => 'dot_notation',
            'nelmio_cors.map' => array(
                '^/api/' => array(
                    'allow_origin' => true,
                    'allow_headers' => true,
                    'allow_methods' => array(
                        0 => 'GET',
                        1 => 'POST',
                        2 => 'PUT',
                        3 => 'PATCH',
                        4 => 'DELETE',
                        5 => 'OPTIONS',
                    ),
                    'max_age' => 3600,
                ),
                '^/' => array(
                    'origin_regex' => true,
                    'allow_origin' => array(
                        0 => '^http://localhost:[0-9]+',
                    ),
                    'allow_headers' => array(
                        0 => 'x-custom-auth',
                    ),
                    'allow_methods' => array(
                        0 => 'GET',
                        1 => 'POST',
                        2 => 'PUT',
                        3 => 'PATCH',
                        4 => 'DELETE',
                        5 => 'OPTIONS',
                    ),
                    'max_age' => 3600,
                    'hosts' => array(
                        0 => '^api\\.',
                    ),
                ),
            ),
            'nelmio_cors.defaults' => array(
                'allow_origin' => array(

                ),
                'allow_credentials' => false,
                'allow_headers' => array(

                ),
                'expose_headers' => array(

                ),
                'allow_methods' => array(

                ),
                'max_age' => 0,
                'hosts' => array(

                ),
                'origin_regex' => false,
                'forced_allow_origin_value' => NULL,
            ),
            'nelmio_cors.cors_listener.class' => 'Nelmio\\CorsBundle\\EventListener\\CorsListener',
            'nelmio_cors.options_resolver.class' => 'Nelmio\\CorsBundle\\Options\\Resolver',
            'nelmio_cors.options_provider.config.class' => 'Nelmio\\CorsBundle\\Options\\ConfigProvider',
            'jms_serializer.metadata.file_locator.class' => 'Metadata\\Driver\\FileLocator',
            'jms_serializer.metadata.annotation_driver.class' => 'JMS\\Serializer\\Metadata\\Driver\\AnnotationDriver',
            'jms_serializer.metadata.chain_driver.class' => 'Metadata\\Driver\\DriverChain',
            'jms_serializer.metadata.yaml_driver.class' => 'JMS\\Serializer\\Metadata\\Driver\\YamlDriver',
            'jms_serializer.metadata.xml_driver.class' => 'JMS\\Serializer\\Metadata\\Driver\\XmlDriver',
            'jms_serializer.metadata.php_driver.class' => 'JMS\\Serializer\\Metadata\\Driver\\PhpDriver',
            'jms_serializer.metadata.doctrine_type_driver.class' => 'JMS\\Serializer\\Metadata\\Driver\\DoctrineTypeDriver',
            'jms_serializer.metadata.doctrine_phpcr_type_driver.class' => 'JMS\\Serializer\\Metadata\\Driver\\DoctrinePHPCRTypeDriver',
            'jms_serializer.metadata.lazy_loading_driver.class' => 'Metadata\\Driver\\LazyLoadingDriver',
            'jms_serializer.metadata.metadata_factory.class' => 'Metadata\\MetadataFactory',
            'jms_serializer.metadata.cache.file_cache.class' => 'Metadata\\Cache\\FileCache',
            'jms_serializer.event_dispatcher.class' => 'JMS\\Serializer\\EventDispatcher\\LazyEventDispatcher',
            'jms_serializer.camel_case_naming_strategy.class' => 'JMS\\Serializer\\Naming\\CamelCaseNamingStrategy',
            'jms_serializer.identical_property_naming_strategy.class' => 'JMS\\Serializer\\Naming\\IdenticalPropertyNamingStrategy',
            'jms_serializer.serialized_name_annotation_strategy.class' => 'JMS\\Serializer\\Naming\\SerializedNameAnnotationStrategy',
            'jms_serializer.cache_naming_strategy.class' => 'JMS\\Serializer\\Naming\\CacheNamingStrategy',
            'jms_serializer.doctrine_object_constructor.class' => 'JMS\\Serializer\\Construction\\DoctrineObjectConstructor',
            'jms_serializer.unserialize_object_constructor.class' => 'JMS\\Serializer\\Construction\\UnserializeObjectConstructor',
            'jms_serializer.version_exclusion_strategy.class' => 'JMS\\Serializer\\Exclusion\\VersionExclusionStrategy',
            'jms_serializer.serializer.class' => 'JMS\\Serializer\\Serializer',
            'jms_serializer.twig_extension.class' => 'JMS\\Serializer\\Twig\\SerializerExtension',
            'jms_serializer.twig_runtime_extension.class' => 'JMS\\Serializer\\Twig\\SerializerRuntimeExtension',
            'jms_serializer.twig_runtime_extension_helper.class' => 'JMS\\Serializer\\Twig\\SerializerRuntimeHelper',
            'jms_serializer.templating.helper.class' => 'JMS\\SerializerBundle\\Templating\\SerializerHelper',
            'jms_serializer.json_serialization_visitor.class' => 'JMS\\Serializer\\JsonSerializationVisitor',
            'jms_serializer.json_serialization_visitor.options' => 0,
            'jms_serializer.json_deserialization_visitor.class' => 'JMS\\Serializer\\JsonDeserializationVisitor',
            'jms_serializer.xml_serialization_visitor.class' => 'JMS\\Serializer\\XmlSerializationVisitor',
            'jms_serializer.xml_deserialization_visitor.class' => 'JMS\\Serializer\\XmlDeserializationVisitor',
            'jms_serializer.xml_deserialization_visitor.doctype_whitelist' => array(

            ),
            'jms_serializer.xml_serialization_visitor.format_output' => true,
            'jms_serializer.yaml_serialization_visitor.class' => 'JMS\\Serializer\\YamlSerializationVisitor',
            'jms_serializer.handler_registry.class' => 'JMS\\Serializer\\Handler\\LazyHandlerRegistry',
            'jms_serializer.datetime_handler.class' => 'JMS\\Serializer\\Handler\\DateHandler',
            'jms_serializer.array_collection_handler.class' => 'JMS\\Serializer\\Handler\\ArrayCollectionHandler',
            'jms_serializer.php_collection_handler.class' => 'JMS\\Serializer\\Handler\\PhpCollectionHandler',
            'jms_serializer.form_error_handler.class' => 'FOS\\RestBundle\\Serializer\\Normalizer\\FormErrorHandler',
            'jms_serializer.constraint_violation_handler.class' => 'JMS\\Serializer\\Handler\\ConstraintViolationHandler',
            'jms_serializer.doctrine_proxy_subscriber.class' => 'JMS\\Serializer\\EventDispatcher\\Subscriber\\DoctrineProxySubscriber',
            'jms_serializer.stopwatch_subscriber.class' => 'JMS\\SerializerBundle\\Serializer\\StopwatchEventSubscriber',
            'jms_serializer.configured_context_factory.class' => 'JMS\\SerializerBundle\\ContextFactory\\ConfiguredContextFactory',
            'jms_serializer.expression_evaluator.class' => 'JMS\\Serializer\\Expression\\ExpressionEvaluator',
            'jms_serializer.expression_language.class' => 'Symfony\\Component\\ExpressionLanguage\\ExpressionLanguage',
            'jms_serializer.expression_language.function_provider.class' => 'JMS\\SerializerBundle\\ExpressionLanguage\\BasicSerializerFunctionsProvider',
            'jms_serializer.accessor_strategy.default.class' => 'JMS\\Serializer\\Accessor\\DefaultAccessorStrategy',
            'jms_serializer.accessor_strategy.expression.class' => 'JMS\\Serializer\\Accessor\\ExpressionAccessorStrategy',
            'jms_serializer.cache.cache_warmer.class' => 'JMS\\SerializerBundle\\Cache\\CacheWarmer',
            'sonata.core.flashmessage.manager.class' => 'Sonata\\CoreBundle\\FlashMessage\\FlashManager',
            'sonata.core.twig.extension.flashmessage.class' => 'Sonata\\CoreBundle\\Twig\\Extension\\FlashMessageExtension',
            'sonata.core.form_type' => 'standard',
            'sonata.core.form.mapping.type' => array(

            ),
            'sonata.core.form.mapping.extension' => array(

            ),
            'sonata.intl.locale_detector.request.class' => 'Sonata\\IntlBundle\\Locale\\RequestDetector',
            'sonata.intl.locale_detector.session.class' => 'Sonata\\IntlBundle\\Locale\\SessionDetector',
            'sonata.intl.templating.helper.locale.class' => 'Sonata\\IntlBundle\\Templating\\Helper\\LocaleHelper',
            'sonata.intl.templating.helper.number.class' => 'Sonata\\IntlBundle\\Templating\\Helper\\NumberHelper',
            'sonata.intl.templating.helper.datetime.class' => 'Sonata\\IntlBundle\\Templating\\Helper\\DateTimeHelper',
            'sonata.intl.timezone_detector.chain.class' => 'Sonata\\IntlBundle\\Timezone\\ChainTimezoneDetector',
            'sonata.intl.timezone_detector.user.class' => 'Sonata\\IntlBundle\\Timezone\\UserBasedTimezoneDetector',
            'sonata.intl.timezone_detector.locale.class' => 'Sonata\\IntlBundle\\Timezone\\LocaleBasedTimezoneDetector',
            'sonata.intl.twig.helper.locale.class' => 'Sonata\\IntlBundle\\Twig\\Extension\\LocaleExtension',
            'sonata.intl.twig.helper.number.class' => 'Sonata\\IntlBundle\\Twig\\Extension\\NumberExtension',
            'sonata.intl.twig.helper.datetime.class' => 'Sonata\\IntlBundle\\Twig\\Extension\\DateTimeExtension',
            'sonata_intl.timezone.detectors' => array(
                0 => 'sonata.intl.timezone_detector.user',
                1 => 'sonata.intl.timezone_detector.locale',
            ),
            'sonata.formatter.text.markdown.class' => 'Sonata\\FormatterBundle\\Formatter\\MarkdownFormatter',
            'sonata.formatter.text.text.class' => 'Sonata\\FormatterBundle\\Formatter\\TextFormatter',
            'sonata.formatter.text.raw.class' => 'Sonata\\FormatterBundle\\Formatter\\RawFormatter',
            'sonata.formatter.text.twigengine.class' => 'Sonata\\FormatterBundle\\Formatter\\TwigFormatter',
            'sonata.formatter.block.formatter.class' => 'Sonata\\FormatterBundle\\Block\\FormatterBlockService',
            'sonata.formatter.ckeditor.extension.class' => 'Sonata\\FormatterBundle\\Admin\\CkeditorAdminExtension',
            'sonata.formatter.ckeditor.configuration.templates' => array(
                'browser' => 'SonataFormatterBundle:Ckeditor:browser.html.twig',
                'upload' => 'SonataFormatterBundle:Ckeditor:upload.html.twig',
            ),
            'sonata.block.service.container.class' => 'Sonata\\BlockBundle\\Block\\Service\\ContainerBlockService',
            'sonata.block.service.empty.class' => 'Sonata\\BlockBundle\\Block\\Service\\EmptyBlockService',
            'sonata.block.service.text.class' => 'Sonata\\BlockBundle\\Block\\Service\\TextBlockService',
            'sonata.block.service.rss.class' => 'Sonata\\BlockBundle\\Block\\Service\\RssBlockService',
            'sonata.block.service.menu.class' => 'Sonata\\BlockBundle\\Block\\Service\\MenuBlockService',
            'sonata.block.service.template.class' => 'Sonata\\BlockBundle\\Block\\Service\\TemplateBlockService',
            'sonata.block.exception.strategy.manager.class' => 'Sonata\\BlockBundle\\Exception\\Strategy\\StrategyManager',
            'sonata.block.container.types' => array(
                0 => 'sonata.block.service.container',
                1 => 'sonata.page.block.container',
                2 => 'sonata.dashboard.block.container',
                3 => 'cmf.block.container',
                4 => 'cmf.block.slideshow',
            ),
            'sonata_block.blocks' => array(
                'sonata.admin.block.stats' => array(
                    'contexts' => array(
                        0 => 'admin',
                    ),
                    'templates' => array(

                    ),
                    'cache' => 'sonata.cache.noop',
                    'settings' => array(

                    ),
                ),
                'sonata.admin.block.admin_list' => array(
                    'contexts' => array(
                        0 => 'admin',
                    ),
                    'templates' => array(

                    ),
                    'cache' => 'sonata.cache.noop',
                    'settings' => array(

                    ),
                ),
                'sonata.block.service.text' => array(
                    'contexts' => array(
                        0 => 'sonata_page_bundle',
                    ),
                    'templates' => array(

                    ),
                    'cache' => 'sonata.cache.noop',
                    'settings' => array(

                    ),
                ),
                'sonata.block.service.container' => array(
                    'contexts' => array(
                        0 => 'sonata_page_bundle',
                    ),
                    'templates' => array(

                    ),
                    'cache' => 'sonata.cache.noop',
                    'settings' => array(

                    ),
                ),
                'sonata.block.service.rss' => array(
                    'contexts' => array(
                        0 => 'sonata_page_bundle',
                    ),
                    'templates' => array(

                    ),
                    'cache' => 'sonata.cache.noop',
                    'settings' => array(

                    ),
                ),
                'sonata.block.service.menu' => array(
                    'contexts' => array(
                        0 => 'sonata_page_bundle',
                    ),
                    'templates' => array(

                    ),
                    'cache' => 'sonata.cache.noop',
                    'settings' => array(

                    ),
                ),
                'sonata.block.service.template' => array(
                    'contexts' => array(
                        0 => 'sonata_page_bundle',
                    ),
                    'templates' => array(

                    ),
                    'cache' => 'sonata.cache.noop',
                    'settings' => array(

                    ),
                ),
                'sonata.page.block.container' => array(
                    'contexts' => array(
                        0 => 'sonata_page_bundle',
                    ),
                    'templates' => array(

                    ),
                    'cache' => 'sonata.cache.noop',
                    'settings' => array(

                    ),
                ),
                'sonata.page.block.children_pages' => array(
                    'contexts' => array(
                        0 => 'sonata_page_bundle',
                    ),
                    'templates' => array(

                    ),
                    'cache' => 'sonata.cache.noop',
                    'settings' => array(

                    ),
                ),
                'sonata.page.block.ajax' => array(
                    'contexts' => array(
                        0 => 'sonata_page_bundle',
                    ),
                    'templates' => array(

                    ),
                    'cache' => 'sonata.cache.noop',
                    'settings' => array(

                    ),
                ),
                'sonata.page.block.context_manager' => array(
                    'contexts' => array(
                        0 => 'sonata_page_bundle',
                    ),
                    'templates' => array(

                    ),
                    'cache' => 'sonata.cache.noop',
                    'settings' => array(

                    ),
                ),
                'sonata.page.block.breadcrumb' => array(
                    'contexts' => array(
                        0 => 'sonata_page_bundle',
                    ),
                    'templates' => array(

                    ),
                    'cache' => 'sonata.cache.noop',
                    'settings' => array(

                    ),
                ),
                'sonata.page.block.shared_block' => array(
                    'contexts' => array(
                        0 => 'sonata_page_bundle',
                    ),
                    'templates' => array(

                    ),
                    'cache' => 'sonata.cache.noop',
                    'settings' => array(

                    ),
                ),
                'sonata.page.block.pagelist' => array(
                    'contexts' => array(
                        0 => 'sonata_page_bundle',
                    ),
                    'templates' => array(

                    ),
                    'cache' => 'sonata.cache.noop',
                    'settings' => array(

                    ),
                ),
                'sonata.media.block.media' => array(
                    'contexts' => array(
                        0 => 'sonata_page_bundle',
                    ),
                    'templates' => array(

                    ),
                    'cache' => 'sonata.cache.noop',
                    'settings' => array(

                    ),
                ),
                'sonata.media.block.gallery' => array(
                    'contexts' => array(
                        0 => 'sonata_page_bundle',
                    ),
                    'templates' => array(

                    ),
                    'cache' => 'sonata.cache.noop',
                    'settings' => array(

                    ),
                ),
                'sonata.media.block.feature_media' => array(
                    'contexts' => array(
                        0 => 'sonata_page_bundle',
                    ),
                    'templates' => array(

                    ),
                    'cache' => 'sonata.cache.noop',
                    'settings' => array(

                    ),
                ),
                'sonata.media.block.gallery_list' => array(
                    'contexts' => array(
                        0 => 'sonata_page_bundle',
                    ),
                    'templates' => array(

                    ),
                    'cache' => 'sonata.cache.noop',
                    'settings' => array(

                    ),
                ),
                'sonata.user.block.account' => array(
                    'cache' => 'sonata.page.cache.js_async',
                    'contexts' => array(
                        0 => 'user',
                        1 => 'sonata_page_bundle',
                    ),
                    'templates' => array(

                    ),
                    'settings' => array(

                    ),
                ),
                'sonata.user.block.menu' => array(
                    'contexts' => array(
                        0 => 'user',
                        1 => 'sonata_page_bundle',
                    ),
                    'templates' => array(

                    ),
                    'cache' => 'sonata.cache.noop',
                    'settings' => array(

                    ),
                ),
                'sonata.user.block.breadcrumb_index' => array(
                    'contexts' => array(
                        0 => 'sonata_page_bundle',
                    ),
                    'templates' => array(

                    ),
                    'cache' => 'sonata.cache.noop',
                    'settings' => array(

                    ),
                ),
                'sonata.user.block.breadcrumb_profile' => array(
                    'contexts' => array(
                        0 => 'sonata_page_bundle',
                    ),
                    'templates' => array(

                    ),
                    'cache' => 'sonata.cache.noop',
                    'settings' => array(

                    ),
                ),
                'sonata.seo.block.email.share_button' => array(
                    'contexts' => array(
                        0 => 'sonata_page_bundle',
                    ),
                    'templates' => array(

                    ),
                    'cache' => 'sonata.cache.noop',
                    'settings' => array(

                    ),
                ),
                'sonata.seo.block.facebook.like_box' => array(
                    'contexts' => array(
                        0 => 'sonata_page_bundle',
                    ),
                    'templates' => array(

                    ),
                    'cache' => 'sonata.cache.noop',
                    'settings' => array(

                    ),
                ),
                'sonata.seo.block.facebook.like_button' => array(
                    'contexts' => array(
                        0 => 'sonata_page_bundle',
                    ),
                    'templates' => array(

                    ),
                    'cache' => 'sonata.cache.noop',
                    'settings' => array(

                    ),
                ),
                'sonata.seo.block.facebook.send_button' => array(
                    'contexts' => array(
                        0 => 'sonata_page_bundle',
                    ),
                    'templates' => array(

                    ),
                    'cache' => 'sonata.cache.noop',
                    'settings' => array(

                    ),
                ),
                'sonata.seo.block.facebook.share_button' => array(
                    'contexts' => array(
                        0 => 'sonata_page_bundle',
                    ),
                    'templates' => array(

                    ),
                    'cache' => 'sonata.cache.noop',
                    'settings' => array(

                    ),
                ),
                'sonata.seo.block.pinterest.pin_button' => array(
                    'contexts' => array(
                        0 => 'sonata_page_bundle',
                    ),
                    'templates' => array(

                    ),
                    'cache' => 'sonata.cache.noop',
                    'settings' => array(

                    ),
                ),
                'sonata.seo.block.twitter.share_button' => array(
                    'contexts' => array(
                        0 => 'sonata_page_bundle',
                    ),
                    'templates' => array(

                    ),
                    'cache' => 'sonata.cache.noop',
                    'settings' => array(

                    ),
                ),
                'sonata.seo.block.twitter.follow_button' => array(
                    'contexts' => array(
                        0 => 'sonata_page_bundle',
                    ),
                    'templates' => array(

                    ),
                    'cache' => 'sonata.cache.noop',
                    'settings' => array(

                    ),
                ),
                'sonata.seo.block.twitter.hashtag_button' => array(
                    'contexts' => array(
                        0 => 'sonata_page_bundle',
                    ),
                    'templates' => array(

                    ),
                    'cache' => 'sonata.cache.noop',
                    'settings' => array(

                    ),
                ),
                'sonata.seo.block.twitter.mention_button' => array(
                    'contexts' => array(
                        0 => 'sonata_page_bundle',
                    ),
                    'templates' => array(

                    ),
                    'cache' => 'sonata.cache.noop',
                    'settings' => array(

                    ),
                ),
                'sonata.seo.block.twitter.embed' => array(
                    'contexts' => array(
                        0 => 'sonata_page_bundle',
                    ),
                    'templates' => array(

                    ),
                    'cache' => 'sonata.cache.noop',
                    'settings' => array(

                    ),
                ),
                'sonata.formatter.block.formatter' => array(
                    'contexts' => array(
                        0 => 'sonata_page_bundle',
                    ),
                    'templates' => array(

                    ),
                    'cache' => 'sonata.cache.noop',
                    'settings' => array(

                    ),
                ),
                'sonata.seo.block.breadcrumb.homepage' => array(
                    'contexts' => array(
                        0 => 'sonata_page_bundle',
                    ),
                    'templates' => array(

                    ),
                    'cache' => 'sonata.cache.noop',
                    'settings' => array(

                    ),
                ),
                'sonata.admin.block.search_result' => array(
                    'contexts' => array(
                        0 => 'admin',
                    ),
                    'templates' => array(

                    ),
                    'cache' => 'sonata.cache.noop',
                    'settings' => array(

                    ),
                ),
            ),
            'sonata_block.blocks_by_class' => array(

            ),
            'sonata_block.cache_blocks' => array(
                'by_type' => array(
                    'sonata.admin.block.stats' => 'sonata.cache.noop',
                    'sonata.admin.block.admin_list' => 'sonata.cache.noop',
                    'sonata.block.service.text' => 'sonata.cache.noop',
                    'sonata.block.service.container' => 'sonata.cache.noop',
                    'sonata.block.service.rss' => 'sonata.cache.noop',
                    'sonata.block.service.menu' => 'sonata.cache.noop',
                    'sonata.block.service.template' => 'sonata.cache.noop',
                    'sonata.page.block.container' => 'sonata.cache.noop',
                    'sonata.page.block.children_pages' => 'sonata.cache.noop',
                    'sonata.page.block.ajax' => 'sonata.cache.noop',
                    'sonata.page.block.context_manager' => 'sonata.cache.noop',
                    'sonata.page.block.breadcrumb' => 'sonata.cache.noop',
                    'sonata.page.block.shared_block' => 'sonata.cache.noop',
                    'sonata.page.block.pagelist' => 'sonata.cache.noop',
                    'sonata.media.block.media' => 'sonata.cache.noop',
                    'sonata.media.block.gallery' => 'sonata.cache.noop',
                    'sonata.media.block.feature_media' => 'sonata.cache.noop',
                    'sonata.media.block.gallery_list' => 'sonata.cache.noop',
                    'sonata.user.block.account' => 'sonata.page.cache.js_async',
                    'sonata.user.block.menu' => 'sonata.cache.noop',
                    'sonata.user.block.breadcrumb_index' => 'sonata.cache.noop',
                    'sonata.user.block.breadcrumb_profile' => 'sonata.cache.noop',
                    'sonata.seo.block.email.share_button' => 'sonata.cache.noop',
                    'sonata.seo.block.facebook.like_box' => 'sonata.cache.noop',
                    'sonata.seo.block.facebook.like_button' => 'sonata.cache.noop',
                    'sonata.seo.block.facebook.send_button' => 'sonata.cache.noop',
                    'sonata.seo.block.facebook.share_button' => 'sonata.cache.noop',
                    'sonata.seo.block.pinterest.pin_button' => 'sonata.cache.noop',
                    'sonata.seo.block.twitter.share_button' => 'sonata.cache.noop',
                    'sonata.seo.block.twitter.follow_button' => 'sonata.cache.noop',
                    'sonata.seo.block.twitter.hashtag_button' => 'sonata.cache.noop',
                    'sonata.seo.block.twitter.mention_button' => 'sonata.cache.noop',
                    'sonata.seo.block.twitter.embed' => 'sonata.cache.noop',
                    'sonata.formatter.block.formatter' => 'sonata.cache.noop',
                    'sonata.seo.block.breadcrumb.homepage' => 'sonata.cache.noop',
                    'sonata.admin.block.search_result' => 'sonata.cache.noop',
                ),
            ),
            'sonata.classification.manager.category.class' => 'Sonata\\ClassificationBundle\\Entity\\CategoryManager',
            'sonata.classification.manager.tag.class' => 'Sonata\\ClassificationBundle\\Entity\\TagManager',
            'sonata.classification.manager.collection.class' => 'Sonata\\ClassificationBundle\\Entity\\CollectionManager',
            'sonata.classification.manager.context.class' => 'Sonata\\ClassificationBundle\\Entity\\ContextManager',
            'sonata.classification.admin.groupname' => 'sonata_classification',
            'sonata.classification.admin.groupicon' => '<i class=\'fa fa-tags\'></i>',
            'sonata.classification.admin.tag.entity' => 'AppBundle\\Entity\\Classification\\Tag',
            'sonata.classification.admin.category.entity' => 'AppBundle\\Entity\\Classification\\Category',
            'sonata.classification.admin.collection.entity' => 'AppBundle\\Entity\\Classification\\Collection',
            'sonata.classification.admin.context.entity' => 'AppBundle\\Entity\\Classification\\Context',
            'sonata.classification.manager.tag.entity' => 'AppBundle\\Entity\\Classification\\Tag',
            'sonata.classification.manager.category.entity' => 'AppBundle\\Entity\\Classification\\Category',
            'sonata.classification.manager.collection.entity' => 'AppBundle\\Entity\\Classification\\Collection',
            'sonata.classification.manager.context.entity' => 'AppBundle\\Entity\\Classification\\Context',
            'sonata.classification.admin.category.class' => 'Sonata\\ClassificationBundle\\Admin\\CategoryAdmin',
            'sonata.classification.admin.category.controller' => 'SonataClassificationBundle:CategoryAdmin',
            'sonata.classification.admin.category.translation_domain' => 'SonataClassificationBundle',
            'sonata.classification.admin.tag.class' => 'Sonata\\ClassificationBundle\\Admin\\TagAdmin',
            'sonata.classification.admin.tag.controller' => 'SonataAdminBundle:CRUD',
            'sonata.classification.admin.tag.translation_domain' => 'SonataClassificationBundle',
            'sonata.classification.admin.collection.class' => 'Sonata\\ClassificationBundle\\Admin\\CollectionAdmin',
            'sonata.classification.admin.collection.controller' => 'SonataAdminBundle:CRUD',
            'sonata.classification.admin.collection.translation_domain' => 'SonataClassificationBundle',
            'sonata.classification.admin.context.class' => 'Sonata\\ClassificationBundle\\Admin\\ContextAdmin',
            'sonata.classification.admin.context.controller' => 'SonataAdminBundle:CRUD',
            'sonata.classification.admin.context.translation_domain' => 'SonataClassificationBundle',
            'mopa_bootstrap.bootstrap.install_path' => 'Resources/public/bootstrap',
            'mopa_bootstrap.twig.extension.form.class' => 'Mopa\\Bundle\\BootstrapBundle\\Twig\\FormExtension',
            'mopa_bootstrap.twig.extension.icon.class' => 'Mopa\\Bundle\\BootstrapBundle\\Twig\\IconExtension',
            'mopa_bootstrap.twig.extension.flash.class' => 'Mopa\\Bundle\\BootstrapBundle\\Twig\\FlashExtension',
            'mopa_bootstrap.form.type_extension.embed_form.class' => 'Mopa\\Bundle\\BootstrapBundle\\Form\\Extension\\EmbedFormExtension',
            'mopa_bootstrap.form.type_extension.static_text.class' => 'Mopa\\Bundle\\BootstrapBundle\\Form\\Extension\\StaticTextExtension',
            'mopa_bootstrap.form.type_extension.offset_button.class' => 'Mopa\\Bundle\\BootstrapBundle\\Form\\Extension\\OffsetButtonExtension',
            'mopa_bootstrap.form.type_extension.button.class' => 'Mopa\\Bundle\\BootstrapBundle\\Form\\Extension\\IconButtonExtension',
            'mopa_bootstrap.form.type_extension.help.class' => 'Mopa\\Bundle\\BootstrapBundle\\Form\\Extension\\HelpFormTypeExtension',
            'mopa_bootstrap.form.type_extension.legend.class' => 'Mopa\\Bundle\\BootstrapBundle\\Form\\Extension\\LegendFormTypeExtension',
            'mopa_bootstrap.form.type_extension.error.class' => 'Mopa\\Bundle\\BootstrapBundle\\Form\\Extension\\ErrorTypeFormTypeExtension',
            'mopa_bootstrap.form.type_extension.widget.class' => 'Mopa\\Bundle\\BootstrapBundle\\Form\\Extension\\WidgetFormTypeExtension',
            'mopa_bootstrap.form.type_extension.layout.class' => 'Mopa\\Bundle\\BootstrapBundle\\Form\\Extension\\LayoutFormTypeExtension',
            'mopa_bootstrap.form.type_extension.widget_collection.class' => 'Mopa\\Bundle\\BootstrapBundle\\Form\\Extension\\WidgetCollectionFormTypeExtension',
            'mopa_bootstrap.form.type_extension.date.class' => 'Mopa\\Bundle\\BootstrapBundle\\Form\\Extension\\DateTypeExtension',
            'mopa_bootstrap.form.type_extension.datetime.class' => 'Mopa\\Bundle\\BootstrapBundle\\Form\\Extension\\DatetimeTypeExtension',
            'mopa_bootstrap.form.type_extension.time.class' => 'Mopa\\Bundle\\BootstrapBundle\\Form\\Extension\\TimeTypeExtension',
            'mopa_bootstrap.form.type_extension.tabbed.class' => 'Mopa\\Bundle\\BootstrapBundle\\Form\\Extension\\TabbedFormTypeExtension',
            'mopa_bootstrap.form.type.tab.class' => 'Mopa\\Bundle\\BootstrapBundle\\Form\\Type\\TabType',
            'mopa_bootstrap.form.type.form_actions.class' => 'Mopa\\Bundle\\BootstrapBundle\\Form\\Type\\FormActionsType',
            'mopa_bootstrap.form.show_legend' => false,
            'mopa_bootstrap.form.render_optional_text' => false,
            'mopa_bootstrap.form.render_required_asterisk' => true,
            'mopa_bootstrap.form.allow_legacy' => false,
            'mopa_bootstrap.form.templating' => '@MopaBootstrap/Form/fields.html.twig',
            'mopa_bootstrap.form.layout' => 'horizontal',
            'mopa_bootstrap.form.horizontal_label_class' => 'col-sm-3',
            'mopa_bootstrap.form.horizontal_label_div_class' => NULL,
            'mopa_bootstrap.form.horizontal_label_offset_class' => 'col-sm-offset-3',
            'mopa_bootstrap.form.horizontal_input_wrapper_class' => 'col-sm-9',
            'mopa_bootstrap.form.date_wrapper_class.year' => 'col-xs-4',
            'mopa_bootstrap.form.date_wrapper_class.month' => 'col-xs-4',
            'mopa_bootstrap.form.date_wrapper_class.day' => 'col-xs-4',
            'mopa_bootstrap.form.render_fieldset' => true,
            'mopa_bootstrap.form.render_collection_item' => true,
            'mopa_bootstrap.form.show_child_legend' => false,
            'mopa_bootstrap.form.legend_tag' => 'legend',
            'mopa_bootstrap.form.checkbox_label' => 'both',
            'mopa_bootstrap.form.error_type' => NULL,
            'mopa_bootstrap.form.tabs.class' => 'nav nav-tabs',
            'mopa_bootstrap.form.help_widget.popover' => array(
                'title' => NULL,
                'content' => NULL,
                'trigger' => 'hover',
                'toggle' => 'popover',
                'placement' => 'right',
                'selector' => NULL,
            ),
            'mopa_bootstrap.form.help_label.tooltip' => array(
                'title' => NULL,
                'text' => NULL,
                'icon' => 'info-sign',
                'placement' => 'top',
            ),
            'mopa_bootstrap.form.help_label.popover' => array(
                'title' => NULL,
                'content' => NULL,
                'text' => NULL,
                'icon' => 'info-sign',
                'placement' => 'top',
            ),
            'mopa_bootstrap.form.help_block.tooltip' => array(
                'title' => NULL,
                'text' => NULL,
                'icon' => 'info-sign',
                'placement' => 'top',
            ),
            'mopa_bootstrap.form.help_block.popover' => array(
                'title' => NULL,
                'content' => NULL,
                'text' => NULL,
                'icon' => 'info-sign',
                'placement' => 'top',
            ),
            'mopa_bootstrap.form.collection.widget_remove_btn' => array(
                'attr' => array(
                    'class' => 'btn btn-default',
                ),
                'wrapper_div' => array(
                    'class' => 'form-group',
                ),
                'horizontal_wrapper_div' => array(
                    'class' => 'col-sm-3 col-sm-offset-3',
                ),
                'label' => 'remove_item',
                'translation_domain' => NULL,
                'icon' => NULL,
                'icon_inverted' => false,
            ),
            'mopa_bootstrap.form.collection.widget_add_btn' => array(
                'attr' => array(
                    'class' => 'btn btn-default',
                ),
                'label' => 'add_item',
                'translation_domain' => NULL,
                'icon' => NULL,
                'icon_inverted' => false,
            ),
            'mopa_bootstrap.icons.icon_set' => 'glyphicons',
            'mopa_bootstrap.icons.shortcut' => 'icon',
            'fos_js_routing.extractor.class' => 'FOS\\JsRoutingBundle\\Extractor\\ExposedRoutesExtractor',
            'fos_js_routing.controller.class' => 'FOS\\JsRoutingBundle\\Controller\\Controller',
            'fos_js_routing.cache_control' => array(
                'enabled' => false,
            ),
            'lexik_form_filter.query_builder_updater.class' => 'Lexik\\Bundle\\FormFilterBundle\\Filter\\FilterBuilderUpdater',
            'lexik_form_filter.form_data_extractor.class' => 'Lexik\\Bundle\\FormFilterBundle\\Filter\\DataExtractor\\FormDataExtractor',
            'lexik_form_filter.data_extraction_method.default.class' => 'Lexik\\Bundle\\FormFilterBundle\\Filter\\DataExtractor\\Method\\DefaultExtractionMethod',
            'lexik_form_filter.data_extraction_method.text.class' => 'Lexik\\Bundle\\FormFilterBundle\\Filter\\DataExtractor\\Method\\TextExtractionMethod',
            'lexik_form_filter.data_extraction_method.key_values.class' => 'Lexik\\Bundle\\FormFilterBundle\\Filter\\DataExtractor\\Method\\ValueKeysExtractionMethod',
            'lexik_form_filter.filter_prepare.class' => 'Lexik\\Bundle\\FormFilterBundle\\Event\\Listener\\PrepareListener',
            'lexik_form_filter.type.filter_text.class' => 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\Type\\TextFilterType',
            'lexik_form_filter.type.filter_number.class' => 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\Type\\NumberFilterType',
            'lexik_form_filter.type.filter_number_range.class' => 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\Type\\NumberRangeFilterType',
            'lexik_form_filter.type.filter_checkbox.class' => 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\Type\\CheckboxFilterType',
            'lexik_form_filter.type.filter_boolean.class' => 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\Type\\BooleanFilterType',
            'lexik_form_filter.type.filter_choice.class' => 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\Type\\ChoiceFilterType',
            'lexik_form_filter.type.filter_date.class' => 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\Type\\DateFilterType',
            'lexik_form_filter.type.filter_date_range.class' => 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\Type\\DateRangeFilterType',
            'lexik_form_filter.type.filter_datetime.class' => 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\Type\\DateTimeFilterType',
            'lexik_form_filter.type.filter_datetime_range.class' => 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\Type\\DateTimeRangeFilterType',
            'lexik_form_filter.type.filter_collection_adapter.class' => 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\Type\\CollectionAdapterFilterType',
            'lexik_form_filter.type.filter_sharedable.class' => 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\Type\\SharedableFilterType',
            'lexik_form_filter.type_extension.filter_extension.class' => 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\FilterTypeExtension',
            'lexik_form_filter.get_filter.doctrine_orm.class' => 'Lexik\\Bundle\\FormFilterBundle\\Event\\Subscriber\\DoctrineORMSubscriber',
            'lexik_form_filter.apply_filter.doctrine_orm.class' => 'Lexik\\Bundle\\FormFilterBundle\\Event\\Listener\\DoctrineApplyFilterListener',
            'lexik_form_filter.type.filter_entity.class' => 'Lexik\\Bundle\\FormFilterBundle\\Filter\\Form\\Type\\EntityFilterType',
            'lexik_form_filter.where_method' => 'and',
            'lexik_form_filter.text.condition_pattern' => 1,
            'liip_imagine.filter.configuration.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\FilterConfiguration',
            'liip_imagine.filter.manager.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\FilterManager',
            'liip_imagine.data.manager.class' => 'Liip\\ImagineBundle\\Imagine\\Data\\DataManager',
            'liip_imagine.cache.manager.class' => 'Liip\\ImagineBundle\\Imagine\\Cache\\CacheManager',
            'liip_imagine.cache.signer.class' => 'Liip\\ImagineBundle\\Imagine\\Cache\\Signer',
            'liip_imagine.binary.mime_type_guesser.class' => 'Liip\\ImagineBundle\\Binary\\SimpleMimeTypeGuesser',
            'liip_imagine.controller.class' => 'Liip\\ImagineBundle\\Controller\\ImagineController',
            'liip_imagine.twig.extension.class' => 'Liip\\ImagineBundle\\Templating\\ImagineExtension',
            'liip_imagine.templating.helper.class' => 'Liip\\ImagineBundle\\Templating\\Helper\\ImagineHelper',
            'liip_imagine.gd.class' => 'Imagine\\Gd\\Imagine',
            'liip_imagine.imagick.class' => 'Imagine\\Imagick\\Imagine',
            'liip_imagine.gmagick.class' => 'Imagine\\Gmagick\\Imagine',
            'liip_imagine.filter.loader.relative_resize.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\RelativeResizeFilterLoader',
            'liip_imagine.filter.loader.resize.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\ResizeFilterLoader',
            'liip_imagine.filter.loader.thumbnail.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\ThumbnailFilterLoader',
            'liip_imagine.filter.loader.crop.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\CropFilterLoader',
            'liip_imagine.filter.loader.grayscale.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\GrayscaleFilterLoader',
            'liip_imagine.filter.loader.paste.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\PasteFilterLoader',
            'liip_imagine.filter.loader.watermark.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\WatermarkFilterLoader',
            'liip_imagine.filter.loader.strip.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\StripFilterLoader',
            'liip_imagine.filter.loader.background.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\BackgroundFilterLoader',
            'liip_imagine.filter.loader.scale.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\ScaleFilterLoader',
            'liip_imagine.filter.loader.upscale.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\UpscaleFilterLoader',
            'liip_imagine.filter.loader.downscale.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\DownscaleFilterLoader',
            'liip_imagine.filter.loader.auto_rotate.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\AutoRotateFilterLoader',
            'liip_imagine.filter.loader.rotate.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\RotateFilterLoader',
            'liip_imagine.filter.loader.flip.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\FlipFilterLoader',
            'liip_imagine.filter.loader.interlace.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\InterlaceFilterLoader',
            'liip_imagine.filter.loader.resample.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\Loader\\ResampleFilterLoader',
            'liip_imagine.binary.loader.filesystem.class' => 'Liip\\ImagineBundle\\Binary\\Loader\\FileSystemLoader',
            'liip_imagine.binary.loader.stream.class' => 'Liip\\ImagineBundle\\Binary\\Loader\\StreamLoader',
            'liip_imagine.binary.loader.flysystem.class' => 'Liip\\ImagineBundle\\Binary\\Loader\\FlysystemLoader',
            'liip_imagine.binary.loader.chain.class' => 'Liip\\ImagineBundle\\Binary\\Loader\\ChainLoader',
            'liip_imagine.binary.locator.filesystem.class' => 'Liip\\ImagineBundle\\Binary\\Locator\\FileSystemLocator',
            'liip_imagine.binary.locator.filesystem_insecure.class' => 'Liip\\ImagineBundle\\Binary\\Locator\\FileSystemInsecureLocator',
            'liip_imagine.cache.resolver.web_path.class' => 'Liip\\ImagineBundle\\Imagine\\Cache\\Resolver\\WebPathResolver',
            'liip_imagine.cache.resolver.no_cache_web_path.class' => 'Liip\\ImagineBundle\\Imagine\\Cache\\Resolver\\NoCacheWebPathResolver',
            'liip_imagine.cache.resolver.aws_s3.class' => 'Liip\\ImagineBundle\\Imagine\\Cache\\Resolver\\AwsS3Resolver',
            'liip_imagine.cache.resolver.cache.class' => 'Liip\\ImagineBundle\\Imagine\\Cache\\Resolver\\CacheResolver',
            'liip_imagine.cache.resolver.flysystem.class' => 'Liip\\ImagineBundle\\Imagine\\Cache\\Resolver\\FlysystemResolver',
            'liip_imagine.cache.resolver.proxy.class' => 'Liip\\ImagineBundle\\Imagine\\Cache\\Resolver\\ProxyResolver',
            'liip_imagine.form.type.image.class' => 'Liip\\ImagineBundle\\Form\\Type\\ImageType',
            'liip_imagine.meta_data.reader.class' => 'Imagine\\Image\\Metadata\\ExifMetadataReader',
            'liip_imagine.filter.post_processor.jpegoptim.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\PostProcessor\\JpegOptimPostProcessor',
            'liip_imagine.jpegoptim.binary' => '/usr/bin/jpegoptim',
            'liip_imagine.jpegoptim.stripall' => true,
            'liip_imagine.jpegoptim.max' => NULL,
            'liip_imagine.jpegoptim.progressive' => true,
            'liip_imagine.jpegoptim.tempdir' => NULL,
            'liip_imagine.filter.post_processor.optipng.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\PostProcessor\\OptiPngPostProcessor',
            'liip_imagine.optipng.binary' => '/usr/bin/optipng',
            'liip_imagine.optipng.level' => 7,
            'liip_imagine.optipng.stripall' => true,
            'liip_imagine.optipng.tempdir' => NULL,
            'liip_imagine.filter.post_processor.pngquant.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\PostProcessor\\PngquantPostProcessor',
            'liip_imagine.pngquant.binary' => '/usr/bin/pngquant',
            'liip_imagine.filter.post_processor.mozjpeg.class' => 'Liip\\ImagineBundle\\Imagine\\Filter\\PostProcessor\\MozJpegPostProcessor',
            'liip_imagine.mozjpeg.binary' => '/opt/mozjpeg/bin/cjpeg',
            'liip_imagine.cache.resolver.default' => 'web_path',
            'liip_imagine.default_image' => NULL,
            'liip_imagine.filter_sets' => array(
                'thumbnail_50x40' => array(
                    'filters' => array(
                        'relative_resize' => array(
                            'widen' => 50,
                        ),
                    ),
                    'quality' => 100,
                    'jpeg_quality' => NULL,
                    'png_compression_level' => NULL,
                    'png_compression_filter' => NULL,
                    'format' => NULL,
                    'animated' => false,
                    'cache' => NULL,
                    'data_loader' => NULL,
                    'default_image' => NULL,
                    'post_processors' => array(

                    ),
                ),
                'thumbnail_90x60' => array(
                    'filters' => array(
                        'thumbnail' => array(
                            'size' => array(
                                0 => 90,
                                1 => 60,
                            ),
                            'mode' => 'outbound',
                        ),
                    ),
                    'quality' => 100,
                    'jpeg_quality' => NULL,
                    'png_compression_level' => NULL,
                    'png_compression_filter' => NULL,
                    'format' => NULL,
                    'animated' => false,
                    'cache' => NULL,
                    'data_loader' => NULL,
                    'default_image' => NULL,
                    'post_processors' => array(

                    ),
                ),
                'thumbnail_200x200' => array(
                    'filters' => array(
                        'relative_resize' => array(
                            'widen' => 200,
                        ),
                    ),
                    'quality' => 100,
                    'jpeg_quality' => NULL,
                    'png_compression_level' => NULL,
                    'png_compression_filter' => NULL,
                    'format' => NULL,
                    'animated' => false,
                    'cache' => NULL,
                    'data_loader' => NULL,
                    'default_image' => NULL,
                    'post_processors' => array(

                    ),
                ),
                'thumbnail_262x255' => array(
                    'filters' => array(
                        'thumbnail' => array(
                            'size' => array(
                                0 => 265,
                                1 => 255,
                            ),
                            'mode' => 'inset',
                        ),
                    ),
                    'quality' => 100,
                    'jpeg_quality' => NULL,
                    'png_compression_level' => NULL,
                    'png_compression_filter' => NULL,
                    'format' => NULL,
                    'animated' => false,
                    'cache' => NULL,
                    'data_loader' => NULL,
                    'default_image' => NULL,
                    'post_processors' => array(

                    ),
                ),
                'thumbnail_310x300' => array(
                    'filters' => array(
                        'relative_resize' => array(
                            'widen' => 310,
                        ),
                    ),
                    'quality' => 100,
                    'jpeg_quality' => NULL,
                    'png_compression_level' => NULL,
                    'png_compression_filter' => NULL,
                    'format' => NULL,
                    'animated' => false,
                    'cache' => NULL,
                    'data_loader' => NULL,
                    'default_image' => NULL,
                    'post_processors' => array(

                    ),
                ),
                'thumbnail_610x600' => array(
                    'filters' => array(
                        'relative_resize' => array(
                            'widen' => 610,
                        ),
                    ),
                    'quality' => 100,
                    'jpeg_quality' => NULL,
                    'png_compression_level' => NULL,
                    'png_compression_filter' => NULL,
                    'format' => NULL,
                    'animated' => false,
                    'cache' => NULL,
                    'data_loader' => NULL,
                    'default_image' => NULL,
                    'post_processors' => array(

                    ),
                ),
            ),
            'liip_imagine.binary.loader.default' => 'filesystem',
            'liip_imagine.controller.filter_action' => 'liip_imagine.controller:filterAction',
            'liip_imagine.controller.filter_runtime_action' => 'liip_imagine.controller:filterRuntimeAction',
            'liip_imagine.controller.redirect_response_code' => 301,
            'knp_gaufrette.filesystem_map.class' => 'Knp\\Bundle\\GaufretteBundle\\FilesystemMap',
            'white_october_pagerfanta.default_view' => 'default',
            'white_october_pagerfanta.view_factory.class' => 'Pagerfanta\\View\\ViewFactory',
            'gregwar_captcha.captcha_type.class' => 'Gregwar\\CaptchaBundle\\Type\\CaptchaType',
            'gregwar_captcha.captcha_generator.class' => 'Gregwar\\CaptchaBundle\\Generator\\CaptchaGenerator',
            'gregwar_captcha.image_file_handler.class' => 'Gregwar\\CaptchaBundle\\Generator\\ImageFileHandler',
            'gregwar_captcha.captcha_builder.class' => 'Gregwar\\Captcha\\CaptchaBuilder',
            'gregwar_captcha.phrase_builder.class' => 'Gregwar\\Captcha\\PhraseBuilder',
            'gregwar_captcha.config.image_folder' => 'captcha',
            'gregwar_captcha.config.gc_freq' => 100,
            'gregwar_captcha.config.expiration' => 60,
            'gregwar_captcha.config.whitelist_key' => 'captcha_whitelist_key',
            'lexik_jwt_authentication.pass_phrase' => '1234',
            'lexik_jwt_authentication.token_ttl' => 86400,
            'lexik_jwt_authentication.user_identity_field' => 'username',
            'lexik_jwt_authentication.encoder.signature_algorithm' => 'RS256',
            'lexik_jwt_authentication.encoder.crypto_engine' => 'openssl',
            'gesdinet.jwtrefreshtoken.refresh_token.class' => 'Gesdinet\\JWTRefreshTokenBundle\\Entity\\RefreshToken',
            'gesdinet_jwt_refresh_token.ttl' => 86400,
            'gesdinet_jwt_refresh_token.ttl_update' => true,
            'gesdinet_jwt_refresh_token.security.firewall' => 'api',
            'gesdinet_jwt_refresh_token.user_provider' => NULL,
            'gesdinet.jwtrefreshtoken.entity_manager.id' => 'doctrine.orm.entity_manager',
            'web_profiler.debug_toolbar.position' => 'bottom',
            'web_profiler.debug_toolbar.intercept_redirects' => false,
            'web_profiler.debug_toolbar.mode' => 2,
            'data_collector.templates' => array(
                'data_collector.request' => array(
                    0 => 'request',
                    1 => '@WebProfiler/Collector/request.html.twig',
                ),
                'data_collector.time' => array(
                    0 => 'time',
                    1 => '@WebProfiler/Collector/time.html.twig',
                ),
                'data_collector.memory' => array(
                    0 => 'memory',
                    1 => '@WebProfiler/Collector/memory.html.twig',
                ),
                'data_collector.ajax' => array(
                    0 => 'ajax',
                    1 => '@WebProfiler/Collector/ajax.html.twig',
                ),
                'data_collector.form' => array(
                    0 => 'form',
                    1 => '@WebProfiler/Collector/form.html.twig',
                ),
                'data_collector.exception' => array(
                    0 => 'exception',
                    1 => '@WebProfiler/Collector/exception.html.twig',
                ),
                'data_collector.logger' => array(
                    0 => 'logger',
                    1 => '@WebProfiler/Collector/logger.html.twig',
                ),
                'data_collector.events' => array(
                    0 => 'events',
                    1 => '@WebProfiler/Collector/events.html.twig',
                ),
                'data_collector.router' => array(
                    0 => 'router',
                    1 => '@WebProfiler/Collector/router.html.twig',
                ),
                'data_collector.cache' => array(
                    0 => 'cache',
                    1 => '@WebProfiler/Collector/cache.html.twig',
                ),
                'data_collector.translation' => array(
                    0 => 'translation',
                    1 => '@WebProfiler/Collector/translation.html.twig',
                ),
                'data_collector.security' => array(
                    0 => 'security',
                    1 => '@Security/Collector/security.html.twig',
                ),
                'data_collector.twig' => array(
                    0 => 'twig',
                    1 => '@WebProfiler/Collector/twig.html.twig',
                ),
                'data_collector.doctrine' => array(
                    0 => 'db',
                    1 => '@Doctrine/Collector/db.html.twig',
                ),
                'swiftmailer.data_collector' => array(
                    0 => 'swiftmailer',
                    1 => '@Swiftmailer/Collector/swiftmailer.html.twig',
                ),
                'data_collector.dump' => array(
                    0 => 'dump',
                    1 => '@Debug/Profiler/dump.html.twig',
                ),
                'sonata.block.data_collector' => array(
                    0 => 'block',
                    1 => '@SonataBlock/Profiler/block.html.twig',
                ),
                'data_collector.config' => array(
                    0 => 'config',
                    1 => '@WebProfiler/Collector/config.html.twig',
                ),
            ),
            'console.command.ids' => array(
                'console.command.symfony_bundle_securitybundle_command_userpasswordencodercommand' => 'console.command.symfony_bundle_securitybundle_command_userpasswordencodercommand',
                'console.command.doctrine_bundle_doctrinecachebundle_command_containscommand' => 'doctrine_cache.contains_command',
                'console.command.doctrine_bundle_doctrinecachebundle_command_deletecommand' => 'doctrine_cache.delete_command',
                'console.command.doctrine_bundle_doctrinecachebundle_command_flushcommand' => 'doctrine_cache.flush_command',
                'console.command.doctrine_bundle_doctrinecachebundle_command_statscommand' => 'doctrine_cache.stats_command',
                'console.command.doctrine_bundle_doctrinebundle_command_createdatabasedoctrinecommand' => 'doctrine.database_create_command',
                'console.command.doctrine_bundle_doctrinebundle_command_dropdatabasedoctrinecommand' => 'doctrine.database_drop_command',
                'console.command.doctrine_bundle_doctrinebundle_command_generateentitiesdoctrinecommand' => 'doctrine.generate_entities_command',
                'console.command.doctrine_bundle_doctrinebundle_command_importmappingdoctrinecommand' => 'doctrine.mapping_import_command',
                'console.command.doctrine_bundle_doctrinebundle_command_proxy_clearmetadatacachedoctrinecommand' => 'doctrine.cache_clear_metadata_command',
                'console.command.doctrine_bundle_doctrinebundle_command_proxy_clearquerycachedoctrinecommand' => 'doctrine.cache_clear_query_cache_command',
                'console.command.doctrine_bundle_doctrinebundle_command_proxy_clearresultcachedoctrinecommand' => 'doctrine.cache_clear_result_command',
                'console.command.doctrine_bundle_doctrinebundle_command_proxy_collectionregiondoctrinecommand' => 'doctrine.cache_collection_region_command',
                'console.command.doctrine_bundle_doctrinebundle_command_proxy_convertmappingdoctrinecommand' => 'doctrine.mapping_convert_command',
                'console.command.doctrine_bundle_doctrinebundle_command_proxy_createschemadoctrinecommand' => 'doctrine.schema_create_command',
                'console.command.doctrine_bundle_doctrinebundle_command_proxy_dropschemadoctrinecommand' => 'doctrine.schema_drop_command',
                'console.command.doctrine_bundle_doctrinebundle_command_proxy_ensureproductionsettingsdoctrinecommand' => 'doctrine.ensure_production_settings_command',
                'console.command.doctrine_bundle_doctrinebundle_command_proxy_entityregioncachedoctrinecommand' => 'doctrine.clear_entity_region_command',
                'console.command.doctrine_bundle_doctrinebundle_command_proxy_importdoctrinecommand' => 'doctrine.database_import_command',
                'console.command.doctrine_bundle_doctrinebundle_command_proxy_infodoctrinecommand' => 'doctrine.mapping_info_command',
                'console.command.doctrine_bundle_doctrinebundle_command_proxy_queryregioncachedoctrinecommand' => 'doctrine.clear_query_region_command',
                'console.command.doctrine_bundle_doctrinebundle_command_proxy_rundqldoctrinecommand' => 'doctrine.query_dql_command',
                'console.command.doctrine_bundle_doctrinebundle_command_proxy_runsqldoctrinecommand' => 'doctrine.query_sql_command',
                'console.command.doctrine_bundle_doctrinebundle_command_proxy_updateschemadoctrinecommand' => 'doctrine.schema_update_command',
                'console.command.doctrine_bundle_doctrinebundle_command_proxy_validateschemacommand' => 'doctrine.schema_validate_command',
                'console.command.doctrine_bundle_migrationsbundle_command_migrationsdiffdoctrinecommand' => 'doctrine_migrations.diff_command',
                'console.command.doctrine_bundle_migrationsbundle_command_migrationsexecutedoctrinecommand' => 'doctrine_migrations.execute_command',
                'console.command.doctrine_bundle_migrationsbundle_command_migrationsgeneratedoctrinecommand' => 'doctrine_migrations.generate_command',
                'console.command.doctrine_bundle_migrationsbundle_command_migrationslatestdoctrinecommand' => 'doctrine_migrations.latest_command',
                'console.command.doctrine_bundle_migrationsbundle_command_migrationsmigratedoctrinecommand' => 'doctrine_migrations.migrate_command',
                'console.command.doctrine_bundle_migrationsbundle_command_migrationsstatusdoctrinecommand' => 'doctrine_migrations.status_command',
                'console.command.doctrine_bundle_migrationsbundle_command_migrationsversiondoctrinecommand' => 'doctrine_migrations.version_command',
                'console.command.fos_userbundle_command_activateusercommand' => 'fos_user.command.activate_user',
                'console.command.fos_userbundle_command_changepasswordcommand' => 'fos_user.command.change_password',
                'console.command.fos_userbundle_command_createusercommand' => 'fos_user.command.create_user',
                'console.command.fos_userbundle_command_deactivateusercommand' => 'fos_user.command.deactivate_user',
                'console.command.fos_userbundle_command_demoteusercommand' => 'fos_user.command.demote_user',
                'console.command.fos_userbundle_command_promoteusercommand' => 'fos_user.command.promote_user',
                'console.command.sonata_mediabundle_command_addmassmediacommand' => 'Sonata\\MediaBundle\\Command\\AddMassMediaCommand',
                'console.command.sonata_mediabundle_command_addmediacommand' => 'Sonata\\MediaBundle\\Command\\AddMediaCommand',
                'console.command.sonata_mediabundle_command_cleanmediacommand' => 'Sonata\\MediaBundle\\Command\\CleanMediaCommand',
                'console.command.sonata_mediabundle_command_fixmediacontextcommand' => 'Sonata\\MediaBundle\\Command\\FixMediaContextCommand',
                'console.command.sonata_mediabundle_command_migratetojsontypecommand' => 'Sonata\\MediaBundle\\Command\\MigrateToJsonTypeCommand',
                'console.command.sonata_mediabundle_command_refreshmetadatacommand' => 'Sonata\\MediaBundle\\Command\\RefreshMetadataCommand',
                'console.command.sonata_mediabundle_command_removethumbscommand' => 'Sonata\\MediaBundle\\Command\\RemoveThumbsCommand',
                'console.command.sonata_mediabundle_command_syncthumbscommand' => 'Sonata\\MediaBundle\\Command\\SyncThumbsCommand',
                'console.command.sonata_mediabundle_command_updatecdnstatuscommand' => 'Sonata\\MediaBundle\\Command\\UpdateCdnStatusCommand',
                'console.command.sonata_adminbundle_command_createclasscachecommand' => 'Sonata\\AdminBundle\\Command\\CreateClassCacheCommand',
                'console.command.sonata_adminbundle_command_explainadmincommand' => 'Sonata\\AdminBundle\\Command\\ExplainAdminCommand',
                'console.command.sonata_adminbundle_command_generateadmincommand' => 'Sonata\\AdminBundle\\Command\\GenerateAdminCommand',
                'console.command.sonata_adminbundle_command_generateobjectaclcommand' => 'Sonata\\AdminBundle\\Command\\GenerateObjectAclCommand',
                'console.command.sonata_adminbundle_command_listadmincommand' => 'Sonata\\AdminBundle\\Command\\ListAdminCommand',
                'console.command.sonata_adminbundle_command_setupaclcommand' => 'Sonata\\AdminBundle\\Command\\SetupAclCommand',
                'console.command.sonata_easyextendsbundle_command_dumpmappingcommand' => 'Sonata\\EasyExtendsBundle\\Command\\DumpMappingCommand',
                'console.command.sonata_easyextendsbundle_command_generatecommand' => 'Sonata\\EasyExtendsBundle\\Command\\GenerateCommand',
                'console.command.sonata_corebundle_command_sonatadumpdoctrinemetacommand' => 'Sonata\\CoreBundle\\Command\\SonataDumpDoctrineMetaCommand',
                'console.command.sonata_corebundle_command_sonatalistformmappingcommand' => 'Sonata\\CoreBundle\\Command\\SonataListFormMappingCommand',
                'console.command.sonata_blockbundle_command_debugblockscommand' => 'Sonata\\BlockBundle\\Command\\DebugBlocksCommand',
                'console.command.lexik_bundle_jwtauthenticationbundle_command_checkconfigcommand' => 'lexik_jwt_authentication.check_config_command',
                'console.command.sensiolabs_security_command_securitycheckercommand' => 'sensio_distribution.security_checker.command',
                'console.command.symfony_bundle_webserverbundle_command_serverruncommand' => 'console.command.symfony_bundle_webserverbundle_command_serverruncommand',
                'console.command.symfony_bundle_webserverbundle_command_serverstartcommand' => 'console.command.symfony_bundle_webserverbundle_command_serverstartcommand',
                'console.command.symfony_bundle_webserverbundle_command_serverstopcommand' => 'console.command.symfony_bundle_webserverbundle_command_serverstopcommand',
                'console.command.symfony_bundle_webserverbundle_command_serverstatuscommand' => 'console.command.symfony_bundle_webserverbundle_command_serverstatuscommand',
            ),
            'nelmio_api_doc.parser.form_type_parser.class' => 'Nelmio\\ApiDocBundle\\Parser\\FormTypeParser',
            'nelmio_api_doc.parser.jms_metadata_parser.class' => 'Nelmio\\ApiDocBundle\\Parser\\JmsMetadataParser',
            'sonata.core.form.types' => array(
                0 => 'application_user.registration.form.type',
                1 => 'application_user.profile.form.type',
                2 => 'application_sonata_user.profile.authentication.form.type',
                3 => 'form.type.form',
                4 => 'form.type.choice',
                5 => 'form.type.entity',
                6 => 'fos_user.username_form_type',
                7 => 'fos_user.profile.form.type',
                8 => 'fos_user.registration.form.type',
                9 => 'fos_user.change_password.form.type',
                10 => 'fos_user.resetting.form.type',
                11 => 'fos_user.group.form.type',
                12 => 'sonata.user.form.type.security_roles',
                13 => 'sonata.user.profile.form.type',
                14 => 'sonata.user.form.gender_list',
                15 => 'sonata.user.registration.form.type',
                16 => 'sonata.user.api.form.type.group',
                17 => 'sonata.user.api.form.type.user',
                18 => 'sonata.media.form.type.media',
                19 => 'sonata.media.api.form.type.doctrine.media',
                20 => 'sonata.media.api.form.type.media',
                21 => 'sonata.media.api.form.type.gallery',
                22 => 'sonata.media.api.form.type.gallery_has_media',
                23 => 'ivory_ck_editor.form.type',
                24 => 'sonata.admin.form.type.admin',
                25 => 'sonata.admin.form.type.model_choice',
                26 => 'sonata.admin.form.type.model_list',
                27 => 'sonata.admin.form.type.model_reference',
                28 => 'sonata.admin.form.type.model_hidden',
                29 => 'sonata.admin.form.type.model_autocomplete',
                30 => 'sonata.admin.form.type.collection',
                31 => 'sonata.admin.doctrine_orm.form.type.choice_field_mask',
                32 => 'sonata.admin.form.filter.type.number',
                33 => 'sonata.admin.form.filter.type.choice',
                34 => 'sonata.admin.form.filter.type.default',
                35 => 'sonata.admin.form.filter.type.date',
                36 => 'sonata.admin.form.filter.type.daterange',
                37 => 'sonata.admin.form.filter.type.datetime',
                38 => 'sonata.admin.form.filter.type.datetime_range',
                39 => 'sonata.core.form.type.array',
                40 => 'sonata.core.form.type.boolean',
                41 => 'sonata.core.form.type.collection',
                42 => 'sonata.core.form.type.translatable_choice',
                43 => 'sonata.core.form.type.date_range',
                44 => 'sonata.core.form.type.datetime_range',
                45 => 'sonata.core.form.type.date_picker',
                46 => 'sonata.core.form.type.datetime_picker',
                47 => 'sonata.core.form.type.date_range_picker',
                48 => 'sonata.core.form.type.datetime_range_picker',
                49 => 'sonata.core.form.type.equal',
                50 => 'sonata.core.form.type.color_selector',
                51 => 'sonata.core.form.type.color',
                52 => 'sonata.formatter.form.type.selector',
                53 => 'sonata.formatter.form.type.simple',
                54 => 'sonata.block.form.type.block',
                55 => 'sonata.block.form.type.container_template',
                56 => 'sonata.classification.form.type.category_selector',
                57 => 'sonata.classification.api.form.type.category',
                58 => 'sonata.classification.api.form.type.collection',
                59 => 'sonata.classification.api.form.type.tag',
                60 => 'sonata.classification.api.form.type.context',
                61 => 'mopa_bootstrap.form.type.tab',
                62 => 'mopa_bootstrap.form.type.form_actions',
                63 => 'lexik_form_filter.type.filter_text',
                64 => 'lexik_form_filter.type.filter_number',
                65 => 'lexik_form_filter.type.filter_number_range',
                66 => 'lexik_form_filter.type.filter_checkbox',
                67 => 'lexik_form_filter.type.filter_boolean',
                68 => 'lexik_form_filter.type.filter_choice',
                69 => 'lexik_form_filter.type.filter_date',
                70 => 'lexik_form_filter.type.filter_date_range',
                71 => 'lexik_form_filter.type.filter_datetime',
                72 => 'lexik_form_filter.type.filter_datetime_range',
                73 => 'lexik_form_filter.type.filter_collection_adapter',
                74 => 'lexik_form_filter.type.filter_sharedable',
                75 => 'lexik_form_filter.type.filter_entity',
                76 => 'liip_imagine.form.type.image',
                77 => 'captcha.type',
            ),
            'sonata.core.form.type_extensions' => array(
                0 => 'form.type_extension.form.http_foundation',
                1 => 'form.type_extension.form.validator',
                2 => 'form.type_extension.repeated.validator',
                3 => 'form.type_extension.submit.validator',
                4 => 'form.type_extension.upload.validator',
                5 => 'form.type_extension.csrf',
                6 => 'form.type_extension.form.data_collector',
                7 => 'sonata.admin.form.extension.field',
                8 => 'sonata.admin.form.extension.choice',
                9 => 'fos_rest.form.extension.csrf_disable',
                10 => 'nelmio_api_doc.form.extension.description_form_type_extension',
                11 => 'mopa_bootstrap.form.type_extension.embed_form',
                12 => 'mopa_bootstrap.form.type_extension.static_text',
                13 => 'mopa_bootstrap.form.type_extension.offset_button',
                14 => 'mopa_bootstrap.form.type_extension.button',
                15 => 'mopa_bootstrap.form.type_extension.help',
                16 => 'mopa_bootstrap.form.type_extension.legend',
                17 => 'mopa_bootstrap.form.type_extension.error',
                18 => 'mopa_bootstrap.form.type_extension.widget',
                19 => 'mopa_bootstrap.form.type_extension.horizontal',
                20 => 'mopa_bootstrap.form.type_extension.widget_collection',
                21 => 'mopa_bootstrap.form.type_extension.date',
                22 => 'mopa_bootstrap.form.type_extension.datetime',
                23 => 'mopa_bootstrap.form.type_extension.time',
                24 => 'mopa_bootstrap.form.type_extension.tabbed',
                25 => 'lexik_form_filter.type_extension.filter_extension',
            ),
        );
    }
}

class DoctrineORMEntityManager_000000006d9c13f2000000004dc181e407c393e08643067c07eb5044e3591135 extends \Doctrine\ORM\EntityManager implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder5da21d82e5b63544301868 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer5da21d82e5b6d250541557 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties5da21d82e5b37272384262 = [
        
    ];

    /**
     * {@inheritDoc}
     */
    public function getConnection()
    {
        $this->initializer5da21d82e5b6d250541557 && ($this->initializer5da21d82e5b6d250541557->__invoke($valueHolder5da21d82e5b63544301868, $this, 'getConnection', array(), $this->initializer5da21d82e5b6d250541557) || 1) && $this->valueHolder5da21d82e5b63544301868 = $valueHolder5da21d82e5b63544301868;

        return $this->valueHolder5da21d82e5b63544301868->getConnection();
    }

    /**
     * {@inheritDoc}
     */
    public function getMetadataFactory()
    {
        $this->initializer5da21d82e5b6d250541557 && ($this->initializer5da21d82e5b6d250541557->__invoke($valueHolder5da21d82e5b63544301868, $this, 'getMetadataFactory', array(), $this->initializer5da21d82e5b6d250541557) || 1) && $this->valueHolder5da21d82e5b63544301868 = $valueHolder5da21d82e5b63544301868;

        return $this->valueHolder5da21d82e5b63544301868->getMetadataFactory();
    }

    /**
     * {@inheritDoc}
     */
    public function getExpressionBuilder()
    {
        $this->initializer5da21d82e5b6d250541557 && ($this->initializer5da21d82e5b6d250541557->__invoke($valueHolder5da21d82e5b63544301868, $this, 'getExpressionBuilder', array(), $this->initializer5da21d82e5b6d250541557) || 1) && $this->valueHolder5da21d82e5b63544301868 = $valueHolder5da21d82e5b63544301868;

        return $this->valueHolder5da21d82e5b63544301868->getExpressionBuilder();
    }

    /**
     * {@inheritDoc}
     */
    public function beginTransaction()
    {
        $this->initializer5da21d82e5b6d250541557 && ($this->initializer5da21d82e5b6d250541557->__invoke($valueHolder5da21d82e5b63544301868, $this, 'beginTransaction', array(), $this->initializer5da21d82e5b6d250541557) || 1) && $this->valueHolder5da21d82e5b63544301868 = $valueHolder5da21d82e5b63544301868;

        return $this->valueHolder5da21d82e5b63544301868->beginTransaction();
    }

    /**
     * {@inheritDoc}
     */
    public function getCache()
    {
        $this->initializer5da21d82e5b6d250541557 && ($this->initializer5da21d82e5b6d250541557->__invoke($valueHolder5da21d82e5b63544301868, $this, 'getCache', array(), $this->initializer5da21d82e5b6d250541557) || 1) && $this->valueHolder5da21d82e5b63544301868 = $valueHolder5da21d82e5b63544301868;

        return $this->valueHolder5da21d82e5b63544301868->getCache();
    }

    /**
     * {@inheritDoc}
     */
    public function transactional($func)
    {
        $this->initializer5da21d82e5b6d250541557 && ($this->initializer5da21d82e5b6d250541557->__invoke($valueHolder5da21d82e5b63544301868, $this, 'transactional', array('func' => $func), $this->initializer5da21d82e5b6d250541557) || 1) && $this->valueHolder5da21d82e5b63544301868 = $valueHolder5da21d82e5b63544301868;

        return $this->valueHolder5da21d82e5b63544301868->transactional($func);
    }

    /**
     * {@inheritDoc}
     */
    public function commit()
    {
        $this->initializer5da21d82e5b6d250541557 && ($this->initializer5da21d82e5b6d250541557->__invoke($valueHolder5da21d82e5b63544301868, $this, 'commit', array(), $this->initializer5da21d82e5b6d250541557) || 1) && $this->valueHolder5da21d82e5b63544301868 = $valueHolder5da21d82e5b63544301868;

        return $this->valueHolder5da21d82e5b63544301868->commit();
    }

    /**
     * {@inheritDoc}
     */
    public function rollback()
    {
        $this->initializer5da21d82e5b6d250541557 && ($this->initializer5da21d82e5b6d250541557->__invoke($valueHolder5da21d82e5b63544301868, $this, 'rollback', array(), $this->initializer5da21d82e5b6d250541557) || 1) && $this->valueHolder5da21d82e5b63544301868 = $valueHolder5da21d82e5b63544301868;

        return $this->valueHolder5da21d82e5b63544301868->rollback();
    }

    /**
     * {@inheritDoc}
     */
    public function getClassMetadata($className)
    {
        $this->initializer5da21d82e5b6d250541557 && ($this->initializer5da21d82e5b6d250541557->__invoke($valueHolder5da21d82e5b63544301868, $this, 'getClassMetadata', array('className' => $className), $this->initializer5da21d82e5b6d250541557) || 1) && $this->valueHolder5da21d82e5b63544301868 = $valueHolder5da21d82e5b63544301868;

        return $this->valueHolder5da21d82e5b63544301868->getClassMetadata($className);
    }

    /**
     * {@inheritDoc}
     */
    public function createQuery($dql = '')
    {
        $this->initializer5da21d82e5b6d250541557 && ($this->initializer5da21d82e5b6d250541557->__invoke($valueHolder5da21d82e5b63544301868, $this, 'createQuery', array('dql' => $dql), $this->initializer5da21d82e5b6d250541557) || 1) && $this->valueHolder5da21d82e5b63544301868 = $valueHolder5da21d82e5b63544301868;

        return $this->valueHolder5da21d82e5b63544301868->createQuery($dql);
    }

    /**
     * {@inheritDoc}
     */
    public function createNamedQuery($name)
    {
        $this->initializer5da21d82e5b6d250541557 && ($this->initializer5da21d82e5b6d250541557->__invoke($valueHolder5da21d82e5b63544301868, $this, 'createNamedQuery', array('name' => $name), $this->initializer5da21d82e5b6d250541557) || 1) && $this->valueHolder5da21d82e5b63544301868 = $valueHolder5da21d82e5b63544301868;

        return $this->valueHolder5da21d82e5b63544301868->createNamedQuery($name);
    }

    /**
     * {@inheritDoc}
     */
    public function createNativeQuery($sql, \Doctrine\ORM\Query\ResultSetMapping $rsm)
    {
        $this->initializer5da21d82e5b6d250541557 && ($this->initializer5da21d82e5b6d250541557->__invoke($valueHolder5da21d82e5b63544301868, $this, 'createNativeQuery', array('sql' => $sql, 'rsm' => $rsm), $this->initializer5da21d82e5b6d250541557) || 1) && $this->valueHolder5da21d82e5b63544301868 = $valueHolder5da21d82e5b63544301868;

        return $this->valueHolder5da21d82e5b63544301868->createNativeQuery($sql, $rsm);
    }

    /**
     * {@inheritDoc}
     */
    public function createNamedNativeQuery($name)
    {
        $this->initializer5da21d82e5b6d250541557 && ($this->initializer5da21d82e5b6d250541557->__invoke($valueHolder5da21d82e5b63544301868, $this, 'createNamedNativeQuery', array('name' => $name), $this->initializer5da21d82e5b6d250541557) || 1) && $this->valueHolder5da21d82e5b63544301868 = $valueHolder5da21d82e5b63544301868;

        return $this->valueHolder5da21d82e5b63544301868->createNamedNativeQuery($name);
    }

    /**
     * {@inheritDoc}
     */
    public function createQueryBuilder()
    {
        $this->initializer5da21d82e5b6d250541557 && ($this->initializer5da21d82e5b6d250541557->__invoke($valueHolder5da21d82e5b63544301868, $this, 'createQueryBuilder', array(), $this->initializer5da21d82e5b6d250541557) || 1) && $this->valueHolder5da21d82e5b63544301868 = $valueHolder5da21d82e5b63544301868;

        return $this->valueHolder5da21d82e5b63544301868->createQueryBuilder();
    }

    /**
     * {@inheritDoc}
     */
    public function flush($entity = null)
    {
        $this->initializer5da21d82e5b6d250541557 && ($this->initializer5da21d82e5b6d250541557->__invoke($valueHolder5da21d82e5b63544301868, $this, 'flush', array('entity' => $entity), $this->initializer5da21d82e5b6d250541557) || 1) && $this->valueHolder5da21d82e5b63544301868 = $valueHolder5da21d82e5b63544301868;

        return $this->valueHolder5da21d82e5b63544301868->flush($entity);
    }

    /**
     * {@inheritDoc}
     */
    public function find($entityName, $id, $lockMode = null, $lockVersion = null)
    {
        $this->initializer5da21d82e5b6d250541557 && ($this->initializer5da21d82e5b6d250541557->__invoke($valueHolder5da21d82e5b63544301868, $this, 'find', array('entityName' => $entityName, 'id' => $id, 'lockMode' => $lockMode, 'lockVersion' => $lockVersion), $this->initializer5da21d82e5b6d250541557) || 1) && $this->valueHolder5da21d82e5b63544301868 = $valueHolder5da21d82e5b63544301868;

        return $this->valueHolder5da21d82e5b63544301868->find($entityName, $id, $lockMode, $lockVersion);
    }

    /**
     * {@inheritDoc}
     */
    public function getReference($entityName, $id)
    {
        $this->initializer5da21d82e5b6d250541557 && ($this->initializer5da21d82e5b6d250541557->__invoke($valueHolder5da21d82e5b63544301868, $this, 'getReference', array('entityName' => $entityName, 'id' => $id), $this->initializer5da21d82e5b6d250541557) || 1) && $this->valueHolder5da21d82e5b63544301868 = $valueHolder5da21d82e5b63544301868;

        return $this->valueHolder5da21d82e5b63544301868->getReference($entityName, $id);
    }

    /**
     * {@inheritDoc}
     */
    public function getPartialReference($entityName, $identifier)
    {
        $this->initializer5da21d82e5b6d250541557 && ($this->initializer5da21d82e5b6d250541557->__invoke($valueHolder5da21d82e5b63544301868, $this, 'getPartialReference', array('entityName' => $entityName, 'identifier' => $identifier), $this->initializer5da21d82e5b6d250541557) || 1) && $this->valueHolder5da21d82e5b63544301868 = $valueHolder5da21d82e5b63544301868;

        return $this->valueHolder5da21d82e5b63544301868->getPartialReference($entityName, $identifier);
    }

    /**
     * {@inheritDoc}
     */
    public function clear($entityName = null)
    {
        $this->initializer5da21d82e5b6d250541557 && ($this->initializer5da21d82e5b6d250541557->__invoke($valueHolder5da21d82e5b63544301868, $this, 'clear', array('entityName' => $entityName), $this->initializer5da21d82e5b6d250541557) || 1) && $this->valueHolder5da21d82e5b63544301868 = $valueHolder5da21d82e5b63544301868;

        return $this->valueHolder5da21d82e5b63544301868->clear($entityName);
    }

    /**
     * {@inheritDoc}
     */
    public function close()
    {
        $this->initializer5da21d82e5b6d250541557 && ($this->initializer5da21d82e5b6d250541557->__invoke($valueHolder5da21d82e5b63544301868, $this, 'close', array(), $this->initializer5da21d82e5b6d250541557) || 1) && $this->valueHolder5da21d82e5b63544301868 = $valueHolder5da21d82e5b63544301868;

        return $this->valueHolder5da21d82e5b63544301868->close();
    }

    /**
     * {@inheritDoc}
     */
    public function persist($entity)
    {
        $this->initializer5da21d82e5b6d250541557 && ($this->initializer5da21d82e5b6d250541557->__invoke($valueHolder5da21d82e5b63544301868, $this, 'persist', array('entity' => $entity), $this->initializer5da21d82e5b6d250541557) || 1) && $this->valueHolder5da21d82e5b63544301868 = $valueHolder5da21d82e5b63544301868;

        return $this->valueHolder5da21d82e5b63544301868->persist($entity);
    }

    /**
     * {@inheritDoc}
     */
    public function remove($entity)
    {
        $this->initializer5da21d82e5b6d250541557 && ($this->initializer5da21d82e5b6d250541557->__invoke($valueHolder5da21d82e5b63544301868, $this, 'remove', array('entity' => $entity), $this->initializer5da21d82e5b6d250541557) || 1) && $this->valueHolder5da21d82e5b63544301868 = $valueHolder5da21d82e5b63544301868;

        return $this->valueHolder5da21d82e5b63544301868->remove($entity);
    }

    /**
     * {@inheritDoc}
     */
    public function refresh($entity)
    {
        $this->initializer5da21d82e5b6d250541557 && ($this->initializer5da21d82e5b6d250541557->__invoke($valueHolder5da21d82e5b63544301868, $this, 'refresh', array('entity' => $entity), $this->initializer5da21d82e5b6d250541557) || 1) && $this->valueHolder5da21d82e5b63544301868 = $valueHolder5da21d82e5b63544301868;

        return $this->valueHolder5da21d82e5b63544301868->refresh($entity);
    }

    /**
     * {@inheritDoc}
     */
    public function detach($entity)
    {
        $this->initializer5da21d82e5b6d250541557 && ($this->initializer5da21d82e5b6d250541557->__invoke($valueHolder5da21d82e5b63544301868, $this, 'detach', array('entity' => $entity), $this->initializer5da21d82e5b6d250541557) || 1) && $this->valueHolder5da21d82e5b63544301868 = $valueHolder5da21d82e5b63544301868;

        return $this->valueHolder5da21d82e5b63544301868->detach($entity);
    }

    /**
     * {@inheritDoc}
     */
    public function merge($entity)
    {
        $this->initializer5da21d82e5b6d250541557 && ($this->initializer5da21d82e5b6d250541557->__invoke($valueHolder5da21d82e5b63544301868, $this, 'merge', array('entity' => $entity), $this->initializer5da21d82e5b6d250541557) || 1) && $this->valueHolder5da21d82e5b63544301868 = $valueHolder5da21d82e5b63544301868;

        return $this->valueHolder5da21d82e5b63544301868->merge($entity);
    }

    /**
     * {@inheritDoc}
     */
    public function copy($entity, $deep = false)
    {
        $this->initializer5da21d82e5b6d250541557 && ($this->initializer5da21d82e5b6d250541557->__invoke($valueHolder5da21d82e5b63544301868, $this, 'copy', array('entity' => $entity, 'deep' => $deep), $this->initializer5da21d82e5b6d250541557) || 1) && $this->valueHolder5da21d82e5b63544301868 = $valueHolder5da21d82e5b63544301868;

        return $this->valueHolder5da21d82e5b63544301868->copy($entity, $deep);
    }

    /**
     * {@inheritDoc}
     */
    public function lock($entity, $lockMode, $lockVersion = null)
    {
        $this->initializer5da21d82e5b6d250541557 && ($this->initializer5da21d82e5b6d250541557->__invoke($valueHolder5da21d82e5b63544301868, $this, 'lock', array('entity' => $entity, 'lockMode' => $lockMode, 'lockVersion' => $lockVersion), $this->initializer5da21d82e5b6d250541557) || 1) && $this->valueHolder5da21d82e5b63544301868 = $valueHolder5da21d82e5b63544301868;

        return $this->valueHolder5da21d82e5b63544301868->lock($entity, $lockMode, $lockVersion);
    }

    /**
     * {@inheritDoc}
     */
    public function getRepository($entityName)
    {
        $this->initializer5da21d82e5b6d250541557 && ($this->initializer5da21d82e5b6d250541557->__invoke($valueHolder5da21d82e5b63544301868, $this, 'getRepository', array('entityName' => $entityName), $this->initializer5da21d82e5b6d250541557) || 1) && $this->valueHolder5da21d82e5b63544301868 = $valueHolder5da21d82e5b63544301868;

        return $this->valueHolder5da21d82e5b63544301868->getRepository($entityName);
    }

    /**
     * {@inheritDoc}
     */
    public function contains($entity)
    {
        $this->initializer5da21d82e5b6d250541557 && ($this->initializer5da21d82e5b6d250541557->__invoke($valueHolder5da21d82e5b63544301868, $this, 'contains', array('entity' => $entity), $this->initializer5da21d82e5b6d250541557) || 1) && $this->valueHolder5da21d82e5b63544301868 = $valueHolder5da21d82e5b63544301868;

        return $this->valueHolder5da21d82e5b63544301868->contains($entity);
    }

    /**
     * {@inheritDoc}
     */
    public function getEventManager()
    {
        $this->initializer5da21d82e5b6d250541557 && ($this->initializer5da21d82e5b6d250541557->__invoke($valueHolder5da21d82e5b63544301868, $this, 'getEventManager', array(), $this->initializer5da21d82e5b6d250541557) || 1) && $this->valueHolder5da21d82e5b63544301868 = $valueHolder5da21d82e5b63544301868;

        return $this->valueHolder5da21d82e5b63544301868->getEventManager();
    }

    /**
     * {@inheritDoc}
     */
    public function getConfiguration()
    {
        $this->initializer5da21d82e5b6d250541557 && ($this->initializer5da21d82e5b6d250541557->__invoke($valueHolder5da21d82e5b63544301868, $this, 'getConfiguration', array(), $this->initializer5da21d82e5b6d250541557) || 1) && $this->valueHolder5da21d82e5b63544301868 = $valueHolder5da21d82e5b63544301868;

        return $this->valueHolder5da21d82e5b63544301868->getConfiguration();
    }

    /**
     * {@inheritDoc}
     */
    public function isOpen()
    {
        $this->initializer5da21d82e5b6d250541557 && ($this->initializer5da21d82e5b6d250541557->__invoke($valueHolder5da21d82e5b63544301868, $this, 'isOpen', array(), $this->initializer5da21d82e5b6d250541557) || 1) && $this->valueHolder5da21d82e5b63544301868 = $valueHolder5da21d82e5b63544301868;

        return $this->valueHolder5da21d82e5b63544301868->isOpen();
    }

    /**
     * {@inheritDoc}
     */
    public function getUnitOfWork()
    {
        $this->initializer5da21d82e5b6d250541557 && ($this->initializer5da21d82e5b6d250541557->__invoke($valueHolder5da21d82e5b63544301868, $this, 'getUnitOfWork', array(), $this->initializer5da21d82e5b6d250541557) || 1) && $this->valueHolder5da21d82e5b63544301868 = $valueHolder5da21d82e5b63544301868;

        return $this->valueHolder5da21d82e5b63544301868->getUnitOfWork();
    }

    /**
     * {@inheritDoc}
     */
    public function getHydrator($hydrationMode)
    {
        $this->initializer5da21d82e5b6d250541557 && ($this->initializer5da21d82e5b6d250541557->__invoke($valueHolder5da21d82e5b63544301868, $this, 'getHydrator', array('hydrationMode' => $hydrationMode), $this->initializer5da21d82e5b6d250541557) || 1) && $this->valueHolder5da21d82e5b63544301868 = $valueHolder5da21d82e5b63544301868;

        return $this->valueHolder5da21d82e5b63544301868->getHydrator($hydrationMode);
    }

    /**
     * {@inheritDoc}
     */
    public function newHydrator($hydrationMode)
    {
        $this->initializer5da21d82e5b6d250541557 && ($this->initializer5da21d82e5b6d250541557->__invoke($valueHolder5da21d82e5b63544301868, $this, 'newHydrator', array('hydrationMode' => $hydrationMode), $this->initializer5da21d82e5b6d250541557) || 1) && $this->valueHolder5da21d82e5b63544301868 = $valueHolder5da21d82e5b63544301868;

        return $this->valueHolder5da21d82e5b63544301868->newHydrator($hydrationMode);
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyFactory()
    {
        $this->initializer5da21d82e5b6d250541557 && ($this->initializer5da21d82e5b6d250541557->__invoke($valueHolder5da21d82e5b63544301868, $this, 'getProxyFactory', array(), $this->initializer5da21d82e5b6d250541557) || 1) && $this->valueHolder5da21d82e5b63544301868 = $valueHolder5da21d82e5b63544301868;

        return $this->valueHolder5da21d82e5b63544301868->getProxyFactory();
    }

    /**
     * {@inheritDoc}
     */
    public function initializeObject($obj)
    {
        $this->initializer5da21d82e5b6d250541557 && ($this->initializer5da21d82e5b6d250541557->__invoke($valueHolder5da21d82e5b63544301868, $this, 'initializeObject', array('obj' => $obj), $this->initializer5da21d82e5b6d250541557) || 1) && $this->valueHolder5da21d82e5b63544301868 = $valueHolder5da21d82e5b63544301868;

        return $this->valueHolder5da21d82e5b63544301868->initializeObject($obj);
    }

    /**
     * {@inheritDoc}
     */
    public function getFilters()
    {
        $this->initializer5da21d82e5b6d250541557 && ($this->initializer5da21d82e5b6d250541557->__invoke($valueHolder5da21d82e5b63544301868, $this, 'getFilters', array(), $this->initializer5da21d82e5b6d250541557) || 1) && $this->valueHolder5da21d82e5b63544301868 = $valueHolder5da21d82e5b63544301868;

        return $this->valueHolder5da21d82e5b63544301868->getFilters();
    }

    /**
     * {@inheritDoc}
     */
    public function isFiltersStateClean()
    {
        $this->initializer5da21d82e5b6d250541557 && ($this->initializer5da21d82e5b6d250541557->__invoke($valueHolder5da21d82e5b63544301868, $this, 'isFiltersStateClean', array(), $this->initializer5da21d82e5b6d250541557) || 1) && $this->valueHolder5da21d82e5b63544301868 = $valueHolder5da21d82e5b63544301868;

        return $this->valueHolder5da21d82e5b63544301868->isFiltersStateClean();
    }

    /**
     * {@inheritDoc}
     */
    public function hasFilters()
    {
        $this->initializer5da21d82e5b6d250541557 && ($this->initializer5da21d82e5b6d250541557->__invoke($valueHolder5da21d82e5b63544301868, $this, 'hasFilters', array(), $this->initializer5da21d82e5b6d250541557) || 1) && $this->valueHolder5da21d82e5b63544301868 = $valueHolder5da21d82e5b63544301868;

        return $this->valueHolder5da21d82e5b63544301868->hasFilters();
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?: $reflection = new \ReflectionClass(__CLASS__);
        $instance = (new \ReflectionClass(get_class()))->newInstanceWithoutConstructor();

        \Closure::bind(function (\Doctrine\ORM\EntityManager $instance) {
            unset($instance->config, $instance->conn, $instance->metadataFactory, $instance->unitOfWork, $instance->eventManager, $instance->proxyFactory, $instance->repositoryFactory, $instance->expressionBuilder, $instance->closed, $instance->filterCollection, $instance->cache);
        }, $instance, 'Doctrine\\ORM\\EntityManager')->__invoke($instance);

        $instance->initializer5da21d82e5b6d250541557 = $initializer;

        return $instance;
    }

    /**
     * {@inheritDoc}
     */
    protected function __construct(\Doctrine\DBAL\Connection $conn, \Doctrine\ORM\Configuration $config, \Doctrine\Common\EventManager $eventManager)
    {
        static $reflection;

        if (! $this->valueHolder5da21d82e5b63544301868) {
            $reflection = $reflection ?: new \ReflectionClass('Doctrine\\ORM\\EntityManager');
            $this->valueHolder5da21d82e5b63544301868 = $reflection->newInstanceWithoutConstructor();
        \Closure::bind(function (\Doctrine\ORM\EntityManager $instance) {
            unset($instance->config, $instance->conn, $instance->metadataFactory, $instance->unitOfWork, $instance->eventManager, $instance->proxyFactory, $instance->repositoryFactory, $instance->expressionBuilder, $instance->closed, $instance->filterCollection, $instance->cache);
        }, $this, 'Doctrine\\ORM\\EntityManager')->__invoke($this);

        }

        $this->valueHolder5da21d82e5b63544301868->__construct($conn, $config, $eventManager);
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer5da21d82e5b6d250541557 && ($this->initializer5da21d82e5b6d250541557->__invoke($valueHolder5da21d82e5b63544301868, $this, '__get', ['name' => $name], $this->initializer5da21d82e5b6d250541557) || 1) && $this->valueHolder5da21d82e5b63544301868 = $valueHolder5da21d82e5b63544301868;

        if (isset(self::$publicProperties5da21d82e5b37272384262[$name])) {
            return $this->valueHolder5da21d82e5b63544301868->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder5da21d82e5b63544301868;

            $backtrace = debug_backtrace(false);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    get_parent_class($this),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
            return;
        }

        $targetObject = $this->valueHolder5da21d82e5b63544301868;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer5da21d82e5b6d250541557 && ($this->initializer5da21d82e5b6d250541557->__invoke($valueHolder5da21d82e5b63544301868, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer5da21d82e5b6d250541557) || 1) && $this->valueHolder5da21d82e5b63544301868 = $valueHolder5da21d82e5b63544301868;

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder5da21d82e5b63544301868;

            return $targetObject->$name = $value;
            return;
        }

        $targetObject = $this->valueHolder5da21d82e5b63544301868;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer5da21d82e5b6d250541557 && ($this->initializer5da21d82e5b6d250541557->__invoke($valueHolder5da21d82e5b63544301868, $this, '__isset', array('name' => $name), $this->initializer5da21d82e5b6d250541557) || 1) && $this->valueHolder5da21d82e5b63544301868 = $valueHolder5da21d82e5b63544301868;

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder5da21d82e5b63544301868;

            return isset($targetObject->$name);
            return;
        }

        $targetObject = $this->valueHolder5da21d82e5b63544301868;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer5da21d82e5b6d250541557 && ($this->initializer5da21d82e5b6d250541557->__invoke($valueHolder5da21d82e5b63544301868, $this, '__unset', array('name' => $name), $this->initializer5da21d82e5b6d250541557) || 1) && $this->valueHolder5da21d82e5b63544301868 = $valueHolder5da21d82e5b63544301868;

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder5da21d82e5b63544301868;

            unset($targetObject->$name);
            return;
        }

        $targetObject = $this->valueHolder5da21d82e5b63544301868;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer5da21d82e5b6d250541557 && ($this->initializer5da21d82e5b6d250541557->__invoke($valueHolder5da21d82e5b63544301868, $this, '__clone', array(), $this->initializer5da21d82e5b6d250541557) || 1) && $this->valueHolder5da21d82e5b63544301868 = $valueHolder5da21d82e5b63544301868;

        $this->valueHolder5da21d82e5b63544301868 = clone $this->valueHolder5da21d82e5b63544301868;
    }

    public function __sleep()
    {
        $this->initializer5da21d82e5b6d250541557 && ($this->initializer5da21d82e5b6d250541557->__invoke($valueHolder5da21d82e5b63544301868, $this, '__sleep', array(), $this->initializer5da21d82e5b6d250541557) || 1) && $this->valueHolder5da21d82e5b63544301868 = $valueHolder5da21d82e5b63544301868;

        return array('valueHolder5da21d82e5b63544301868');
    }

    public function __wakeup()
    {
        \Closure::bind(function (\Doctrine\ORM\EntityManager $instance) {
            unset($instance->config, $instance->conn, $instance->metadataFactory, $instance->unitOfWork, $instance->eventManager, $instance->proxyFactory, $instance->repositoryFactory, $instance->expressionBuilder, $instance->closed, $instance->filterCollection, $instance->cache);
        }, $this, 'Doctrine\\ORM\\EntityManager')->__invoke($this);
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer5da21d82e5b6d250541557 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer5da21d82e5b6d250541557;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy() : bool
    {
        return $this->initializer5da21d82e5b6d250541557 && ($this->initializer5da21d82e5b6d250541557->__invoke($valueHolder5da21d82e5b63544301868, $this, 'initializeProxy', array(), $this->initializer5da21d82e5b6d250541557) || 1) && $this->valueHolder5da21d82e5b63544301868 = $valueHolder5da21d82e5b63544301868;
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHolder5da21d82e5b63544301868;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder5da21d82e5b63544301868;
    }


}

class KnpComponentPagerPaginator_000000006d9c1c0b000000004dc181e407c393e08643067c07eb5044e3591135 extends \Knp\Component\Pager\Paginator implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder5da21d82ee273003713437 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer5da21d82ee27c807300967 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties5da21d82ee252424308182 = [
        
    ];

    /**
     * {@inheritDoc}
     */
    public function setDefaultPaginatorOptions(array $options)
    {
        $this->initializer5da21d82ee27c807300967 && ($this->initializer5da21d82ee27c807300967->__invoke($valueHolder5da21d82ee273003713437, $this, 'setDefaultPaginatorOptions', array('options' => $options), $this->initializer5da21d82ee27c807300967) || 1) && $this->valueHolder5da21d82ee273003713437 = $valueHolder5da21d82ee273003713437;

        return $this->valueHolder5da21d82ee273003713437->setDefaultPaginatorOptions($options);
    }

    /**
     * {@inheritDoc}
     */
    public function paginate($target, $page = 1, $limit = 10, array $options = [])
    {
        $this->initializer5da21d82ee27c807300967 && ($this->initializer5da21d82ee27c807300967->__invoke($valueHolder5da21d82ee273003713437, $this, 'paginate', array('target' => $target, 'page' => $page, 'limit' => $limit, 'options' => $options), $this->initializer5da21d82ee27c807300967) || 1) && $this->valueHolder5da21d82ee273003713437 = $valueHolder5da21d82ee273003713437;

        return $this->valueHolder5da21d82ee273003713437->paginate($target, $page, $limit, $options);
    }

    /**
     * {@inheritDoc}
     */
    public function subscribe(\Symfony\Component\EventDispatcher\EventSubscriberInterface $subscriber)
    {
        $this->initializer5da21d82ee27c807300967 && ($this->initializer5da21d82ee27c807300967->__invoke($valueHolder5da21d82ee273003713437, $this, 'subscribe', array('subscriber' => $subscriber), $this->initializer5da21d82ee27c807300967) || 1) && $this->valueHolder5da21d82ee273003713437 = $valueHolder5da21d82ee273003713437;

        return $this->valueHolder5da21d82ee273003713437->subscribe($subscriber);
    }

    /**
     * {@inheritDoc}
     */
    public function connect($eventName, $listener, $priority = 0)
    {
        $this->initializer5da21d82ee27c807300967 && ($this->initializer5da21d82ee27c807300967->__invoke($valueHolder5da21d82ee273003713437, $this, 'connect', array('eventName' => $eventName, 'listener' => $listener, 'priority' => $priority), $this->initializer5da21d82ee27c807300967) || 1) && $this->valueHolder5da21d82ee273003713437 = $valueHolder5da21d82ee273003713437;

        return $this->valueHolder5da21d82ee273003713437->connect($eventName, $listener, $priority);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?: $reflection = new \ReflectionClass(__CLASS__);
        $instance = (new \ReflectionClass(get_class()))->newInstanceWithoutConstructor();

        unset($instance->eventDispatcher, $instance->defaultOptions);

        $instance->initializer5da21d82ee27c807300967 = $initializer;

        return $instance;
    }

    /**
     * {@inheritDoc}
     */
    public function __construct(?\Symfony\Component\EventDispatcher\EventDispatcherInterface $eventDispatcher = null)
    {
        static $reflection;

        if (! $this->valueHolder5da21d82ee273003713437) {
            $reflection = $reflection ?: new \ReflectionClass('Knp\\Component\\Pager\\Paginator');
            $this->valueHolder5da21d82ee273003713437 = $reflection->newInstanceWithoutConstructor();
        unset($this->eventDispatcher, $this->defaultOptions);

        }

        $this->valueHolder5da21d82ee273003713437->__construct($eventDispatcher);
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer5da21d82ee27c807300967 && ($this->initializer5da21d82ee27c807300967->__invoke($valueHolder5da21d82ee273003713437, $this, '__get', ['name' => $name], $this->initializer5da21d82ee27c807300967) || 1) && $this->valueHolder5da21d82ee273003713437 = $valueHolder5da21d82ee273003713437;

        if (isset(self::$publicProperties5da21d82ee252424308182[$name])) {
            return $this->valueHolder5da21d82ee273003713437->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder5da21d82ee273003713437;

            $backtrace = debug_backtrace(false);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    get_parent_class($this),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
            return;
        }

        $targetObject = $this->valueHolder5da21d82ee273003713437;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer5da21d82ee27c807300967 && ($this->initializer5da21d82ee27c807300967->__invoke($valueHolder5da21d82ee273003713437, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer5da21d82ee27c807300967) || 1) && $this->valueHolder5da21d82ee273003713437 = $valueHolder5da21d82ee273003713437;

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder5da21d82ee273003713437;

            return $targetObject->$name = $value;
            return;
        }

        $targetObject = $this->valueHolder5da21d82ee273003713437;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer5da21d82ee27c807300967 && ($this->initializer5da21d82ee27c807300967->__invoke($valueHolder5da21d82ee273003713437, $this, '__isset', array('name' => $name), $this->initializer5da21d82ee27c807300967) || 1) && $this->valueHolder5da21d82ee273003713437 = $valueHolder5da21d82ee273003713437;

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder5da21d82ee273003713437;

            return isset($targetObject->$name);
            return;
        }

        $targetObject = $this->valueHolder5da21d82ee273003713437;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer5da21d82ee27c807300967 && ($this->initializer5da21d82ee27c807300967->__invoke($valueHolder5da21d82ee273003713437, $this, '__unset', array('name' => $name), $this->initializer5da21d82ee27c807300967) || 1) && $this->valueHolder5da21d82ee273003713437 = $valueHolder5da21d82ee273003713437;

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder5da21d82ee273003713437;

            unset($targetObject->$name);
            return;
        }

        $targetObject = $this->valueHolder5da21d82ee273003713437;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer5da21d82ee27c807300967 && ($this->initializer5da21d82ee27c807300967->__invoke($valueHolder5da21d82ee273003713437, $this, '__clone', array(), $this->initializer5da21d82ee27c807300967) || 1) && $this->valueHolder5da21d82ee273003713437 = $valueHolder5da21d82ee273003713437;

        $this->valueHolder5da21d82ee273003713437 = clone $this->valueHolder5da21d82ee273003713437;
    }

    public function __sleep()
    {
        $this->initializer5da21d82ee27c807300967 && ($this->initializer5da21d82ee27c807300967->__invoke($valueHolder5da21d82ee273003713437, $this, '__sleep', array(), $this->initializer5da21d82ee27c807300967) || 1) && $this->valueHolder5da21d82ee273003713437 = $valueHolder5da21d82ee273003713437;

        return array('valueHolder5da21d82ee273003713437');
    }

    public function __wakeup()
    {
        unset($this->eventDispatcher, $this->defaultOptions);
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer5da21d82ee27c807300967 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer5da21d82ee27c807300967;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy() : bool
    {
        return $this->initializer5da21d82ee27c807300967 && ($this->initializer5da21d82ee27c807300967->__invoke($valueHolder5da21d82ee273003713437, $this, 'initializeProxy', array(), $this->initializer5da21d82ee27c807300967) || 1) && $this->valueHolder5da21d82ee273003713437 = $valueHolder5da21d82ee273003713437;
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHolder5da21d82ee273003713437;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder5da21d82ee273003713437;
    }


}

class SymfonyComponentCacheAdapterFilesystemAdapter_000000006d9c1138000000004dc181e407c393e08643067c07eb5044e3591135 extends \Symfony\Component\Cache\Adapter\FilesystemAdapter implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder5da21d82ef725806597146 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer5da21d82ef72d970101963 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties5da21d82ef708202350378 = [
        
    ];

    /**
     * {@inheritDoc}
     */
    public function getItem($key)
    {
        $this->initializer5da21d82ef72d970101963 && ($this->initializer5da21d82ef72d970101963->__invoke($valueHolder5da21d82ef725806597146, $this, 'getItem', array('key' => $key), $this->initializer5da21d82ef72d970101963) || 1) && $this->valueHolder5da21d82ef725806597146 = $valueHolder5da21d82ef725806597146;

        return $this->valueHolder5da21d82ef725806597146->getItem($key);
    }

    /**
     * {@inheritDoc}
     */
    public function getItems(array $keys = [])
    {
        $this->initializer5da21d82ef72d970101963 && ($this->initializer5da21d82ef72d970101963->__invoke($valueHolder5da21d82ef725806597146, $this, 'getItems', array('keys' => $keys), $this->initializer5da21d82ef72d970101963) || 1) && $this->valueHolder5da21d82ef725806597146 = $valueHolder5da21d82ef725806597146;

        return $this->valueHolder5da21d82ef725806597146->getItems($keys);
    }

    /**
     * {@inheritDoc}
     */
    public function save(\Psr\Cache\CacheItemInterface $item)
    {
        $this->initializer5da21d82ef72d970101963 && ($this->initializer5da21d82ef72d970101963->__invoke($valueHolder5da21d82ef725806597146, $this, 'save', array('item' => $item), $this->initializer5da21d82ef72d970101963) || 1) && $this->valueHolder5da21d82ef725806597146 = $valueHolder5da21d82ef725806597146;

        return $this->valueHolder5da21d82ef725806597146->save($item);
    }

    /**
     * {@inheritDoc}
     */
    public function saveDeferred(\Psr\Cache\CacheItemInterface $item)
    {
        $this->initializer5da21d82ef72d970101963 && ($this->initializer5da21d82ef72d970101963->__invoke($valueHolder5da21d82ef725806597146, $this, 'saveDeferred', array('item' => $item), $this->initializer5da21d82ef72d970101963) || 1) && $this->valueHolder5da21d82ef725806597146 = $valueHolder5da21d82ef725806597146;

        return $this->valueHolder5da21d82ef725806597146->saveDeferred($item);
    }

    /**
     * {@inheritDoc}
     */
    public function commit()
    {
        $this->initializer5da21d82ef72d970101963 && ($this->initializer5da21d82ef72d970101963->__invoke($valueHolder5da21d82ef725806597146, $this, 'commit', array(), $this->initializer5da21d82ef72d970101963) || 1) && $this->valueHolder5da21d82ef725806597146 = $valueHolder5da21d82ef725806597146;

        return $this->valueHolder5da21d82ef725806597146->commit();
    }

    /**
     * {@inheritDoc}
     */
    public function __destruct()
    {
        $this->initializer5da21d82ef72d970101963 || $this->valueHolder5da21d82ef725806597146->__destruct();
    }

    /**
     * {@inheritDoc}
     */
    public function hasItem($key)
    {
        $this->initializer5da21d82ef72d970101963 && ($this->initializer5da21d82ef72d970101963->__invoke($valueHolder5da21d82ef725806597146, $this, 'hasItem', array('key' => $key), $this->initializer5da21d82ef72d970101963) || 1) && $this->valueHolder5da21d82ef725806597146 = $valueHolder5da21d82ef725806597146;

        return $this->valueHolder5da21d82ef725806597146->hasItem($key);
    }

    /**
     * {@inheritDoc}
     */
    public function clear()
    {
        $this->initializer5da21d82ef72d970101963 && ($this->initializer5da21d82ef72d970101963->__invoke($valueHolder5da21d82ef725806597146, $this, 'clear', array(), $this->initializer5da21d82ef72d970101963) || 1) && $this->valueHolder5da21d82ef725806597146 = $valueHolder5da21d82ef725806597146;

        return $this->valueHolder5da21d82ef725806597146->clear();
    }

    /**
     * {@inheritDoc}
     */
    public function deleteItem($key)
    {
        $this->initializer5da21d82ef72d970101963 && ($this->initializer5da21d82ef72d970101963->__invoke($valueHolder5da21d82ef725806597146, $this, 'deleteItem', array('key' => $key), $this->initializer5da21d82ef72d970101963) || 1) && $this->valueHolder5da21d82ef725806597146 = $valueHolder5da21d82ef725806597146;

        return $this->valueHolder5da21d82ef725806597146->deleteItem($key);
    }

    /**
     * {@inheritDoc}
     */
    public function deleteItems(array $keys)
    {
        $this->initializer5da21d82ef72d970101963 && ($this->initializer5da21d82ef72d970101963->__invoke($valueHolder5da21d82ef725806597146, $this, 'deleteItems', array('keys' => $keys), $this->initializer5da21d82ef72d970101963) || 1) && $this->valueHolder5da21d82ef725806597146 = $valueHolder5da21d82ef725806597146;

        return $this->valueHolder5da21d82ef725806597146->deleteItems($keys);
    }

    /**
     * {@inheritDoc}
     */
    public function enableVersioning($enable = true)
    {
        $this->initializer5da21d82ef72d970101963 && ($this->initializer5da21d82ef72d970101963->__invoke($valueHolder5da21d82ef725806597146, $this, 'enableVersioning', array('enable' => $enable), $this->initializer5da21d82ef72d970101963) || 1) && $this->valueHolder5da21d82ef725806597146 = $valueHolder5da21d82ef725806597146;

        return $this->valueHolder5da21d82ef725806597146->enableVersioning($enable);
    }

    /**
     * {@inheritDoc}
     */
    public function setLogger(\Psr\Log\LoggerInterface $logger)
    {
        $this->initializer5da21d82ef72d970101963 && ($this->initializer5da21d82ef72d970101963->__invoke($valueHolder5da21d82ef725806597146, $this, 'setLogger', array('logger' => $logger), $this->initializer5da21d82ef72d970101963) || 1) && $this->valueHolder5da21d82ef725806597146 = $valueHolder5da21d82ef725806597146;

        return $this->valueHolder5da21d82ef725806597146->setLogger($logger);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?: $reflection = new \ReflectionClass(__CLASS__);
        $instance = (new \ReflectionClass(get_class()))->newInstanceWithoutConstructor();

        unset($instance->maxIdLength, $instance->logger);

        \Closure::bind(function (\Symfony\Component\Cache\Adapter\FilesystemAdapter $instance) {
            unset($instance->directory, $instance->tmp);
        }, $instance, 'Symfony\\Component\\Cache\\Adapter\\FilesystemAdapter')->__invoke($instance);

        \Closure::bind(function (\Symfony\Component\Cache\Adapter\AbstractAdapter $instance) {
            unset($instance->createCacheItem, $instance->mergeByLifetime, $instance->namespace, $instance->namespaceVersion, $instance->versioningIsEnabled, $instance->deferred);
        }, $instance, 'Symfony\\Component\\Cache\\Adapter\\AbstractAdapter')->__invoke($instance);

        $instance->initializer5da21d82ef72d970101963 = $initializer;

        return $instance;
    }

    /**
     * {@inheritDoc}
     */
    public function __construct($namespace = '', $defaultLifetime = 0, $directory = null)
    {
        static $reflection;

        if (! $this->valueHolder5da21d82ef725806597146) {
            $reflection = $reflection ?: new \ReflectionClass('Symfony\\Component\\Cache\\Adapter\\FilesystemAdapter');
            $this->valueHolder5da21d82ef725806597146 = $reflection->newInstanceWithoutConstructor();
        unset($this->maxIdLength, $this->logger);

        \Closure::bind(function (\Symfony\Component\Cache\Adapter\FilesystemAdapter $instance) {
            unset($instance->directory, $instance->tmp);
        }, $this, 'Symfony\\Component\\Cache\\Adapter\\FilesystemAdapter')->__invoke($this);

        \Closure::bind(function (\Symfony\Component\Cache\Adapter\AbstractAdapter $instance) {
            unset($instance->createCacheItem, $instance->mergeByLifetime, $instance->namespace, $instance->namespaceVersion, $instance->versioningIsEnabled, $instance->deferred);
        }, $this, 'Symfony\\Component\\Cache\\Adapter\\AbstractAdapter')->__invoke($this);

        }

        $this->valueHolder5da21d82ef725806597146->__construct($namespace, $defaultLifetime, $directory);
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer5da21d82ef72d970101963 && ($this->initializer5da21d82ef72d970101963->__invoke($valueHolder5da21d82ef725806597146, $this, '__get', ['name' => $name], $this->initializer5da21d82ef72d970101963) || 1) && $this->valueHolder5da21d82ef725806597146 = $valueHolder5da21d82ef725806597146;

        if (isset(self::$publicProperties5da21d82ef708202350378[$name])) {
            return $this->valueHolder5da21d82ef725806597146->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder5da21d82ef725806597146;

            $backtrace = debug_backtrace(false);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    get_parent_class($this),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
            return;
        }

        $targetObject = $this->valueHolder5da21d82ef725806597146;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer5da21d82ef72d970101963 && ($this->initializer5da21d82ef72d970101963->__invoke($valueHolder5da21d82ef725806597146, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer5da21d82ef72d970101963) || 1) && $this->valueHolder5da21d82ef725806597146 = $valueHolder5da21d82ef725806597146;

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder5da21d82ef725806597146;

            return $targetObject->$name = $value;
            return;
        }

        $targetObject = $this->valueHolder5da21d82ef725806597146;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer5da21d82ef72d970101963 && ($this->initializer5da21d82ef72d970101963->__invoke($valueHolder5da21d82ef725806597146, $this, '__isset', array('name' => $name), $this->initializer5da21d82ef72d970101963) || 1) && $this->valueHolder5da21d82ef725806597146 = $valueHolder5da21d82ef725806597146;

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder5da21d82ef725806597146;

            return isset($targetObject->$name);
            return;
        }

        $targetObject = $this->valueHolder5da21d82ef725806597146;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer5da21d82ef72d970101963 && ($this->initializer5da21d82ef72d970101963->__invoke($valueHolder5da21d82ef725806597146, $this, '__unset', array('name' => $name), $this->initializer5da21d82ef72d970101963) || 1) && $this->valueHolder5da21d82ef725806597146 = $valueHolder5da21d82ef725806597146;

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder5da21d82ef725806597146;

            unset($targetObject->$name);
            return;
        }

        $targetObject = $this->valueHolder5da21d82ef725806597146;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer5da21d82ef72d970101963 && ($this->initializer5da21d82ef72d970101963->__invoke($valueHolder5da21d82ef725806597146, $this, '__clone', array(), $this->initializer5da21d82ef72d970101963) || 1) && $this->valueHolder5da21d82ef725806597146 = $valueHolder5da21d82ef725806597146;

        $this->valueHolder5da21d82ef725806597146 = clone $this->valueHolder5da21d82ef725806597146;
    }

    public function __sleep()
    {
        $this->initializer5da21d82ef72d970101963 && ($this->initializer5da21d82ef72d970101963->__invoke($valueHolder5da21d82ef725806597146, $this, '__sleep', array(), $this->initializer5da21d82ef72d970101963) || 1) && $this->valueHolder5da21d82ef725806597146 = $valueHolder5da21d82ef725806597146;

        return array('valueHolder5da21d82ef725806597146');
    }

    public function __wakeup()
    {
        unset($this->maxIdLength, $this->logger);

        \Closure::bind(function (\Symfony\Component\Cache\Adapter\FilesystemAdapter $instance) {
            unset($instance->directory, $instance->tmp);
        }, $this, 'Symfony\\Component\\Cache\\Adapter\\FilesystemAdapter')->__invoke($this);

        \Closure::bind(function (\Symfony\Component\Cache\Adapter\AbstractAdapter $instance) {
            unset($instance->createCacheItem, $instance->mergeByLifetime, $instance->namespace, $instance->namespaceVersion, $instance->versioningIsEnabled, $instance->deferred);
        }, $this, 'Symfony\\Component\\Cache\\Adapter\\AbstractAdapter')->__invoke($this);
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer5da21d82ef72d970101963 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer5da21d82ef72d970101963;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy() : bool
    {
        return $this->initializer5da21d82ef72d970101963 && ($this->initializer5da21d82ef72d970101963->__invoke($valueHolder5da21d82ef725806597146, $this, 'initializeProxy', array(), $this->initializer5da21d82ef72d970101963) || 1) && $this->valueHolder5da21d82ef725806597146 = $valueHolder5da21d82ef725806597146;
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHolder5da21d82ef725806597146;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder5da21d82ef725806597146;
    }


}

class FOSRestBundleSerializerJMSSerializerAdapter_000000006d9c1a53000000004dc181e407c393e08643067c07eb5044e3591135 extends \FOS\RestBundle\Serializer\JMSSerializerAdapter implements \ProxyManager\Proxy\VirtualProxyInterface
{

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $valueHolder5da21d82f1f53977915833 = null;

    /**
     * @var \Closure|null initializer responsible for generating the wrapped object
     */
    private $initializer5da21d82f1f5b967941350 = null;

    /**
     * @var bool[] map of public properties of the parent class
     */
    private static $publicProperties5da21d82f1f35332275866 = [
        
    ];

    /**
     * {@inheritDoc}
     */
    public function serialize($data, $format, \FOS\RestBundle\Context\Context $context)
    {
        $this->initializer5da21d82f1f5b967941350 && ($this->initializer5da21d82f1f5b967941350->__invoke($valueHolder5da21d82f1f53977915833, $this, 'serialize', array('data' => $data, 'format' => $format, 'context' => $context), $this->initializer5da21d82f1f5b967941350) || 1) && $this->valueHolder5da21d82f1f53977915833 = $valueHolder5da21d82f1f53977915833;

        return $this->valueHolder5da21d82f1f53977915833->serialize($data, $format, $context);
    }

    /**
     * {@inheritDoc}
     */
    public function deserialize($data, $type, $format, \FOS\RestBundle\Context\Context $context)
    {
        $this->initializer5da21d82f1f5b967941350 && ($this->initializer5da21d82f1f5b967941350->__invoke($valueHolder5da21d82f1f53977915833, $this, 'deserialize', array('data' => $data, 'type' => $type, 'format' => $format, 'context' => $context), $this->initializer5da21d82f1f5b967941350) || 1) && $this->valueHolder5da21d82f1f53977915833 = $valueHolder5da21d82f1f53977915833;

        return $this->valueHolder5da21d82f1f53977915833->deserialize($data, $type, $format, $context);
    }

    /**
     * Constructor for lazy initialization
     *
     * @param \Closure|null $initializer
     */
    public static function staticProxyConstructor($initializer)
    {
        static $reflection;

        $reflection = $reflection ?: $reflection = new \ReflectionClass(__CLASS__);
        $instance = (new \ReflectionClass(get_class()))->newInstanceWithoutConstructor();

        \Closure::bind(function (\FOS\RestBundle\Serializer\JMSSerializerAdapter $instance) {
            unset($instance->serializer, $instance->serializationContextFactory, $instance->deserializationContextFactory);
        }, $instance, 'FOS\\RestBundle\\Serializer\\JMSSerializerAdapter')->__invoke($instance);

        $instance->initializer5da21d82f1f5b967941350 = $initializer;

        return $instance;
    }

    /**
     * {@inheritDoc}
     */
    public function __construct(\JMS\Serializer\SerializerInterface $serializer, ?\JMS\Serializer\ContextFactory\SerializationContextFactoryInterface $serializationContextFactory = null, ?\JMS\Serializer\ContextFactory\DeserializationContextFactoryInterface $deserializationContextFactory = null)
    {
        static $reflection;

        if (! $this->valueHolder5da21d82f1f53977915833) {
            $reflection = $reflection ?: new \ReflectionClass('FOS\\RestBundle\\Serializer\\JMSSerializerAdapter');
            $this->valueHolder5da21d82f1f53977915833 = $reflection->newInstanceWithoutConstructor();
        \Closure::bind(function (\FOS\RestBundle\Serializer\JMSSerializerAdapter $instance) {
            unset($instance->serializer, $instance->serializationContextFactory, $instance->deserializationContextFactory);
        }, $this, 'FOS\\RestBundle\\Serializer\\JMSSerializerAdapter')->__invoke($this);

        }

        $this->valueHolder5da21d82f1f53977915833->__construct($serializer, $serializationContextFactory, $deserializationContextFactory);
    }

    /**
     * @param string $name
     */
    public function & __get($name)
    {
        $this->initializer5da21d82f1f5b967941350 && ($this->initializer5da21d82f1f5b967941350->__invoke($valueHolder5da21d82f1f53977915833, $this, '__get', ['name' => $name], $this->initializer5da21d82f1f5b967941350) || 1) && $this->valueHolder5da21d82f1f53977915833 = $valueHolder5da21d82f1f53977915833;

        if (isset(self::$publicProperties5da21d82f1f35332275866[$name])) {
            return $this->valueHolder5da21d82f1f53977915833->$name;
        }

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder5da21d82f1f53977915833;

            $backtrace = debug_backtrace(false);
            trigger_error(
                sprintf(
                    'Undefined property: %s::$%s in %s on line %s',
                    get_parent_class($this),
                    $name,
                    $backtrace[0]['file'],
                    $backtrace[0]['line']
                ),
                \E_USER_NOTICE
            );
            return $targetObject->$name;
            return;
        }

        $targetObject = $this->valueHolder5da21d82f1f53977915833;
        $accessor = function & () use ($targetObject, $name) {
            return $targetObject->$name;
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     * @param mixed $value
     */
    public function __set($name, $value)
    {
        $this->initializer5da21d82f1f5b967941350 && ($this->initializer5da21d82f1f5b967941350->__invoke($valueHolder5da21d82f1f53977915833, $this, '__set', array('name' => $name, 'value' => $value), $this->initializer5da21d82f1f5b967941350) || 1) && $this->valueHolder5da21d82f1f53977915833 = $valueHolder5da21d82f1f53977915833;

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder5da21d82f1f53977915833;

            return $targetObject->$name = $value;
            return;
        }

        $targetObject = $this->valueHolder5da21d82f1f53977915833;
        $accessor = function & () use ($targetObject, $name, $value) {
            return $targetObject->$name = $value;
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = & $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __isset($name)
    {
        $this->initializer5da21d82f1f5b967941350 && ($this->initializer5da21d82f1f5b967941350->__invoke($valueHolder5da21d82f1f53977915833, $this, '__isset', array('name' => $name), $this->initializer5da21d82f1f5b967941350) || 1) && $this->valueHolder5da21d82f1f53977915833 = $valueHolder5da21d82f1f53977915833;

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder5da21d82f1f53977915833;

            return isset($targetObject->$name);
            return;
        }

        $targetObject = $this->valueHolder5da21d82f1f53977915833;
        $accessor = function () use ($targetObject, $name) {
            return isset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    /**
     * @param string $name
     */
    public function __unset($name)
    {
        $this->initializer5da21d82f1f5b967941350 && ($this->initializer5da21d82f1f5b967941350->__invoke($valueHolder5da21d82f1f53977915833, $this, '__unset', array('name' => $name), $this->initializer5da21d82f1f5b967941350) || 1) && $this->valueHolder5da21d82f1f53977915833 = $valueHolder5da21d82f1f53977915833;

        $realInstanceReflection = new \ReflectionClass(get_parent_class($this));

        if (! $realInstanceReflection->hasProperty($name)) {
            $targetObject = $this->valueHolder5da21d82f1f53977915833;

            unset($targetObject->$name);
            return;
        }

        $targetObject = $this->valueHolder5da21d82f1f53977915833;
        $accessor = function () use ($targetObject, $name) {
            unset($targetObject->$name);
        };
        $backtrace = debug_backtrace(true);
        $scopeObject = isset($backtrace[1]['object']) ? $backtrace[1]['object'] : new \ProxyManager\Stub\EmptyClassStub();
        $accessor = $accessor->bindTo($scopeObject, get_class($scopeObject));
        $returnValue = $accessor();

        return $returnValue;
    }

    public function __clone()
    {
        $this->initializer5da21d82f1f5b967941350 && ($this->initializer5da21d82f1f5b967941350->__invoke($valueHolder5da21d82f1f53977915833, $this, '__clone', array(), $this->initializer5da21d82f1f5b967941350) || 1) && $this->valueHolder5da21d82f1f53977915833 = $valueHolder5da21d82f1f53977915833;

        $this->valueHolder5da21d82f1f53977915833 = clone $this->valueHolder5da21d82f1f53977915833;
    }

    public function __sleep()
    {
        $this->initializer5da21d82f1f5b967941350 && ($this->initializer5da21d82f1f5b967941350->__invoke($valueHolder5da21d82f1f53977915833, $this, '__sleep', array(), $this->initializer5da21d82f1f5b967941350) || 1) && $this->valueHolder5da21d82f1f53977915833 = $valueHolder5da21d82f1f53977915833;

        return array('valueHolder5da21d82f1f53977915833');
    }

    public function __wakeup()
    {
        \Closure::bind(function (\FOS\RestBundle\Serializer\JMSSerializerAdapter $instance) {
            unset($instance->serializer, $instance->serializationContextFactory, $instance->deserializationContextFactory);
        }, $this, 'FOS\\RestBundle\\Serializer\\JMSSerializerAdapter')->__invoke($this);
    }

    /**
     * {@inheritDoc}
     */
    public function setProxyInitializer(\Closure $initializer = null)
    {
        $this->initializer5da21d82f1f5b967941350 = $initializer;
    }

    /**
     * {@inheritDoc}
     */
    public function getProxyInitializer()
    {
        return $this->initializer5da21d82f1f5b967941350;
    }

    /**
     * {@inheritDoc}
     */
    public function initializeProxy() : bool
    {
        return $this->initializer5da21d82f1f5b967941350 && ($this->initializer5da21d82f1f5b967941350->__invoke($valueHolder5da21d82f1f53977915833, $this, 'initializeProxy', array(), $this->initializer5da21d82f1f5b967941350) || 1) && $this->valueHolder5da21d82f1f53977915833 = $valueHolder5da21d82f1f53977915833;
    }

    /**
     * {@inheritDoc}
     */
    public function isProxyInitialized() : bool
    {
        return null !== $this->valueHolder5da21d82f1f53977915833;
    }

    /**
     * {@inheritDoc}
     */
    public function getWrappedValueHolderValue()
    {
        return $this->valueHolder5da21d82f1f53977915833;
    }


}
